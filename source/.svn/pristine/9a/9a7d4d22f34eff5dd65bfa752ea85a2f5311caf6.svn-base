using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Mvc;
using PagedList;
using WebView.Library;
using WebView.Models;
using WebView.NRMWebService;
using WebView.OSPHandoverServices;
using WebView.ISPHandoverServices;
using WebView.GraniteISP;
using WebView.GraniteOSP;
using System.Configuration;

namespace WebView.Controllers
{

    public class JobController : Controller
    {
        //
        // GET: /Job/
        private string visionael = ConfigurationManager.AppSettings.Get("VISIONAEL_URL");

        public ActionResult Index()
        {
            return RedirectToAction("List", "Job");
        }

        public ActionResult List(string searchKey, int? page, string jobExc, string jobScheme, string jobYear , string jobState)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            WebService._base.OSPJob jobs = new WebService._base.OSPJob();

            if (searchKey != null)
            {
                System.Diagnostics.Debug.WriteLine("A");
                if (searchKey.Equals("") && jobExc.Equals("Select") && jobScheme.Equals("Select") && jobYear.Equals("0") && jobState.Equals("Select"))
                {
                    jobs = myWebService.GetOSPJob(User.Identity.Name, 0, 1000000, null, null, null, null,null);
                    ViewBag.searchKey = searchKey;
                    ViewBag.excabb2 = jobExc;
                    ViewBag.schemeType2 = jobScheme;
                    ViewBag.jobyear2 = jobYear;
                    ViewBag.jobState2 = jobState;
                                   }
                else
                {
                    System.Diagnostics.Debug.WriteLine("C");
                    jobs = myWebService.GetOSPJob(User.Identity.Name, 0, 1000000, searchKey, jobExc, jobScheme, jobYear, jobState);
                    if (searchKey != "")
                    {
                        ViewBag.searchKey = searchKey;
                    }
                    else
                    {
                        ViewBag.searchKey = "";
                    }
                    ViewBag.excabb2 = jobExc;
                    ViewBag.schemeType2 = jobScheme;
                    ViewBag.jobyear2 = jobYear;
                    ViewBag.jobState2 = jobState;
                }
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("D");
                jobs = myWebService.GetOSPJob(User.Identity.Name, 0, 1000000, null, null, null, null, null);

                ViewBag.searchKey2 = null;
                ViewBag.excabb2 = "Select";
                ViewBag.schemeType2 = "Select";
                ViewBag.jobState2 = "Select";
                ViewBag.jobyear2 = 0;
                ViewBag.jobState2 = "Select";
            }

            string input = "\\\\adsvr";
            string output = String.Format("http:{0}", input.Replace("\\d$\\x\\y", String.Empty).Replace("\\", "/"));

            ViewBag.output = output;

            using (Entities ctxData = new Entities())
            {
                string UserGrp = "";

                var queryUser = (from d in ctxData.WV_USER
                                 where d.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || d.USERNAME.ToLower() == User.Identity.Name.ToLower()
                                 select new { d.PTT_STATE, d.EXC, d.GROUPID });

                foreach (var a in queryUser)
                {
                    UserGrp = a.GROUPID;
                }

                var query = from p in ctxData.REF_FEATURE_STATE
                            select new { Text = p.FEATURE_STATE, Value = p.FEATURE_STATE };

                string jobStateList = "";
                foreach (var a in query)
                {
                    jobStateList = jobStateList + a.Text + "|";
                }

                ViewBag.jobstate = jobStateList.Substring(0, jobStateList.Length - 1);

                
                if (UserGrp == "12")
                {
                    //filter exchange
                    List<SelectListItem> list = new List<SelectListItem>();
                    var queryEXC = from p in ctxData.G3E_JOB
                               where p.WEBVIEW == 1
                               select new { Text = p.EXC_ABB, Value = p.EXC_ABB };

                    list.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryEXC.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }
                
                    //filter scheme
                    List<SelectListItem> list2 = new List<SelectListItem>();
                    var querySCHEME = from p in ctxData.G3E_JOB
                                      where p.WEBVIEW == 1
                                      select new { Text = p.JOB_TYPE, Value = p.JOB_TYPE };

                    list2.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in querySCHEME.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list2.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }

                    //filter year
                    List<SelectListItem> list3 = new List<SelectListItem>();
                    var queryYEAR = from p in ctxData.G3E_JOB
                                    where p.WEBVIEW == 1
                                    select new { Text = p.YEAR, Value = p.YEAR };

                    list3.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryYEAR.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list3.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }
                    List<SelectListItem> list4 = new List<SelectListItem>();
                    var queryState = from p in ctxData.G3E_JOB
                                   where p.WEBVIEW == 1
                                   select new { Text = p.JOB_STATE, Value = p.JOB_STATE };

                    list4.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryState.Distinct().OrderBy(it => it.Value))
                    {
                        
                        if (a.Value != null)
                            list4.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }
                    ViewBag.jobState = list4;
                    ViewBag.excabb = list;
                    ViewBag.schemeType = list2;
                    ViewBag.jobyear = list3;

                }
                else
                {
                    //filter exchange
                    List<SelectListItem> list = new List<SelectListItem>();
                    var queryEXC = from p in ctxData.G3E_JOB
                               where p.G3E_OWNER.ToUpper() == User.Identity.Name.ToUpper() || p.G3E_OWNER.ToLower() == User.Identity.Name.ToLower()
                               select new { Text = p.EXC_ABB, Value = p.EXC_ABB };

                    list.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryEXC.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }
                
                    //filter scheme
                    List<SelectListItem> list2 = new List<SelectListItem>();
                    var querySCHEME = from p in ctxData.G3E_JOB
                                      where p.G3E_OWNER.ToUpper() == User.Identity.Name.ToUpper() || p.G3E_OWNER.ToLower() == User.Identity.Name.ToLower()
                                      select new { Text = p.JOB_TYPE, Value = p.JOB_TYPE };

                    list2.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in querySCHEME.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list2.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }

                    //filter year
                    List<SelectListItem> list3 = new List<SelectListItem>();
                    var queryYEAR = from p in ctxData.G3E_JOB
                                    where p.G3E_OWNER.ToUpper() == User.Identity.Name.ToUpper() || p.G3E_OWNER.ToLower() == User.Identity.Name.ToLower()
                                    select new { Text = p.YEAR, Value = p.YEAR };

                    list3.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryYEAR.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list3.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }
                    List<SelectListItem> list4 = new List<SelectListItem>();
                    var queryState = from p in ctxData.G3E_JOB
                                     where p.G3E_OWNER.ToUpper() == User.Identity.Name.ToUpper() || p.G3E_OWNER.ToLower() == User.Identity.Name.ToLower()
                                     select new { Text = p.JOB_STATE, Value = p.JOB_STATE };

                    list4.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryState.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list4.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }
                    ViewBag.jobState = list4;
                    ViewBag.excabb = list;
                    ViewBag.schemeType = list2;
                    ViewBag.jobyear = list3;
                }
            }

            //int page = 1;
            int pageSize = 10;
            int pageNumber = (page ?? 1);
            return View(jobs.JobList.ToPagedList(pageNumber, pageSize));
        }

        public ActionResult ISPList(string searchKey, int? page, string jobExc, string jobScheme, string jobYear , string jobState)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            WebService._base.OSPJob jobs = new WebService._base.OSPJob();

            if (searchKey != null)
            {
                System.Diagnostics.Debug.WriteLine("A");
                if (searchKey.Equals("") && jobExc.Equals("Select") && jobScheme.Equals("Select") && jobYear.Equals("0") && jobState.Equals("Select"))
                {
                    System.Diagnostics.Debug.WriteLine("B");
                    jobs = myWebService.GetISPJob(User.Identity.Name, 0, 1000000, null, null, null, null, null);
                    ViewBag.searchKey = searchKey;
                    ViewBag.excabb2 = jobExc;
                    ViewBag.schemeType2 = jobScheme;
                    ViewBag.jobyear2 = jobYear;
                     ViewBag.jobState2 = jobState;
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("C");
                    jobs = myWebService.GetISPJob(User.Identity.Name, 0, 1000000, searchKey, jobExc, jobScheme, jobYear, jobState);
                    if (searchKey != "")
                    {
                        ViewBag.searchKey = searchKey;
                    }
                    else
                    {
                        ViewBag.searchKey = "";
                    }
                    System.Diagnostics.Debug.WriteLine("  " + searchKey + "   " + jobExc + "   " + jobScheme + "   " + jobYear + "   " + jobState);
                    ViewBag.excabb2 = jobExc;
                    ViewBag.schemeType2 = jobScheme;
                    ViewBag.jobyear2 = jobYear;
                     ViewBag.jobState2 = jobState;
                     System.Diagnostics.Debug.WriteLine("C");
                }
            }
            else
            {
                
                System.Diagnostics.Debug.WriteLine("D");
                jobs = myWebService.GetISPJob(User.Identity.Name, 0, 1000000, null, null, null, null, null);

                ViewBag.searchKey2 = null;
                ViewBag.excabb2 = "Select";
                ViewBag.schemeType2 = "Select";
                ViewBag.jobyear2 = 0;
                ViewBag.jobState2 = "Select";
            }


            string input = "\\\\adsvr";
            //string input = "\\\\server\\d$\\x\\y\\z\\AAA";
            string output = String.Format("http:{0}", input.Replace("\\d$\\x\\y", String.Empty).Replace("\\", "/"));

            ViewBag.output = output;

            using (Entities ctxData = new Entities())
            {
                string UserGrp = "";

                var queryUser = (from d in ctxData.WV_USER
                                 where d.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || d.USERNAME.ToLower() == User.Identity.Name.ToLower()
                                 select new { d.PTT_STATE, d.EXC, d.GROUPID });

                foreach (var a in queryUser)
                {
                    UserGrp = a.GROUPID;
                }

                var query = from p in ctxData.REF_FEATURE_STATE
                            select new { Text = p.FEATURE_STATE, Value = p.FEATURE_STATE };

                string jobStateList = "";
                foreach (var a in query)
                {
                    jobStateList = jobStateList + a.Text + "|";
                }

                ViewBag.jobstate = jobStateList.Substring(0, jobStateList.Length - 1);

                if (UserGrp == "12")
                {
                    //filter exchange
                    List<SelectListItem> list = new List<SelectListItem>();
                    var queryEXC = from p in ctxData.WV_ISP_JOB
                                   where p.WEBVIEW == 1
                                   select new { Text = p.EXC_ABB, Value = p.EXC_ABB };

                    list.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryEXC.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }

                    //filter scheme
                    List<SelectListItem> list2 = new List<SelectListItem>();
                    var querySCHEME = from p in ctxData.WV_ISP_JOB
                                      where p.WEBVIEW == 1
                                      select new { Text = p.JOB_TYPE, Value = p.JOB_TYPE };

                    list2.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in querySCHEME.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list2.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }

                    //filter year
                    List<SelectListItem> list3 = new List<SelectListItem>();
                    var queryYEAR = from p in ctxData.WV_ISP_JOB
                                    where p.WEBVIEW == 1
                                    select new { Text = p.YEAR, Value = p.YEAR };

                    list3.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryYEAR.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list3.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }
                    List<SelectListItem> list4 = new List<SelectListItem>();
                    var queryState = from p in ctxData.G3E_JOB
                                     where p.WEBVIEW == 1
                                     select new { Text = p.JOB_STATE, Value = p.JOB_STATE };

                    list4.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryState.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list4.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }
                    ViewBag.jobState = list4;
                    ViewBag.excabb = list;
                    ViewBag.schemeType = list2;
                    ViewBag.jobyear = list3;

                }
                else
                {
                    //filter exchange
                    List<SelectListItem> list = new List<SelectListItem>();
                    var queryEXC = from p in ctxData.WV_ISP_JOB
                                   where p.G3E_OWNER.ToUpper() == User.Identity.Name.ToUpper() || p.G3E_OWNER.ToLower() == User.Identity.Name.ToLower()
                                   select new { Text = p.EXC_ABB, Value = p.EXC_ABB };

                    list.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryEXC.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }

                    //filter scheme
                    List<SelectListItem> list2 = new List<SelectListItem>();
                    var querySCHEME = from p in ctxData.WV_ISP_JOB
                                      where p.G3E_OWNER.ToUpper() == User.Identity.Name.ToUpper() || p.G3E_OWNER.ToLower() == User.Identity.Name.ToLower()
                                      select new { Text = p.JOB_TYPE, Value = p.JOB_TYPE };

                    list2.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in querySCHEME.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list2.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }

                    //filter year
                    List<SelectListItem> list3 = new List<SelectListItem>();
                    var queryYEAR = from p in ctxData.WV_ISP_JOB
                                    where p.G3E_OWNER.ToUpper() == User.Identity.Name.ToUpper() || p.G3E_OWNER.ToLower() == User.Identity.Name.ToLower()
                                    select new { Text = p.YEAR, Value = p.YEAR };

                    list3.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryYEAR.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list3.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    } List<SelectListItem> list4 = new List<SelectListItem>();
                    var queryState = from p in ctxData.G3E_JOB
                                     where p.G3E_OWNER.ToUpper() == User.Identity.Name.ToUpper() || p.G3E_OWNER.ToLower() == User.Identity.Name.ToLower()
                                     select new { Text = p.JOB_STATE, Value = p.JOB_STATE };

                    list4.Add(new SelectListItem() { Text = "", Value = "Select" });
                    foreach (var a in queryState.Distinct().OrderBy(it => it.Value))
                    {
                        if (a.Value != null)
                            list4.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                    }
                    ViewBag.jobState = list4;
                    ViewBag.excabb = list;
                    ViewBag.schemeType = list2;
                    ViewBag.jobyear = list3;
                }
            }

            //int page = 1;
            int pageSize = 10;
            int pageNumber = (page ?? 1);
            //ViewBag.boq = boqCheck;
            return View(jobs.JobList.ToPagedList(pageNumber, pageSize));
        }

        public ActionResult RNOList(string searchKey, int? page)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            WebService._base.OSPJob jobs = new WebService._base.OSPJob();

            if (searchKey != null)
            {
                if (searchKey.Equals(""))
                {
                    jobs = myWebService.GetRNOJob(User.Identity.Name, 0, 1000000, null);
                }
                else
                {
                    jobs = myWebService.GetRNOJob(User.Identity.Name, 0, 1000000, searchKey);
                    ViewBag.searchKey = searchKey;
                }
            }
            else
            {
                jobs = myWebService.GetRNOJob(User.Identity.Name, 0, 1000000, null);
                ViewBag.searchKey = "";
            }

            string input = "\\\\adsvr";
            //string input = "\\\\server\\d$\\x\\y\\z\\AAA";
            string output = String.Format("http:{0}", input.Replace("\\d$\\x\\y", String.Empty).Replace("\\", "/"));

            ViewBag.output = output;

            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.REF_FEATURE_STATE
                            select new { Text = p.FEATURE_STATE, Value = p.FEATURE_STATE };

                string jobStateList = "";
                foreach (var a in query)
                {
                    jobStateList = jobStateList + a.Text + "|";
                }

                ViewBag.jobstate = jobStateList.Substring(0, jobStateList.Length - 1);
            }

            //int page = 1;
            int pageSize = 10;
            int pageNumber = (page ?? 1);
            return View(jobs.JobList.ToPagedList(pageNumber, pageSize));
        }

        public ActionResult APPList(string searchKey, int? page)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            WebService._base.OSPJob jobs = new WebService._base.OSPJob();

            if (searchKey != null)
            {
                if (searchKey.Equals(""))
                {
                    jobs = myWebService.GetAPPJob(User.Identity.Name, 0, 1000000, null);
                }
                else
                {
                    jobs = myWebService.GetAPPJob(User.Identity.Name, 0, 1000000, searchKey);
                    ViewBag.searchKey = searchKey;
                }
            }
            else
            {
                jobs = myWebService.GetAPPJob(User.Identity.Name, 0, 1000000, null);
                ViewBag.searchKey = "";
            }

            string input = "\\\\adsvr";
            //string input = "\\\\server\\d$\\x\\y\\z\\AAA";
            string output = String.Format("http:{0}", input.Replace("\\d$\\x\\y", String.Empty).Replace("\\", "/"));

            ViewBag.output = output;

            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.REF_FEATURE_STATE
                            select new { Text = p.FEATURE_STATE, Value = p.FEATURE_STATE };

                string jobStateList = "";
                foreach (var a in query)
                {
                    jobStateList = jobStateList + a.Text + "|";
                }

                ViewBag.jobstate = jobStateList.Substring(0, jobStateList.Length - 1);
            }

            //int page = 1;
            int pageSize = 10;
            int pageNumber = (page ?? 1);
            return View(jobs.JobList.ToPagedList(pageNumber, pageSize));
        }

        public ActionResult LNMSList(string searchKey, int? page, string jobExc, string jobScheme, string jobYear)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            WebService._base.OSPJob jobs = new WebService._base.OSPJob();

            if (searchKey != null)
            {
                System.Diagnostics.Debug.WriteLine("A");
                if (searchKey.Equals("") && jobExc.Equals("Select") && jobScheme.Equals("Select") && jobYear.Equals("0"))
                {
                    System.Diagnostics.Debug.WriteLine("B");
                    jobs = myWebService.GetLNMSJob(User.Identity.Name, 0, 1000, null, null, null, null);
                    ViewBag.searchKey = searchKey;
                    ViewBag.excabb2 = jobExc;
                    ViewBag.schemeType2 = jobScheme;
                    ViewBag.jobyear2 = jobYear;
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("C");
                    jobs = myWebService.GetLNMSJob(User.Identity.Name, 0, 1000, searchKey, jobExc, jobScheme, jobYear);
                    if (searchKey != "")
                    {
                        ViewBag.searchKey = searchKey;
                    }
                    else
                    {
                        ViewBag.searchKey = "";
                    }
                    ViewBag.excabb2 = jobExc;
                    ViewBag.schemeType2 = jobScheme;
                    ViewBag.jobyear2 = jobYear;
                }
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("D");
                jobs = myWebService.GetLNMSJob(User.Identity.Name, 0, 1000, null, null, null, null);

                ViewBag.searchKey2 = null;
                ViewBag.excabb2 = "Select";
                ViewBag.schemeType2 = "Select";
                ViewBag.jobyear2 = 0;
            }

            string input = "\\\\adsvr";
            //string input = "\\\\server\\d$\\x\\y\\z\\AAA";
            string output = String.Format("http:{0}", input.Replace("\\d$\\x\\y", String.Empty).Replace("\\", "/"));

            ViewBag.output = output;

            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.REF_FEATURE_STATE
                            select new { Text = p.FEATURE_STATE, Value = p.FEATURE_STATE };

                string jobStateList = "";
                foreach (var a in query)
                {
                    jobStateList = jobStateList + a.Text + "|";
                }

                ViewBag.jobstate = jobStateList.Substring(0, jobStateList.Length - 1);

                //filter exchange
                List<SelectListItem> list = new List<SelectListItem>();
                var queryEXC = from p in ctxData.G3E_JOB
                               join fx in ctxData.GC_NETELEM on p.G3E_IDENTIFIER equals fx.JOB_ID
                               where p.WEBVIEW == null && p.G3E_IDENTIFIER != "109693"
                               select new { Text = p.G3E_IDENTIFIER, Value = p.G3E_IDENTIFIER };

                list.Add(new SelectListItem() { Text = "", Value = "Select" });

                string listDis = "";
                foreach (var a in queryEXC.Distinct().OrderBy(it => it.Value))
                {
                    string[] exc = a.Text.Split('-');
                    listDis = listDis + exc[0] + ",";    
                }
                System.Diagnostics.Debug.WriteLine(listDis);
                string[] listText = listDis.Split(',');

                foreach (string a in listText.Distinct())
                {
                    list.Add(new SelectListItem() { Text = a.ToString(), Value = a.ToString() });
                }
                ViewBag.excabb = list;
                
                //filter scheme
                List<SelectListItem> list2 = new List<SelectListItem>();
                var querySCHEME = from p in ctxData.G3E_JOB
                                  join fx in ctxData.GC_NETELEM on p.G3E_IDENTIFIER equals fx.JOB_ID
                                  where p.WEBVIEW == null
                                  select new { Text = p.JOB_TYPE, Value = p.JOB_TYPE };

                list2.Add(new SelectListItem() { Text = "", Value = "Select" });
                foreach (var a in querySCHEME.Distinct().OrderBy(it => it.Value))
                {
                    if (a.Value != null)
                        list2.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                }

                ViewBag.schemeType = list2;

                //filter year
                List<SelectListItem> list3 = new List<SelectListItem>();
                var queryYEAR = from p in ctxData.G3E_JOB
                                join fx in ctxData.GC_NETELEM on p.G3E_IDENTIFIER equals fx.JOB_ID
                                where p.WEBVIEW == null
                                select new { Text = p.YEAR_INSTALL, Value = p.YEAR_INSTALL };

                list3.Add(new SelectListItem() { Text = "", Value = "Select" });
                foreach (var a in queryYEAR.Distinct().OrderBy(it => it.Value))
                {
                    if (a.Value != null)
                        list3.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                }

                ViewBag.jobyear = list3;
            }

            //int page = 1;
            int pageSize = 10;
            int pageNumber = (page ?? 1);
            return View(jobs.JobList.ToPagedList(pageNumber, pageSize));
        }

        public ActionResult NewJob(string job)
        {
            List<SelectListItem> list = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.REF_FEATURE_STATE
                            select new { Text = p.FEATURE_STATE, Value = p.FEATURE_STATE };

                foreach (var a in query)
                {
                    list.Add(new SelectListItem() { Text = a.Text, Value = a.Value.ToString() });
                }

                ViewBag.jobstate = list;
            }

            List<SelectListItem> list2 = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.REF_JOB_TYPES
                            orderby p.JOB_TYPE ascending
                            select new { Text = p.JOB_TYPE, Value = p.JOB_TYPE };

                foreach (var a in query)
                {
                    list2.Add(new SelectListItem() { Text = a.Text, Value = a.Value.ToString() });
                }

                ViewBag.schemetype = list2;
            }


            List<SelectListItem> list3 = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var queryUsr = (from up in ctxData.WV_USER
                                where up.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || up.USERNAME.ToLower() == User.Identity.Name.ToLower()
                                select up).Single();

                var query = from p in ctxData.WV_EXC_MAST
                            orderby p.EXC_NAME ascending, p.EXC_ABB ascending
                            where p.PTT_ID.Trim() == queryUsr.PTT_STATE.Trim()
                            select new { Text = p.EXC_NAME + " (" + p.EXC_ABB.Trim() + ")", Value = p.EXC_ABB };

                foreach (var a in query)
                {
                    list3.Add(new SelectListItem() { Text = a.Text, Value = a.Value.ToString() });
                }

                ViewBag.excabb = list3;
            }

            List<SelectListItem> list4 = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var queryUsr = (from up in ctxData.WV_USER
                                where up.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || up.USERNAME.ToLower() == User.Identity.Name.ToLower()
                                select up).Single();
                if (queryUsr.PTT_STATE.Trim() == "ALL")
                {
                    var query = from p in ctxData.WV_EXC_MAST
                                orderby p.PTT_ID ascending
                                //where p.PTT_ID.Trim() == queryUsr.PTT_STATE.Trim()
                                select new { p.PTT_ID };

                    foreach (var a in query.Distinct().OrderBy(it => it.PTT_ID))
                    {
                        list4.Add(new SelectListItem() { Text = a.PTT_ID, Value = a.PTT_ID });
                    }
                    ViewBag.checkEXC = "TRUE";
                    ViewBag.pttID = list4;
                }
                else if (queryUsr.GROUPID == "6")
                {
                    string region_nation = "";
                    var queryRegionMast = (from M in ctxData.WV_EXC_MAST 
                                        join f in ctxData.WV_PTT_MAST on M.PTT_ID equals f.PTT_ID 
                                        join g in ctxData.WV_REGION_MAST on f.REGION_ID equals g.REGION_ID
                                        where M.PTT_ID.Trim() == queryUsr.PTT_STATE.Trim()
                                        select new { g.NATIONWIDE_GRP });
                    foreach (var a in queryRegionMast.Distinct())
                    {
                        region_nation = a.NATIONWIDE_GRP;
                    }

                    var queryPttMast = (from f in ctxData.WV_PTT_MAST 
                                        join  h in ctxData.WV_EXC_MAST on f.PTT_ID equals h.PTT_ID 
                                           join g in ctxData.WV_REGION_MAST on f.REGION_ID equals g.REGION_ID
                                           where g.NATIONWIDE_GRP.Trim() == region_nation
                                           select new { h.SEGMENT });

                    list4.Clear();
                    foreach (var a in queryPttMast.Distinct().OrderBy(it => it.SEGMENT))
                    {
                        list4.Add(new SelectListItem() { Text = a.SEGMENT, Value = a.SEGMENT  });
                    }
                    ViewBag.checkEXC = "TRUE";
                    ViewBag.pttID = list4;
                }
                else if (queryUsr.GROUPID == "5")
                {
                    string region = "";
                    var queryRegionMast = (from M in ctxData.WV_EXC_MAST
                                           join f in ctxData.WV_PTT_MAST on M.PTT_ID equals f.PTT_ID
                                           join g in ctxData.WV_REGION_MAST on f.REGION_ID equals g.REGION_ID
                                           where M.PTT_ID.Trim() == queryUsr.PTT_STATE.Trim()
                                           select new { g.REGION_ID });
                    foreach (var a in queryRegionMast.Distinct())
                    {
                        region = a.REGION_ID;
                    }

                    var queryPttMast = (from f in ctxData.WV_PTT_MAST
                                        join h in ctxData.WV_EXC_MAST on f.PTT_ID equals h.PTT_ID
                                        join g in ctxData.WV_REGION_MAST on f.REGION_ID equals g.REGION_ID
                                        where g.REGION_ID.Trim() == region
                                        select new { h.SEGMENT });

                    System.Diagnostics.Debug.WriteLine(region);

                    list4.Clear();
                    foreach (var a in queryPttMast.Distinct().OrderBy(it => it.SEGMENT))
                    {
                        list4.Add(new SelectListItem() { Text = a.SEGMENT, Value = a.SEGMENT });
                    }
                    ViewBag.checkEXC = "TRUE";
                    ViewBag.pttID = list4;
                }
                else
                {
                    list4.Add(new SelectListItem() { Text = "SELECT", Value = "SELECT" });
                    ViewBag.pttID = list4;
                    ViewBag.checkEXC = "";
                }

            }


            return View(new WebView.Models.NewJobModel());
        }

        [HttpPost]
        public ActionResult updataListData(string PTT_ID) // FOR USER ALL PTT
        {
            string PuList = "";
            string Mast = "";
            //string PuList2 = "";
            using (Entities ctxData = new Entities())
            {
                List<SelectListItem> list = new List<SelectListItem>();
                var queryEXC = from p in ctxData.WV_EXC_MAST
                               where p.PTT_ID.Trim() == PTT_ID.Trim()
                               orderby p.EXC_ABB
                               select new { p.EXC_ABB, p.EXC_NAME };

                foreach (var a in queryEXC.Distinct().OrderBy(it => it.EXC_NAME))
                {
                    PuList = PuList + a.EXC_NAME + " (" + a.EXC_ABB.Trim() + ") :  " + a.EXC_ABB + "|";
                }
                ViewBag.excabb = list;
                ViewBag.Region = "";
            }

            //return View();
            return Json(new
            {
                Success = true,
                PuList = PuList
            }, JsonRequestBehavior.AllowGet); //
        }

        public ActionResult NewJobRNO(string job)
        {
            List<SelectListItem> list1 = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.GC_ITFACE
                             orderby p.ITFACE_CODE ascending
                             select new { Text = p.CABLE_CODE, Value = p.CABLE_CODE }).ToList();

                foreach (var a in query.Distinct())
                {
                    list1.Add(new SelectListItem() { Text = a.Text, Value = a.Value });
                }

                ViewBag.cabletype = list1;
            }

            List<SelectListItem> list2 = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.GC_ITFACE
                             where p.ITFACE_CLASS == "CABINET"
                             orderby p.ITFACE_CODE ascending
                             select new { Text = p.ITFACE_CODE, Value = p.ITFACE_CODE }).ToList();

                foreach (var a in query.Distinct())
                {
                    list2.Add(new SelectListItem() { Text = a.Text, Value = a.Value });
                }

                ViewBag.schemetype = list2;
            }

            List<SelectListItem> list3 = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var queryUsr = (from up in ctxData.WV_USER
                                where up.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || up.USERNAME.ToLower() == User.Identity.Name.ToLower()
                                select up).Single();

                var query = from p in ctxData.WV_EXC_MAST
                            //orderby p.EXC_NAME ascending, p.EXC_ABB ascending
                            where p.PTT_ID.Trim() == queryUsr.PTT_STATE.Trim()
                            select new { Text = p.EXC_NAME + " (" + p.EXC_ABB + ")", Value = p.EXC_ABB };

                foreach (var a in query)
                {
                    list3.Add(new SelectListItem() { Text = a.Text, Value = a.Value.ToString() });
                }

                ViewBag.excabb = list3;
            }
            List<SelectListItem> list4 = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.REF_JOB_TYPES
                            orderby p.JOB_TYPE ascending
                            select new { Text = p.JOB_TYPE, Value = p.JOB_TYPE };

                foreach (var a in query.Distinct())
                {
                    list4.Add(new SelectListItem() { Text = a.Text, Value = a.Value });
                }

                ViewBag.jobtype = list4;
            }

            return View(new WebView.Models.NewJobModel());
        }

        private string GetSchemeType(string c)
        {
            System.Diagnostics.Debug.WriteLine(c);
            string[] sch = new string[13];
            sch[1] = "Fibre";
            sch[2] = "E-Side";
            sch[3] = "D-Side";
            sch[4] = "Civil";
            sch[5] = "Other";
            sch[6] = "Civil CT-AP";
            sch[7] = "Civil CT-IP";
            sch[8] = "Secure";
            sch[9] = "ADSL";
            sch[10] = "HSBB";

            return sch[Convert.ToInt32(c)];
        }

        [HttpPost]
        public ActionResult NewJob(NewJobModel model, IEnumerable<HttpPostedFileBase> files)
        {
            bool success = true;
            string job_types = "";
            string result = "";
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            bool selected = false;
            using (Entities ctxData = new Entities())
            {
                var query = (from up in ctxData.REF_JOB_TYPES
                             where up.JOB_TYPE.Trim() == model.SchemeType.Trim()
                             select up).Single();

                job_types = query.ISPOSP;
            }

            // create job in OSP (SOAP)
            if (job_types == "OSP")
            {
                selected = true;

                WebService._base.Job newjob = new WebService._base.Job();
                newjob.G3E_DESCRIPTION = model.Description;
                newjob.G3E_IDENTIFIER = "0"; // Stored procedure handle this.
                newjob.WebViewName = "NEPS"; //-----------------------------------------------------------------------------------------
                newjob.G3E_STATE = "PROPOSED";  //model.JobState;
                newjob.G3E_STATUS = "Posted";//
                newjob.EXC_ABB = model.EXC_ABB.Trim();
                newjob.Scheme_Type = model.SchemeType.Trim();
                newjob.G3E_DESCRIPTION_2 = model.Description_2;
                if (model.PlanEndDate < model.PlanStartDate)
                {
                    ModelState.AddModelError("", "Invalid Date Range");
                }
                else
                {
                    newjob.G3E_PlanStartDate = model.PlanStartDate;
                    newjob.G3E_PlanEndDate = model.PlanEndDate;
                    result = myWebService.AddJobOSP(newjob, User.Identity.Name);
                }

                if (result == "fail")
                    success = false;
                else
                {
                    success = true;

                    // Handling Files.                   
                    bool folderCreated = false;
                    foreach (var file in files)
                    {
                        if (file != null)
                        {
                            if (!folderCreated)
                            {
                                //create job directory
                                string newPath = System.IO.Path.Combine(Server.MapPath("~/App_Data/uploads"), "job" + result);
                                System.IO.Directory.CreateDirectory(newPath);
                                System.Diagnostics.Debug.WriteLine(newPath);

                                folderCreated = true;
                            }

                            if (file.ContentLength > 0)
                            {
                                var fileName = Path.GetFileName(file.FileName);
                                DateTime thisDay = DateTime.Now;
                                string extension = Path.GetExtension(file.FileName);
                                string schemeName = "";

                                if (extension == ".xml")
                                {
                                    using (Entities ctxData = new Entities())
                                    {
                                        var query = (from p in ctxData.G3E_JOB
                                                     where p.G3E_IDENTIFIER == result
                                                     select p).Single();

                                        schemeName = query.SCHEME_NAME;
                                    }

                                    var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + result + "/" + schemeName + thisDay.ToString("MMdd") + "_" + thisDay.ToString("HH") + "" + thisDay.ToString("mm") + extension));
                                    file.SaveAs(path);
                                }
                                else
                                {
                                    var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + result), fileName);
                                    file.SaveAs(path);
                                }
                            }
                        }
                    }
                }
            }

            // create job in ISPOSP (SOAP)
            if (job_types == "ISPOSP")
            {
                selected = true;

                WebService._base.Job newjob = new WebService._base.Job();
                newjob.G3E_DESCRIPTION = model.Description;
                newjob.G3E_IDENTIFIER = "0"; // Stored procedure handle this.
                newjob.WebViewName = "NEPS"; //-----------------------------------------------------------------------------------------
                newjob.G3E_STATE = "PROPOSED";  //model.JobState;
                newjob.G3E_STATUS = "Posted";//
                newjob.EXC_ABB = model.EXC_ABB.Trim();
                newjob.Scheme_Type = model.SchemeType.Trim();
                newjob.G3E_DESCRIPTION_2 = model.Description_2;
                if (model.PlanEndDate < model.PlanStartDate)
                {
                    ModelState.AddModelError("", "Invalid Date Range");
                }
                else
                {
                    newjob.G3E_PlanStartDate = model.PlanStartDate;
                    newjob.G3E_PlanEndDate = model.PlanEndDate;
                    result = myWebService.AddJobISPOSP(newjob, User.Identity.Name);
                }

                if (result == "fail")
                    success = false;
                else
                {
                    success = true;
                    string ispScheme = "";
                    string ispDesc = "";
                    string ispOwner = "";
                    using (Entities ctxData = new Entities())
                    {
                        var query = from p in ctxData.WV_ISP_JOB
                                    where p.G3E_IDENTIFIER == result
                                    select new { p.SCHEME_NAME, p.G3E_DESCRIPTION, p.G3E_OWNER, p.JOB_STATE };


                        foreach (var a in query)
                        {
                            ispScheme = a.SCHEME_NAME;
                            ispDesc = a.G3E_DESCRIPTION;
                            ispOwner = a.G3E_OWNER;
                        }

                    }
                    try
                    {
                        // call ISP web service (using restful)
                        // Test NRM Web service
                        System.Diagnostics.Debug.WriteLine(ispScheme);
                        NrmServiceInterfaceClient testWS = new NrmServiceInterfaceClient();
                        testWS.CreateProject(ispScheme, ispDesc, ispScheme, ispOwner);

                        //System.Diagnostics.Debug.WriteLine(NRM);
                    }
                    catch (Exception ex)
                    {
                        System.Diagnostics.Debug.WriteLine(ex.ToString());
                    }
                    // Handling Files.                   
                    bool folderCreated = false;
                    foreach (var file in files)
                    {
                        if (file != null)
                        {
                            if (!folderCreated)
                            {
                                //create job directory
                                string newPath = System.IO.Path.Combine(Server.MapPath("~/App_Data/uploads"), "job" + result);
                                System.IO.Directory.CreateDirectory(newPath);
                                System.Diagnostics.Debug.WriteLine(newPath);

                                folderCreated = true;
                            }

                            if (file.ContentLength > 0)
                            {
                                var fileName = Path.GetFileName(file.FileName);
                                DateTime thisDay = DateTime.Now;
                                string extension = Path.GetExtension(file.FileName);
                                string schemeName = "";

                                if (extension == ".xml")
                                {
                                    using (Entities ctxData = new Entities())
                                    {
                                        var query = (from p in ctxData.G3E_JOB
                                                     where p.G3E_IDENTIFIER == result
                                                     select p).Single();

                                        schemeName = query.SCHEME_NAME;
                                    }

                                    var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + result + "/" + schemeName + thisDay.ToString("MMdd") + "_" + thisDay.ToString("HH") + "" + thisDay.ToString("mm") + extension));
                                    file.SaveAs(path);
                                }
                                else
                                {
                                    var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + result), fileName);
                                    file.SaveAs(path);
                                }
                            }
                        }
                    }
                }
            }



            // Create job isp
            if (job_types == "ISP")
            {
                selected = true;

                WebService._base.Job newjob = new WebService._base.Job();
                newjob.G3E_DESCRIPTION = model.Description;
                newjob.G3E_IDENTIFIER = "0"; // Stored procedure handle this.
                newjob.WebViewName = "NEPS"; //-----------------------------------------------------------------------------------------
                newjob.G3E_STATE = "PROPOSED";  //model.JobState;
                newjob.G3E_STATUS = "Posted";//
                newjob.EXC_ABB = model.EXC_ABB.Trim();
                newjob.Scheme_Type = model.SchemeType.Trim();
                newjob.G3E_DESCRIPTION_2 = model.Description_2;
                if (model.PlanEndDate < model.PlanStartDate)
                {
                    ModelState.AddModelError("", "Invalid Date Range");
                }
                else
                {
                    newjob.G3E_PlanStartDate = model.PlanStartDate;
                    newjob.G3E_PlanEndDate = model.PlanEndDate;
                    result = myWebService.AddJobISP(newjob, User.Identity.Name);
                }

                //result = myWebService.AddJobISP(newjob, User.Identity.Name);

                string ispScheme = "";
                string ispDesc = "";
                string ispOwner = "";

                if (result == "fail")
                {
                    success = false;
                }
                else
                {
                    success = true;

                    using (Entities ctxData = new Entities())
                    {
                        var query = from p in ctxData.WV_ISP_JOB
                                    where p.G3E_IDENTIFIER == result
                                    select new { p.SCHEME_NAME, p.G3E_DESCRIPTION, p.G3E_OWNER, p.JOB_STATE };


                        foreach (var a in query)
                        {
                            ispScheme = a.SCHEME_NAME;
                            ispDesc = a.G3E_DESCRIPTION;
                            ispOwner = a.G3E_OWNER;
                        }

                    }

                    // call ISP web service (using restful)
                    // Test NRM Web service
                    try
                    {
                        System.Diagnostics.Debug.WriteLine(ispScheme);
                        NrmServiceInterfaceClient testWS = new NrmServiceInterfaceClient();
                        testWS.CreateProject(ispScheme, ispDesc, ispScheme, ispOwner);
                    }
                    catch (Exception ex)
                    {
                        System.Diagnostics.Debug.WriteLine(ex.ToString());
                    }

                    // Handling Files.                   
                    bool folderCreated = false;
                    foreach (var file in files)
                    {
                        if (file != null)
                        {
                            if (!folderCreated)
                            {
                                //create job directory
                                string newPath = System.IO.Path.Combine(Server.MapPath("~/App_Data/uploads"), "job" + result);
                                System.IO.Directory.CreateDirectory(newPath);
                                System.Diagnostics.Debug.WriteLine(newPath);

                                folderCreated = true;
                            }

                            if (file.ContentLength > 0)
                            {
                                var fileName = Path.GetFileName(file.FileName);
                                DateTime thisDay = DateTime.Now;
                                string extension = Path.GetExtension(file.FileName);
                                string schemeName = "";

                                if (extension == ".xml")
                                {
                                    using (Entities ctxData = new Entities())
                                    {
                                        var query = (from p in ctxData.WV_ISP_JOB
                                                     where p.G3E_IDENTIFIER == result
                                                     select p).Single();

                                        schemeName = query.SCHEME_NAME;
                                    }

                                    var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + result + "/" + schemeName + thisDay.ToString("MMdd") + "_" + thisDay.ToString("HH") + "" + thisDay.ToString("mm") + extension));
                                    file.SaveAs(path);
                                }
                                else
                                {
                                    var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + result), fileName);
                                    file.SaveAs(path);
                                }
                                //var path = Path.Combine(Server.MapPath("~/App_Data/uploads"), fileName);
                                //var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + result), fileName);
                                //file.SaveAs(path);
                            }
                        }
                    }
                }
            }

            if (ModelState.IsValid && selected)
            {
                if (success == true)
                    //return RedirectToAction("NewSave?res=" + result);
                    return RedirectToAction("NewSave", new { res = result });
                else
                    return RedirectToAction("NewSaveFail"); // store to db failed.
            }

            List<SelectListItem> list = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.REF_FEATURE_STATE
                            select new { Text = p.FEATURE_STATE, Value = p.FEATURE_STATE };

                foreach (var a in query)
                {
                    list.Add(new SelectListItem() { Text = a.Text, Value = a.Value.ToString() });
                }

                ViewBag.jobstate = list;
            }

            List<SelectListItem> list2 = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.REF_JOB_TYPES
                            orderby p.JOB_TYPE ascending
                            select new { Text = p.JOB_TYPE, Value = p.JOB_TYPE };

                foreach (var a in query)
                {
                    list2.Add(new SelectListItem() { Text = a.Text, Value = a.Value.ToString() });
                }

                ViewBag.schemetype = list2;
            }

            List<SelectListItem> list3 = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.WV_EXC_MAST
                            orderby p.EXC_NAME ascending
                            //where p.PTT_ID 
                            select new { Text = p.EXC_NAME, Value = p.EXC_ABB };

                foreach (var a in query)
                {
                    list3.Add(new SelectListItem() { Text = a.Text, Value = a.Value.ToString() });
                }

                ViewBag.excabb = list3;
            }

            return View(model);
        }

        [HttpPost]
        public ActionResult NewJobRNO(NewJobModel model, IEnumerable<HttpPostedFileBase> files)
        {
            bool success = true;
            string result = "";
            string schemeName = "";
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            bool selected = false;

            // create job in RNO
            selected = true;
            WebService._base.Job newjob = new WebService._base.Job();
            newjob.G3E_DESCRIPTION = model.Description;
            newjob.G3E_IDENTIFIER = "0"; // Stored procedure handle this.
            newjob.WebViewName = "NEPS"; //-----------------------------------------------------------------------------------------
            newjob.G3E_STATE = "PENDING";  //model.JobState;
            newjob.G3E_STATUS = "PENDING";//
            if (model.EXC_ABB == "M*" || model.EXC_ABB == "***")
            {
                newjob.EXC_ABB = model.EXC_ABB.Trim();
            }
            else
            {
                newjob.EXC_ABB = model.EXC_ABB;
            }
            newjob.G3E_WORK_ORDER_ID = model.JobState.Trim();
            newjob.Scheme_Type = model.SchemeType.Trim();


            result = myWebService.AddJobRNO(newjob, User.Identity.Name);

            DateTime thisDay = DateTime.Now;
            string resultRedmark = "";
            //string emailList = "";
            if (result == "fail")
                success = false;
            else
            {
                success = true;

                // Handling Files.                   
                bool folderCreated = false;
                foreach (var file in files)
                {
                    if (file != null)
                    {
                        if (!folderCreated)
                        {
                            //create job directory
                            string newPath = System.IO.Path.Combine(Server.MapPath("~/App_Data/uploads"), "job" + result);
                            System.IO.Directory.CreateDirectory(newPath);
                            System.Diagnostics.Debug.WriteLine(newPath);

                            folderCreated = true;
                        }

                        if (file.ContentLength > 0)
                        {
                            var fileName = Path.GetFileName(file.FileName);

                            string extension = Path.GetExtension(file.FileName);

                            if (extension == ".xml")
                            {
                                string EmailListStr = "";
                                using (Entities ctxData = new Entities())
                                {
                                    var queryJOB = (from p in ctxData.WV_NONNETWORK_JOB
                                                    where p.G3E_IDENTIFIER == result
                                                    select p).Single();

                                    schemeName = queryJOB.SCHEME_NAME;

                                    var queryUsr = (from up in ctxData.WV_USER
                                                    where up.USERNAME == User.Identity.Name
                                                    select up).Single();

                                    var query = (from up in ctxData.WV_USER
                                                 where up.GROUPID == "16" && up.PTT_STATE.Trim() == queryUsr.PTT_STATE.Trim()
                                                 select up);

                                    int i = 0;
                                    foreach (var emailAND in query)
                                    {
                                        if (i++ > 0)
                                            EmailListStr += ",";
                                            EmailListStr += emailAND.EMAIL;
                                    }
                                    System.Diagnostics.Debug.WriteLine(EmailListStr);
                                    try
                                    {
                                        MailMessage msg = new MailMessage();
                                        msg.IsBodyHtml = true;
                                        msg.From = new MailAddress("neps@tm.com.my", "NEPS");
                                        msg.To.Add(EmailListStr);
                                        msg.Subject = "New Redmark File for Scheme " + schemeName;
                                        msg.Body = "<h1>FILES DETAILS</h1>SCHEME NAME	: " + schemeName + "<br/><br/>DESCRIPTION : " + newjob.G3E_DESCRIPTION + " <br/><br/>REDMARK FILE NAME: " + schemeName + "-" + thisDay.ToString("HH") + "" + thisDay.ToString("mm") + ".xml ";
                                        msg.Body += "<br/><br/> <h1>RNO DETAILS</h1> <br>";
                                        msg.Body += "RNO ID : " + User.Identity.Name + "<br/><br/>RNO EMAIL	: " + queryUsr.EMAIL + "<br/><br/>RNO PHONE NUMBER: " + queryUsr.NO_TEL + "<br/><br/>Please log in to <a href='http://10.41.101.168/'>NEPS WEBVIEW  </a>to download the file.";
                                        msg.IsBodyHtml = true;
                                        SmtpClient emailClient = new SmtpClient("smtp.tm.com.my");
                                        emailClient.UseDefaultCredentials = true;
                                        emailClient.Port = 25;
                                        emailClient.EnableSsl = false;
                                        //emailClient.UseDefaultCredentials = false;
                                        emailClient.Send(msg);

                                        System.Diagnostics.Debug.WriteLine("OK :" + EmailListStr);
                                        resultRedmark = "ok";
                                    }
                                    catch (Exception ex)
                                    {
                                        System.Diagnostics.Debug.WriteLine(ex.ToString());
                                    }
                                }
                                schemeName = schemeName.Replace("/", "");
                                schemeName = schemeName.Replace("*", "");
                                var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + result + "/" + schemeName + "-" + thisDay.ToString("HH") + "" + thisDay.ToString("mm") + extension));
                                file.SaveAs(path);
                            }
                            else
                            {
                                var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + result), fileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                }
            }

            if (ModelState.IsValid && selected)
            {
                if (success == true)
                    //return RedirectToAction("NewSave?res=" + result);
                    return RedirectToAction("NewSave", new { res = result });
                else
                    return RedirectToAction("NewSaveFail"); // store to db failed.
            }

            return View(model);
        }

        public ActionResult Test()
        {
            Tools tool = new Tools();

            string a = tool.ExecuteStr("Data Source =NEPSTRN; User Id =neps; Password =nepstrn; ", "SELECT * FROM G3E_JOB");

            ViewBag.num = a;

            return View();
        }

        [HttpPost]
        public ActionResult New(JobModel model)
        {
            // move to web service

            using (Entities ctxData = new Entities())
            {
                Tools tool = new Tools();
                tool.ExecuteSql(ctxData, "INSERT INTO WV_SCHEME_COUNTER (YEAR, COUNTER) VALUES (2012, 0) ");
            }
            return RedirectToAction("NewSave");
        }

        public ActionResult NewSave(string res)
        {
            ViewBag.jobId = res;

            return View();
        }

        [HttpPost]
        public ActionResult Edit(JobModel model)
        {
            using (Entities ctxData = new Entities())
            {
                ctxData.SaveChanges();
            }

            return RedirectToAction("List");
        }

        //[Authorize]
        public ActionResult Notification()
        {
            /*
            WebView.WebService._base myWebService;
            WebView.WebService._base.BookShop shop;
            WebView.WebService._base.Book[] books;

            myWebService = new WebService._base();
            shop = myWebService.GetBookShop();
            books = shop.booklist;

            foreach (WebView.WebService._base.Book a in books)
            {
                System.Diagnostics.Debug.WriteLine("Book name: " + a.name);
                System.Diagnostics.Debug.WriteLine("Author: " + a.author);
            }

            myWebService.GetOSPJob(5, 5, null);

            // to test sent
            WebService._base.Book book = new WebService._base.Book();
            book.author = "Halim";
            book.name = "Business";
            myWebService.AddBook(book);
            */

            /*
            using (Entities ctxData = new Entities())
            {
                var query = (from d in ctxData.G3E_JOB
                             orderby d.G3E_ID
                             select new { d.G3E_IDENTIFIER, d.G3E_ID }).Skip(3).Take(5);
             * /

                /*
                var row =
                    query
                    .Select((obj, Index) => new { obj.G3E_IDENTIFIER, obj.G3E_ID, Index = Index });
                */
            /*
                foreach (var a in query)
                {
                    System.Diagnostics.Debug.WriteLine(a.G3E_ID + " : " + a.G3E_IDENTIFIER);
                }
            }

            string sqlcmd = "select * from  (select xyz.*, rownum rnum from ";
            sqlcmd += "(SELECT X.G3E_IDENTIFIER, X.WORK_ORDER_ID, X.G3E_ID FROM G3E_Job X ORDER bY X.G3E_IDENTIFIER) ";
            sqlcmd += "xyz where rownum <=10) where rnum >= 5";
            Execute("Data Source =nova; User Id =NEPS; Password =NEPS; ", sqlcmd);
            */

            return View();
        }

        // Load Job details
        [HttpPost]
        public ActionResult GetDetails(string id)
        {
            System.Diagnostics.Debug.WriteLine(id);
            System.Diagnostics.Debug.WriteLine("test!!");
            Tools tool = new Tools();
            string path = Server.MapPath("~/App_Data/uploads");
            string[] fileList = tool.GetFileList(path + "/job" + id);
            string fileListStr = "";

            if (fileList.Count() > 0)
            {
                for (int i = 0; i < fileList.Count(); i++)
                {
                    fileListStr += fileList[i] + "|";
                }
            }

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            string ptt;
            string grpId;
            string hndover;
            int outputHandover = 0;
            int outputHandover2 = 0;
            string checkStatusJob;

            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_USER
                             where p.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || p.USERNAME.ToLower() == User.Identity.Name.ToLower()
                             select p).Single();
                ptt = query.PTT_STATE;
                grpId = query.GROUPID;

                var query2 = (from p in ctxData.G3E_JOB
                             where p.G3E_IDENTIFIER == id
                             select p).Single(); // check status
                checkStatusJob = query2.JOB_STATE;
            }

            //string checkStatus = "Feature";
            //if (checkStatusJob == "COMPLETED" || checkStatusJob == "COMMISSIONED") // make loading on certain job only
            //{
                using (EntitiesNetworkElement ctxHandover = new EntitiesNetworkElement())
                {
                    var queryHandover = (from a in ctxHandover.BI_PROCESS
                                         where a.NEPS_JOB_ID.Trim() == id.Trim() && a.STATUS == "SUCCESS"
                                         select a).Count();


                    var queryHandover2 = (from a in ctxHandover.BI_PROCESS
                                          where a.NEPS_JOB_ID.Trim() == id.Trim()
                                          select a).Count();

                    outputHandover = queryHandover; // update status by BI_PROSESS
                    outputHandover2 = queryHandover2;
                    if (outputHandover2 == 0)// if BI_PROCESS = 0 check BI_PROC_GRN_ISP
                    {
                        var queryHandoverGRNs = (from a in ctxHandover.BI_PROC_GRN_ISP
                                                 where a.NEPS_JOB_ID.Trim() == id.Trim() && a.STATUS == "SUCCESS"
                                                 select a).Count(); //check status

                        outputHandover = queryHandoverGRNs; // update status by GRANITE

                        var queryHandoverGRN = (from a in ctxHandover.BI_PROC_GRN_ISP
                                                where a.NEPS_JOB_ID.Trim() == id.Trim()
                                                select a).Count();
                        outputHandover2 = queryHandoverGRN;

                        if (outputHandover2 == 0) // if BI_PROC_GRN_ISP = 0 check BI_PROC_GRN_OSP
                        {
                            var queryHandoverGRN1s = (from a in ctxHandover.BI_PROC_GRN_OSP
                                                      where a.NEPS_JOB_ID.Trim() == id.Trim() && a.STATUS == "SUCCESS"
                                                      select a).Count(); //check status

                            outputHandover = queryHandoverGRN1s; // update status by GRANITE

                            var queryHandoverGRN1 = (from a in ctxHandover.BI_PROC_GRN_OSP
                                                     where a.NEPS_JOB_ID.Trim() == id.Trim()
                                                     select a).Count();

                            outputHandover2 = queryHandoverGRN1;
                        }
                    }
                }
            //}
            System.Diagnostics.Debug.WriteLine("TEST HANDOVER" + outputHandover2);

            string res = myWebService.GetOwnerList(ptt, grpId);
            
            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.G3E_JOB
                             where p.G3E_IDENTIFIER == id
                             select p).Single();

                var queryUsr = (from p in ctxData.WV_USER
                                where p.USERNAME.ToUpper() == query.G3E_OWNER.ToUpper() || p.USERNAME.ToLower() == query.G3E_OWNER.ToLower()
                                select p).Single();
                hndover = queryUsr.HANDOVER;

                //var record = ctxData.GC_NETELEM.Where(q => q.JOB_ID == id);
                //var countFeat = (from p in ctxData.GC_NETELEM
                //                 where p.JOB_ID.Trim() == id.Trim()
                //                 orderby p.JOB_ID
                //                 select new { p.JOB_ID });
                int checkfeature = 1;
                //System.Diagnostics.Debug.WriteLine("GC_NETELEM : " + record);
                //if (record.Count() > 0)
                //{
                //    var getfeature = (from p in ctxData.GC_NETELEM
                //                      where p.JOB_ID == id && (p.FEATURE_STATE != "PAD" && p.FEATURE_STATE != "MOD" && p.FEATURE_STATE != "PDR" && p.FEATURE_STATE != "PPF")
                //                      select p);
                //    checkfeature = getfeature.Count();
                //}
                string dts = Convert.ToDateTime(query.PLAN_START_DATE).ToString("dd-MMMM-yyyy");
                string dtsEnd = Convert.ToDateTime(query.PLAN_END_DATE).ToString("dd-MMMM-yyyy");

                if (query.JOB_STATE != "COMMISSIONED" && outputHandover >= 1)
                { 
                    myWebService.AutoApproval(id); 
                }
                return Json(new
                {
                    Success = true,
                    jobid = id,
                    record = res,
                    name = query.WEBVIEW_NAME,
                    description = query.G3E_DESCRIPTION,
                    description2 = query.G3E_DESCRIPTION_2,
                    jobstate = query.JOB_STATE,
                    jobstatus = query.G3E_STATUS,
                    project_no = query.PROJECT_NO,
                    scheme_name = query.SCHEME_NAME,
                    excabb = query.EXC_ABB,
                    user = query.G3E_OWNER,
                    handover = hndover,
                    userRole = queryUsr.USER_ROLES,
                    scheme_type = query.SCHEME_TYPE,
                    outputHandover = outputHandover2,
                    grpId = grpId,
                    checkfeature = checkfeature,
                    StartDate = dts,
                    EndDate = dtsEnd,
                    files_list = new
                    {
                        files = fileListStr
                    }
                }, JsonRequestBehavior.AllowGet); //
            }
        }

        [HttpPost]
        public ActionResult ISPGetDetails(string id)
        {
            Tools tool = new Tools();
            string path = Server.MapPath("~/App_Data/uploads");
            string[] fileList = tool.GetFileList(path + "/job" + id);
            string fileListStr = "";
            int outputHandover = 0;
            int outputHandover2 = 0;

            if (fileList.Count() > 0)
            {
                for (int i = 0; i < fileList.Count(); i++)
                {
                    fileListStr += fileList[i] + "|";
                }
            }

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            string ptt;
            string grpId;
            string hndover;
            //string ProjectNRMID;
            string exc_abb;
            string checkStatusJob;
            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_USER
                             where p.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || p.USERNAME.ToLower() == User.Identity.Name.ToLower()
                             select p).Single();
                ptt = query.PTT_STATE;
                grpId = query.GROUPID;

                var queryNRM = (from p in ctxData.WV_ISP_JOB
                                where p.G3E_IDENTIFIER == id
                                select p).Single();
                exc_abb = queryNRM.EXC_ABB;

                checkStatusJob = queryNRM.JOB_STATE;
            }
            //if (checkStatusJob == "COMPLETED" || checkStatusJob == "COMMISSIONED") // make loading on certain job only
            //{
                using (EntitiesNetworkElement ctxHandover = new EntitiesNetworkElement())
                {
                    var queryHandover = (from a in ctxHandover.BI_PROCESS_ISP
                                         where a.NEPS_JOB_ID.Trim() == id.Trim() && a.STATUS == "SUCCESS"
                                         select a).Count();

                    var queryHandover2 = (from a in ctxHandover.BI_PROCESS_ISP
                                          where a.NEPS_JOB_ID.Trim() == id.Trim()
                                          select a).Count();

                    outputHandover = queryHandover;
                    outputHandover2 = queryHandover2;
                    if (outputHandover2 == 0) // kalau process_isp 0, teruskan dengan grn_isp
                    {
                        var queryHandoverGRNs = (from a in ctxHandover.BI_PROC_GRN_ISP
                                                 where a.NEPS_JOB_ID.Trim() == id.Trim() && a.STATUS == "SUCCESS"
                                                 select a).Count(); //check status

                        outputHandover = queryHandoverGRNs; // update status by GRANITE

                        var queryHandoverGRN = (from a in ctxHandover.BI_PROC_GRN_ISP
                                                where a.NEPS_JOB_ID.Trim() == id.Trim()
                                                select a).Count();
                        outputHandover2 = queryHandoverGRN;

                        if (outputHandover2 == 0) // if BI_PROC_GRN_ISP = 0 check BI_PROC_GRN_OSP
                        {
                            var queryHandoverGRN1s = (from a in ctxHandover.BI_PROC_GRN_OSP
                                                     where a.NEPS_JOB_ID.Trim() == id.Trim() && a.STATUS == "SUCCESS"
                                                     select a).Count(); //check status

                            outputHandover = queryHandoverGRN1s; // update status by GRANITE

                            var queryHandoverGRN1 = (from a in ctxHandover.BI_PROC_GRN_OSP
                                                     where a.NEPS_JOB_ID.Trim() == id.Trim()
                                                     select a).Count();

                            outputHandover2 = queryHandoverGRN1;
                        }
                    }
                }
            //}
            System.Diagnostics.Debug.WriteLine("TEST" + outputHandover);

            string res = myWebService.GetOwnerList(ptt, grpId);
            

            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_ISP_JOB
                             where p.G3E_IDENTIFIER == id
                             select p).Single();

                var queryUsr = (from p in ctxData.WV_USER
                                where p.USERNAME == query.G3E_OWNER
                                select p).Single();
                hndover = queryUsr.HANDOVER;

                if (query.JOB_STATE != "COMMISSIONED" && outputHandover >= 1)
                {
                    myWebService.ISPAutoApproval(id);
                }

                string dts = Convert.ToDateTime(query.PLAN_START_DATE).ToString("dd-MMMM-yyyy");
                string dtsEnd = Convert.ToDateTime(query.PLAN_END_DATE).ToString("dd-MMMM-yyyy");

                return Json(new
                {
                    Success = true,
                    jobid = id,
                    record = res,
                    name = query.WEBVIEW_NAME,
                    description = query.G3E_DESCRIPTION,
                    description2 = query.G3E_DESCRIPTION_2,
                    jobstate = query.JOB_STATE,
                    jobstatus = query.G3E_STATUS,
                    project_no = query.PROJECT_NO,
                    scheme_name = query.SCHEME_NAME,
                    excabb = query.EXC_ABB,
                    user = query.G3E_OWNER,
                    handover = hndover,
                    userRole = queryUsr.USER_ROLES,
                    scheme_type = query.SCHEME_TYPE,
                    outputHandover = outputHandover2,
                    startDate = dts,
                    endDate = dtsEnd,
                    grpId = grpId,
                    files_list = new
                    {
                        files = fileListStr
                    }
                }, JsonRequestBehavior.AllowGet); //
            }

        }

        [HttpPost]
        public ActionResult GetDetailsAPP(string id)
        {
            System.Diagnostics.Debug.WriteLine(id);

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            string ptt;
            string grpId;
            string hndover;
            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_USER
                             where p.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || p.USERNAME.ToLower() == User.Identity.Name.ToLower()
                             select p).Single();
                ptt = query.PTT_STATE;
                grpId = query.GROUPID;
            }

            System.Diagnostics.Debug.WriteLine("PTT :" + ptt + "  GRPID : " + grpId);
            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_USER_APPROVE
                             where p.JOB_ID == id && (p.APPROVAL_USER.ToUpper() == User.Identity.Name.ToUpper() || p.APPROVAL_USER.ToLower() == User.Identity.Name.ToLower())
                             select p).Single();

                return Json(new
                {
                    Success = true,
                    jobid = id,
                    description = query.REMARKS,
                    jobstate = query.STATUS,
                    jobstatus = query.GLOBAL_STATUS,
                    user = query.APPROVAL_USER
                }, JsonRequestBehavior.AllowGet); //
            }
        }

        [HttpPost]
        public ActionResult GetDetails_G3E_JOB(string id)
        {           
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            string schemeName = "";
            string userdet;
            string excabb = "";

            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_USER
                             where p.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || p.USERNAME.ToLower() == User.Identity.Name.ToLower()
                             select p).Single();
                userdet = query.USERNAME;

                //var queryNetelem = from p in ctxData.GC_NETELEM
                //               where p.SCHEME_NAME == id
                //               select new { p.EXC_ABB };

                //foreach (var a in queryNetelem.Distinct())
                //{
                //    excabb = a.EXC_ABB;
                //}
                string[] aa = id.Split('-');
                string aaa = aa[0];
                var queryJob = from p in ctxData.G3E_JOB
                               where p.G3E_OWNER == userdet && p.WEBVIEW == 1 && p.SCHEME_NAME.Contains(aaa)
                               orderby p.G3E_IDENTIFIER
                                select new { p.G3E_IDENTIFIER };

                foreach (var a in queryJob)
                {
                    schemeName = schemeName + a.G3E_IDENTIFIER + ":" + a.G3E_IDENTIFIER + "|";
                }
                ViewBag.jobid = id; 
                return Json(new
                {
                    Success = true,
                    jobid = id,
                    schemeName = schemeName
                }, JsonRequestBehavior.AllowGet); //
            }
        }

        public class Crypto
        {
            private static byte[] _salt = Encoding.ASCII.GetBytes("o6806642kbM7c5");
            private const string sharedSecret = "NEPS";

            /// <summary>
            /// Encrypt the given string using AES.  The string can be decrypted using 
            /// DecryptStringAES().  The sharedSecret parameters must match.
            /// </summary>
            /// <param name="plainText">The text to encrypt.</param>
            /// <param name="sharedSecret">A password used to generate a key for encryption.</param>
            public static string EncryptStringAES(string plainText)
            {
                if (string.IsNullOrEmpty(plainText))
                    return "";

                string outStr = null;                       // Encrypted string to return
                RijndaelManaged aesAlg = null;              // RijndaelManaged object used to encrypt the data.

                try
                {
                    // generate the key from the shared secret and the salt
                    Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret, _salt);

                    // Create a RijndaelManaged object
                    // with the specified key and IV.
                    aesAlg = new RijndaelManaged();
                    aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);
                    aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);

                    // Create a decrytor to perform the stream transform.
                    ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                    // Create the streams used for encryption.
                    using (MemoryStream msEncrypt = new MemoryStream())
                    {
                        using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                        {
                            using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                            {

                                //Write all data to the stream.
                                swEncrypt.Write(plainText);
                            }
                        }
                        outStr = Convert.ToBase64String(msEncrypt.ToArray());
                    }
                }
                finally
                {
                    // Clear the RijndaelManaged object.
                    if (aesAlg != null)
                        aesAlg.Clear();
                }

                // Return the encrypted bytes from the memory stream.
                return outStr;
            }

            /// <summary>
            /// Decrypt the given string.  Assumes the string was encrypted using 
            /// EncryptStringAES(), using an identical sharedSecret.
            /// </summary>
            /// <param name="cipherText">The text to decrypt.</param>
            /// <param name="sharedSecret">A password used to generate a key for decryption.</param>
            public static string DecryptStringAES(string cipherText)
            {
                if (string.IsNullOrEmpty(cipherText))
                    return "";

                // Declare the RijndaelManaged object
                // used to decrypt the data.
                RijndaelManaged aesAlg = null;

                // Declare the string used to hold
                // the decrypted text.
                string plaintext = null;

                try
                {
                    // generate the key from the shared secret and the salt
                    Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret, _salt);

                    // Create a RijndaelManaged object
                    // with the specified key and IV.
                    aesAlg = new RijndaelManaged();
                    aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);
                    aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);

                    // Create a decrytor to perform the stream transform.
                    ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                    // Create the streams used for decryption.                
                    byte[] bytes = Convert.FromBase64String(cipherText);
                    using (MemoryStream msDecrypt = new MemoryStream(bytes))
                    {
                        using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                        {
                            using (StreamReader srDecrypt = new StreamReader(csDecrypt))

                                // Read the decrypted bytes from the decrypting stream
                                // and place them in a string.
                                plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }
                finally
                {
                    // Clear the RijndaelManaged object.
                    if (aesAlg != null)
                        aesAlg.Clear();
                }

                return plaintext;
            }
        }

        class Encryptor
        {
            private static byte[] CreateKeyBytes(string passPhrase)
            {
                char[] keyChars = passPhrase.ToCharArray();
                byte[] keyByte = new byte[16];
                for (int i = 0; i < 16; i++)
                {
                    if (keyChars.Length > i)
                        keyByte[i] = (byte)keyChars[i];
                }

                if (keyChars.Length < 16)
                {
                    for (int i = keyChars.Length; i < 16; i++)
                        keyByte[i] = 0x00;
                }

                return keyByte;

            }

            public static string Encrypt(Encoding encoding, string strtoencrypt, string key, string iv, CipherMode mode, PaddingMode padding, int blocksize)
            {

                var mstream = new MemoryStream();
                using (var aes = new AesManaged())
                {
                    var keybytes = CreateKeyBytes(key);
                    aes.BlockSize = blocksize;
                    aes.KeySize = keybytes.Length * 8;
                    aes.Key = keybytes;

                    aes.IV = CreateKeyBytes(iv);
                    aes.Mode = mode;
                    aes.Padding = padding;


                    using (var cstream = new CryptoStream(mstream, aes.CreateEncryptor(aes.Key, aes.IV), CryptoStreamMode.Write))
                    {
                        var bytesToEncrypt = encoding.GetBytes(strtoencrypt);
                        cstream.Write(bytesToEncrypt, 0, bytesToEncrypt.Length);
                        cstream.FlushFinalBlock();
                    }

                }

                var encrypted = mstream.ToArray();
                return Convert.ToBase64String(encrypted);
            }


            public static string GetURL(string passPhrase, string hostname, string port, string username, List<string> roles)
            {

                string output = "";


                string rolesCommaSeparated = ListToCommaSeparated(roles);
                var key = passPhrase;
                var iv = "";

                string encryptedUsername = Encrypt(Encoding.ASCII, username, key, iv, CipherMode.CBC, PaddingMode.PKCS7, 128);
                string encryptedRoles = Encrypt(Encoding.ASCII, rolesCommaSeparated, key, iv, CipherMode.CBC, PaddingMode.PKCS7, 128);


                //output = string.Format("http://{0}:{1}/nrm?user={2}&roles={3}", hostname, port,
                //    HttpUtility.UrlEncode(encryptedUsername), HttpUtility.UrlEncode(encryptedRoles));

                output = string.Format("?user={2}&roles={3}", hostname, port,
                    HttpUtility.UrlEncode(encryptedUsername), HttpUtility.UrlEncode(encryptedRoles));

                return output;
            }

            private static string ListToCommaSeparated(List<string> roles)
            {
                string output = "";

                int i = 0;
                foreach (string role in roles)
                {
                    if (i++ > 0)
                        output += ",";
                    output += role;
                }
                return output;
            }




        }

        [HttpPost]
        public ActionResult ISPLaunchNRM(string id)
        {
            string exc_abb = "";
            string scheme_name = "";
            string desc_job = "";
            string ProjectNRMID = "";
            string role = "";
            string username = "";
            List<string> roles = new List<string>();
            Tools tool = new Tools();

            using (Entities ctxData = new Entities())
            {
                var queryNRM = (from p in ctxData.WV_ISP_JOB
                                where p.G3E_IDENTIFIER == id
                                select p).Single();
                exc_abb = queryNRM.EXC_ABB;
                scheme_name = queryNRM.SCHEME_NAME;
                desc_job = queryNRM.G3E_DESCRIPTION;

                var queryUser = (from p in ctxData.WV_USER
                                 where p.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || p.USERNAME.ToLower() == User.Identity.Name.ToLower()
                                 select p).Single();

                var queryUserRole = (from fx in ctxData.WV_GROUP
                                     join fxx in ctxData.WV_GRP_ROLE on fx.GRPNAME equals fxx.GRPNAME
                                     where fx.GRP_ID == queryUser.GROUPID
                                     select fxx).Single();

                role = queryUserRole.ROLENAME;

                username = queryUser.USERNAME;

            }
            using (Entities_NRM b = new Entities_NRM())
            {
                // check in NRM Project
                var queryCheckProject = (from p in b.PROJECTs
                                         where p.NAME.Trim() == scheme_name.Trim()
                                         select p).Count();
                System.Diagnostics.Debug.WriteLine("QUERY " + queryCheckProject);
                if (queryCheckProject == 0)
                {
                    try
                    {
                        // call ISP web service (add project in NRM)
                        NrmServiceInterfaceClient testWS = new NrmServiceInterfaceClient();
                        string NRM = testWS.CreateProject(scheme_name, desc_job, scheme_name, username);

                        System.Diagnostics.Debug.WriteLine("BETUL KE " + NRM);
                    }
                    catch (Exception ex)
                    {
                        System.Diagnostics.Debug.WriteLine(ex.ToString());
                    }
                }

                var queryCount = (from p in b.VFDITEMs
                                  where p.USERPARTIALNAME.Trim() == exc_abb.Trim() && p.DTYPE == "Plan"
                                  select p).Count();
                if (queryCount > 0)
                {
                    var query = (from p in b.VFDITEMs
                                 where p.USERPARTIALNAME.Trim() == exc_abb.Trim() && p.DTYPE == "Plan"
                                 select p).Single();
                    ProjectNRMID = query.ID.ToString();
                }
                else
                {
                    var query = (from p in b.VFDITEMs
                                 where p.USERDISPLAYNAME.Trim() == exc_abb.Trim() && p.DTYPE == "Plan"
                                 select p).Single();
                    ProjectNRMID = query.ID.ToString();
                    //ProjectNRMID = "Fail";
                }
            }
            //ProjectNRMID = "Fail";
            //List<string> roles = new List<string>();
            roles.Add(role);
            System.Diagnostics.Debug.WriteLine(ProjectNRMID);
            string passPhrase = "preAuthpassword";
            //string username = User.Identity.Name;
            string url = Encryptor.GetURL(passPhrase, "10.14.61.189", "8080", username, roles);

            System.Diagnostics.Debug.WriteLine("DATA LINK : "+ visionael);
            return Json(new
            {
                Success = true,
                ProjectNRMID = ProjectNRMID,
                url = url,
                visionael = visionael
            }, JsonRequestBehavior.AllowGet); //
        }

        //[HttpPost]
        public ActionResult ISP(string ispid, string username)
        {
            string role = "";
            List<string> roles = new List<string>();
            Tools tool = new Tools();

            using (Entities ctxData = new Entities())
            {
                var queryUser = (from p in ctxData.WV_USER
                                 where p.USERNAME.ToUpper() == username.ToUpper() || p.USERNAME.ToLower() == username.ToLower()
                                 select p).Single();

                var queryUserRole = (from fx in ctxData.WV_GROUP
                                     join fxx in ctxData.WV_GRP_ROLE on fx.GRPNAME equals fxx.GRPNAME
                                     where fx.GRP_ID == queryUser.GROUPID
                                     select fxx).Single();

                role = queryUserRole.GRPNAME + "," + queryUserRole.ROLENAME;
                username = queryUser.USERNAME;
            }

            roles.Add(role);

            string passPhrase = "preAuthpassword";
            string url = Encryptor.GetURL(passPhrase, "10.41.61.177", "8080", username, roles);

            return Redirect("http://10.41.61.177:8080/nrm/FacilitiesDesigner/vfd_item." + ispid + "/Graphic/ActionsTab" + url);
        }

        [HttpPost]
        public ActionResult OSPLaunchGTech(string id)
        {
            string usrPassword;
            string username = "";
            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_USER
                             where p.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || p.USERNAME.ToLower() == User.Identity.Name.ToLower()
                             select p).Single();
                usrPassword = query.PASSWORD;
                username = query.USERNAME;
            }

            // to fetch from directory/database for the current user
            string passwordClear = usrPassword; // user password
            // other parameters that need to be passed
            string config = "NEPS";
            string jobID = id;
            string FIDToZoom = ""; // g3e_fid = filter FNO AND Scheme Name
            string exc_abb = "";
            string schemeType = "";

            using (Entities ctxData = new Entities())
            {
                var queryJOB = (from p in ctxData.G3E_JOB
                                where p.G3E_IDENTIFIER == id
                                select p).Single();

                string scheme_name = queryJOB.SCHEME_NAME;
                exc_abb = queryJOB.EXC_ABB;
                schemeType = queryJOB.SCHEME_TYPE;
                System.Diagnostics.Debug.WriteLine(scheme_name);

                var queryCountNetelem = (from p in ctxData.GC_NETELEM
                                         where p.SCHEME_NAME == scheme_name
                                         select p).Count();
                if (queryCountNetelem > 0)
                {
                    var query = (from p in ctxData.GC_NETELEM
                                 where p.SCHEME_NAME == scheme_name
                                 select p).Single();

                    FIDToZoom = query.G3E_FID.ToString();
                }
                else
                {
                    var Countquery = (from p in ctxData.GC_NETELEM
                                      where p.EXC_ABB.Trim() == exc_abb.Trim() && p.G3E_FNO == 6000
                                      select p).Count();
                    if (Countquery != 1)
                    {
                        FIDToZoom = "1032536";
                    }
                    else
                    {
                        var query = (from p in ctxData.GC_NETELEM
                                     where p.EXC_ABB.Trim() == exc_abb.Trim() && p.G3E_FNO == 6000
                                     select p).Single();
                        FIDToZoom = query.G3E_FID.ToString();
                    }
                }
            }
            //FIDToZoom = "1032536";
            System.Diagnostics.Debug.WriteLine(username);
            //System.Diagnostics.Debug.WriteLine(passwordClear);
            System.Diagnostics.Debug.WriteLine("FID : " + FIDToZoom);


            // encrypt the password
            string password = Crypto.EncryptStringAES(passwordClear);
            //if (schemeType == "D/Side" || schemeType == "E/Side" || schemeType == "Fiber E/Side") // , 
            //{
            //    jobID = jobID.Replace("/", "%2F");
            //}

            return Json(new
            {
                Success = true,
                username = username,
                password = password,
                config = config,
                jobID = jobID,
                FIDToZoom = FIDToZoom
            }, JsonRequestBehavior.AllowGet); //
        }

        public ActionResult UpdateData(string jobIdVal, string txtDescription, string txtDescription2, string txtJobState, string txtEndDate, string txtStartDate)
        {
            System.Diagnostics.Debug.WriteLine("UPDATE!!");
            Tools tool = new Tools();
            bool success = true;
            bool successISP = true;
            //string sqlCmd = "";
            string JobType = "";
            string schemeName = "";
            string checkGems = "";
            string checkGemsISP = "";
            string jobProposed = "";
            string G3EJobType = "";

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            WebService._base.Job newjob = new WebService._base.Job();
            System.Diagnostics.Debug.WriteLine("UPDATE!! :" + txtJobState);
            newjob.G3E_DESCRIPTION = txtDescription;
            newjob.G3E_DESCRIPTION_2 = txtDescription2;
            newjob.G3E_STATE = txtJobState;

            using (Entities ctxData = new Entities())
            {
                var query = (from d in ctxData.G3E_JOB
                             where d.G3E_IDENTIFIER == jobIdVal
                             select d).Single();

                var queryCariISP = (from d in ctxData.WV_ISP_JOB
                                    where d.SCHEME_NAME == jobIdVal
                                    select d).Count();

                if (queryCariISP > 0)
                {
                    var query2 = (from d in ctxData.WV_ISP_JOB
                                  where d.SCHEME_NAME == jobIdVal
                                  select d).Single();

                    schemeName = query2.G3E_IDENTIFIER;
                    checkGemsISP = query2.GEMS_TABLE;
                }
                var queryJobType = (from d in ctxData.REF_JOB_TYPES
                                    where d.JOB_TYPE == query.JOB_TYPE
                                    select d).Single();
                JobType = queryJobType.ISPOSP;
                checkGems = query.GEMS_TABLE;
                jobProposed = query.JOB_STATE;
                G3EJobType = query.JOB_TYPE;
            }

            //HAIDAR TUTUP KEJAP
            //if (txtJobState == "UN_CONSTRUCT")
            //{
            //    using (Entities ctxData = new Entities())
            //    {
            //        if (jobProposed == "PROPOSED" && G3EJobType != "HSBB (Equip)") //tukar kejap
            //        {
            //            var record = ctxData.GC_NETELEM.Where(q => q.JOB_ID == jobIdVal);
            //            if (record.Count() != 0)
            //            {
            //                var getfeature = (from p in ctxData.GC_NETELEM
            //                                  where p.JOB_ID == jobIdVal && (p.FEATURE_STATE != "PAD" && p.FEATURE_STATE != "MOD" && p.FEATURE_STATE != "PDR" && p.FEATURE_STATE != "PPF")
            //                                  select p);

            //                if (getfeature.Count() == 0)
            //                {
            //                    if (JobType == "ISPOSP")
            //                    {
            //                        successISP = myWebService.UpdateJobISP(newjob, schemeName);
            //                    }

            //                    success = myWebService.UpdateJob(newjob, jobIdVal);
            //                }
            //                else
            //                {
            //                    success = false;
            //                }
            //            }
            //            else
            //            {
            //                success = false;
            //            }
            //        }
            //        else
            //        {
            //            if (JobType == "ISPOSP")
            //            {
            //                successISP = myWebService.UpdateJobISP(newjob, schemeName);
            //            }
            //            success = myWebService.UpdateJob(newjob, jobIdVal);
            //        }

            //    }
            //}
            //else
            //{
                if (JobType == "ISPOSP")
                {
                    successISP = myWebService.UpdateJobISP(newjob, schemeName ,txtStartDate ,txtEndDate);
                }
                success = myWebService.UpdateJob(newjob, jobIdVal);
            //}
            return Json(new
            {
                Success = success
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult UpdateDataISP(string jobIdVal, string txtDescription, string txtDescription2, string txtJobState, string txtEndDate, string txtStartDate)
        {
            System.Diagnostics.Debug.WriteLine("UPDATE!!");
            Tools tool = new Tools();
            bool success = true;
            bool successOSP = true;
            //string sqlCmd = "";
            string JobType = "";
            string schemeName = "";
            string checkGems = "";
            string checkGemsISP = "";
            string jobProposed = "";
            string G3EJobType = "";

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            WebService._base.Job newjob = new WebService._base.Job();
            System.Diagnostics.Debug.WriteLine("UPDATE!! :" + txtJobState);
            newjob.G3E_DESCRIPTION = txtDescription;
            newjob.G3E_DESCRIPTION_2 = txtDescription2;
            newjob.G3E_STATE = txtJobState;
            //dapatkan job type ISP
            using (Entities ctxData = new Entities())
            {
                var query = (from d in ctxData.WV_ISP_JOB
                             where d.G3E_IDENTIFIER == jobIdVal
                             select d).Single();

                var queryCariOSP = (from d in ctxData.G3E_JOB
                                    where d.G3E_IDENTIFIER == query.SCHEME_NAME
                                    select d).Count();

                if (queryCariOSP > 0)
                {
                    var query2 = (from d in ctxData.G3E_JOB
                                  where d.G3E_IDENTIFIER == query.SCHEME_NAME
                                  select d).Single();

                    schemeName = query2.G3E_IDENTIFIER;
                    checkGems = query2.GEMS_TABLE;
                }
                var queryJobType = (from d in ctxData.REF_JOB_TYPES
                                    where d.JOB_TYPE == query.JOB_TYPE
                                    select d).Single();
                JobType = queryJobType.ISPOSP;
                checkGemsISP = query.GEMS_TABLE;
                jobProposed = query.JOB_STATE;
                G3EJobType = query.JOB_TYPE;
            }

            //Haidar tutup kejap
            //if (txtJobState == "UN_CONSTRUCT")
            //{
            //    using (Entities ctxData = new Entities())
            //    {
            //        if (JobType == "ISPOSP")
            //        {
            //            if (jobProposed == "PROPOSED" && G3EJobType != "HSBB (Equip)") //tukar kejap
            //            {
            //                var record = ctxData.GC_NETELEM.Where(q => q.JOB_ID == jobIdVal);
            //                if (record.Count() != 0)
            //                {
            //                    var getfeature = (from p in ctxData.GC_NETELEM
            //                                      where p.JOB_ID == jobIdVal && (p.FEATURE_STATE != "PAD" && p.FEATURE_STATE != "MOD" && p.FEATURE_STATE != "PDR" && p.FEATURE_STATE != "PPF")
            //                                      select p);

            //                    if (getfeature.Count() == 0)
            //                    {
            //                        successOSP = myWebService.UpdateJob(newjob, schemeName);
            //                        success = myWebService.UpdateJobISP(newjob, jobIdVal);
            //                    }
            //                }
            //                else
            //                {
            //                    success = false;
            //                }
            //            }
            //            else
            //            {
            //                successOSP = myWebService.UpdateJob(newjob, schemeName);
            //                success = myWebService.UpdateJobISP(newjob, jobIdVal);
            //            }
            //        }
            //        else
            //        {
            //            success = myWebService.UpdateJobISP(newjob, jobIdVal);
            //        }
            //    }
            //}
            //else
            //{
                if (JobType == "ISPOSP")
                {
                    successOSP = myWebService.UpdateJob(newjob, schemeName);
                }
                success = myWebService.UpdateJobISP(newjob, jobIdVal, txtStartDate, txtEndDate);
            //}

            return Json(new
            {
                Success = success
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult UpdateDataApprove(string jobIdVal, string txtDescription)
        {
            System.Diagnostics.Debug.WriteLine("UPDATE!!");

            Tools tool = new Tools();
            bool success = true;
            bool successglobal = true;
            bool successg3e = true;
            string sqlCmd = "";
            string sqlCmdGlobal = "";
            string sqlCmdG3E = "";
            string sqlCmdWV = "";
            int count;
            int countApproved;
            string username = "";
            using (Entities ctxData = new Entities())
            {
                var queryUsr = (from c in ctxData.WV_USER
                                where c.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || c.USERNAME.ToLower() == User.Identity.Name.ToLower()
                                select c).Single();
                username = queryUsr.USERNAME;
            }

            sqlCmd = "UPDATE WV_USER_APPROVE SET REMARKS = '" + txtDescription + "', STATUS='APPROVED' WHERE JOB_ID ='" + jobIdVal + "' AND APPROVAL_USER='" + username + "'";
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }
            System.Diagnostics.Debug.WriteLine("bool " + success);

            using (Entities ctxData = new Entities())
            {
                count = (from c in ctxData.WV_USER_APPROVE
                         where c.JOB_ID == jobIdVal
                         select c).Count();

                countApproved = (from c in ctxData.WV_USER_APPROVE
                                 where c.JOB_ID == jobIdVal && c.STATUS == "APPROVED"
                                 select c).Count();
                if (count == countApproved)
                {
                    int countosp = (from c in ctxData.G3E_JOB
                                     where c.G3E_IDENTIFIER == jobIdVal
                                     select c).Count();

                    int countisp = (from c in ctxData.WV_ISP_JOB
                                    where c.G3E_IDENTIFIER == jobIdVal
                                    select c).Count();

                    if (countosp > 0)
                    {
                        sqlCmdGlobal = "UPDATE WV_USER_APPROVE SET GLOBAL_STATUS = 'COMPLETED' WHERE JOB_ID ='" + jobIdVal + "'";
                        sqlCmdG3E = "UPDATE G3E_JOB SET JOB_STATE = 'APPROVED' WHERE G3E_IDENTIFIER ='" + jobIdVal + "'";
                        System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
                    }
                    if (countisp > 0)
                    {
                        sqlCmdGlobal = "UPDATE WV_USER_APPROVE SET GLOBAL_STATUS = 'COMPLETED' WHERE JOB_ID ='" + jobIdVal + "'";
                        sqlCmdWV = "UPDATE WV_ISP_JOB SET JOB_STATE = 'APPROVED' WHERE G3E_IDENTIFIER ='" + jobIdVal + "'";
                        System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
                    }
                }
            }

            using (Entities ctxData = new Entities())
            {
                successglobal = tool.ExecuteSql(ctxData, sqlCmdGlobal);
                successg3e = tool.ExecuteSql(ctxData, sqlCmdG3E);
                tool.ExecuteSql(ctxData, sqlCmdWV);
            }

            return Json(new
            {
                Success = success
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult UpdateDataReject(string jobIdVal, string txtDescription)
        {
            System.Diagnostics.Debug.WriteLine("UPDATE!!");

            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            if (txtDescription != "")
            {

                sqlCmd = "UPDATE WV_USER_APPROVE SET REMARKS = '" + txtDescription + "', STATUS='REJECTED' WHERE JOB_ID ='" + jobIdVal + "'";
                string sqlCmd2 = "UPDATE G3E_JOB SET G3E_DESCRIPTION_2 = '" + txtDescription + "', JOB_STATE='REJECTED' WHERE G3E_IDENTIFIER ='" + jobIdVal + "'";
                string sqlCmd3 = "UPDATE WV_ISP_JOB SET G3E_DESCRIPTION_2 = '" + txtDescription + "', JOB_STATE='REJECTED' WHERE G3E_IDENTIFIER ='" + jobIdVal + "'";
                System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);

                using (Entities ctxData = new Entities())
                {
                    tool.ExecuteSql(ctxData, sqlCmd2);
                    tool.ExecuteSql(ctxData, sqlCmd3);
                    success = tool.ExecuteSql(ctxData, sqlCmd);

                }
            }
            else
            {
                success = false;
            }
            System.Diagnostics.Debug.WriteLine("bool " + success);

            return Json(new
            {
                Success = success
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ChangeOwner(string jobIdVal, string username)
        {
            System.Diagnostics.Debug.WriteLine("change owner!!");
            bool success = true;


            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            WebService._base.Job newjob = new WebService._base.Job();
            System.Diagnostics.Debug.WriteLine("UPDATE!! :" + jobIdVal);
            newjob.G3E_OWNER = username;
            success = myWebService.UpdateOwner(newjob, jobIdVal);


            return Json(new
            {
                Success = success
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult MigratedLNMS(string lmnsjob, string nepsjob)
        {
            bool success;

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            System.Diagnostics.Debug.WriteLine(lmnsjob + "-!!!!!-" + nepsjob);
            success = myWebService.migratedLmns(lmnsjob, nepsjob);
            System.Diagnostics.Debug.WriteLine("-ok-");
            return Json(new
            {
                Success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult DeleteData(string targetJob)
        {
            bool success;

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            using (Entities ctxData = new Entities())
            {
                var queryOSP = (from p in ctxData.G3E_JOB
                                where p.G3E_IDENTIFIER == targetJob
                                select p).Count();

                var queryISP = (from p in ctxData.WV_ISP_JOB
                                where p.SCHEME_NAME == targetJob
                                select p).Count();

                if (queryOSP > 0)
                {
                    success = myWebService.DeleteJob(targetJob);
                }
                if (queryISP > 0)
                {
                    success = myWebService.DeleteJobISP(targetJob);
                }
            }
            //success = myWebService.DeleteJob(targetJob);

            return Json(new
            {
                Success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult DeleteDataISP(string targetJob)
        {
            bool success;

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            using (Entities ctxData = new Entities())
            {
                var queryISP = (from p in ctxData.WV_ISP_JOB
                                where p.G3E_IDENTIFIER == targetJob
                                select p).Count();

                var queryDATAISP = (from p in ctxData.WV_ISP_JOB
                                    where p.G3E_IDENTIFIER == targetJob
                                    select p).Single();

                var queryOSP = (from p in ctxData.G3E_JOB
                                where p.G3E_IDENTIFIER == queryDATAISP.SCHEME_NAME
                                select p).Count();

                if (queryISP > 0)
                {
                    success = myWebService.DeleteJobISP(queryDATAISP.SCHEME_NAME);
                }
                if (queryOSP > 0)
                {
                    var queryDATAOSP = (from p in ctxData.G3E_JOB
                                        where p.G3E_IDENTIFIER == queryDATAISP.SCHEME_NAME
                                        select p).Single();
                    success = myWebService.DeleteJob(queryDATAOSP.G3E_IDENTIFIER);
                }
            }
            //success = myWebService.DeleteJobISP(targetJob);

            return Json(new
            {
                Success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult FindProjectNo(string projectNo, string exchange)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            DateTime MyDateTime1;
            DateTime MyDateTime2;
            string output = "";
            string output2 = "";
            if (exchange.Trim() == "BJL01" || exchange.Trim() == "BJL02" || exchange.Trim() == "BJL03" || exchange.Trim() == "BJL04" || exchange.Trim() == "BJL05" ||
                exchange.Trim() == "BJL06" || exchange.Trim() == "BJL07" || exchange.Trim() == "BJL08" || exchange.Trim() == "BJL09" || exchange.Trim() == "BJL10" ||
                exchange.Trim() == "BJL11" || exchange.Trim() == "BJL12" || exchange.Trim() == "BJL13" || exchange.Trim() == "BJL14" || exchange.Trim() == "BJL15" ||
                exchange.Trim() == "BJL16" || exchange.Trim() == "BJL17" || exchange.Trim() == "BJL18" || exchange.Trim() == "BJL19" || exchange.Trim() == "BJL20" ||
                exchange.Trim() == "BJL21" || exchange.Trim() == "BJL22" || exchange.Trim() == "BJL23" || exchange.Trim() == "BJL24" || exchange.Trim() == "BJL25" ||
                exchange.Trim() == "BJL26" || exchange.Trim() == "BJL27" || exchange.Trim() == "BJL28" || exchange.Trim() == "BJL29" || exchange.Trim() == "BJL30" ||
                exchange.Trim() == "BJL31")
            {
                exchange = "BJL";
            }
            using (Entities ctxData = new Entities())
            {
                System.Diagnostics.Debug.WriteLine("projectNo : " + projectNo);
                if (projectNo != "" && projectNo != null)
                {
                    var query = (from a in ctxData.WV_GEM_PROJNO
                                 //join fx in ctxData.G3E_JOB on a.WBS_NUM equals fx.WBS_NUM into test
                                 //from fx1 in test.DefaultIfEmpty()
                                 //join fxx in ctxData.WV_ISP_JOB on a.WBS_NUM equals fxx.WBS_NUM into test2
                                 //from fx2 in test2.DefaultIfEmpty()
                                 where //a.EXC_ABB.Trim() == exchange.Trim() && 
                                 //(fx1 == null && fx2 == null) 
                                 !ctxData.G3E_JOB.Any(r2 => a.WBS_NUM.Trim() == r2.WBS_NUM.Trim())
                                 && !ctxData.WV_ISP_JOB.Any(r2 => a.WBS_NUM.Trim() == r2.WBS_NUM.Trim())
                                 && (a.PROJECT_NO.Contains(projectNo.ToUpper()) || a.PROJECT_NO.Contains(projectNo.ToLower()) || a.PROJECT_NO.Contains(projectNo)) //&& a.EXC_ABB == exchange
                                 orderby a.PROJECT_NO, a.WBS_NUM
                                 select new
                                 {
                                     a.PROJECT_NO,
                                     a.WBS_NUM,
                                     a.START_DATE,
                                     a.END_DATE,
                                     a.PROJ_DESC,
                                     a.AMOUNT
                                 });

                    if (query.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in query)
                        {
                            counter++;
                            MyDateTime1 = new DateTime();
                            MyDateTime2 = new DateTime();

                            MyDateTime1 = DateTime.Parse(lp.START_DATE.ToString());
                            MyDateTime2 = DateTime.Parse(lp.END_DATE.ToString());

                            string carry = "";
                            output += lp.PROJECT_NO + "|" + lp.WBS_NUM + "|" + lp.PROJ_DESC + "|" + MyDateTime1.ToString("dd-MM-yyyy") +
                                "|" + MyDateTime2.ToString("dd-MM-yyyy") + "|" + lp.AMOUNT;

                            output += "!";
                            //System.Diagnostics.Debug.WriteLine(output);
                            output2 = "Cari2";
                        }
                    }
                    //}
                }
                else
                {
                    var query = (from a in ctxData.WV_GEM_PROJNO
                                 //join fx in ctxData.G3E_JOB on a.WBS_NUM equals fx.WBS_NUM into test
                                 //from fx1 in test.DefaultIfEmpty()
                                 //join fxx in ctxData.WV_ISP_JOB on a.WBS_NUM equals fxx.WBS_NUM into test2
                                 //from fx2 in test2.DefaultIfEmpty()
                                 where !ctxData.G3E_JOB.Any(r2 => a.WBS_NUM.Trim() == r2.WBS_NUM.Trim())
                                 && !ctxData.WV_ISP_JOB.Any(r2 => a.WBS_NUM.Trim() == r2.WBS_NUM.Trim())
                                 orderby a.PROJECT_NO, a.WBS_NUM
                                 select new
                                 {
                                     a.PROJECT_NO,
                                     a.WBS_NUM,
                                     a.START_DATE,
                                     a.END_DATE,
                                     a.PROJ_DESC,
                                     a.AMOUNT
                                 });

                    if (query.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in query)
                        {
                            counter++;
                            MyDateTime1 = new DateTime();
                            MyDateTime2 = new DateTime();

                            MyDateTime1 = DateTime.Parse(lp.START_DATE.ToString());
                            MyDateTime2 = DateTime.Parse(lp.END_DATE.ToString());

                            string carry = "";
                            output += lp.PROJECT_NO + "|" + lp.WBS_NUM + "|" + lp.PROJ_DESC + "|" + MyDateTime1.ToString("dd-MM-yyyy") +
                                "|" + MyDateTime2.ToString("dd-MM-yyyy") + "|" + lp.AMOUNT;

                            output += "!";
                            //System.Diagnostics.Debug.WriteLine(output);
                            output2 = "Cari2";
                        }
                    }
                    //}
                }
            }
            //string res = myWebService.GetProject(projectNo);

            return Json(new
            {
                record = output,
                jenisCarian = output2,
                user = User.Identity.Name
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult UserList(string userRole)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            System.Diagnostics.Debug.WriteLine("USERROLE : " + userRole);
            string res = myWebService.GetUserList(userRole, User.Identity.Name);

            return Json(new
            {
                record = res,
                user = User.Identity.Name
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetListData(int id, string jobID)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            
            string outputcrtCardR = "";
            string outputcrtFC = "";
            string outputcrtFU = "";
            string outputcrtNE = "";
            string outputcrtLE = "";
            string outputcrtLPC = "";
            string outputcrtLPNC = "";
            string outputcrtLOSITE = "";
            string outputcrtGSB = "";
            string outputcrtDM = "";

            using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
            {
                var queryHandover = (from a in ctxData.BI_PROCESS_ISP
                                     where a.NEPS_JOB_ID.Trim() == jobID.Trim()
                                     select a).Count();

                var queryHandoverGRN = (from a in ctxData.BI_PROC_GRN_ISP
                                        where a.NEPS_JOB_ID.Trim() == jobID.Trim()
                                        select a).Count();

                var queryHandoverGRNOSP = (from a in ctxData.BI_PROC_GRN_OSP
                                           where a.NEPS_JOB_ID.Trim() == jobID.Trim()
                                           select a).Count();

                if (queryHandover > 0)
                {
                    var query = (from a in ctxData.BI_CREATECARD_REQUEST
                                 join fx in ctxData.BI_CREATECARD_REPLY on a.REQUEST_ID equals fx.REQUEST_ID
                                 where a.PROC_ID == id
                                 //orderby a.PROJECT_NO, a.WBS_NUM
                                 select new
                                 {
                                     a.EQUPID,
                                     a.CARDSLOT,
                                     a.CARDNAME,
                                     a.CARDMODEL,
                                     a.CARDCOUNTPORT,
                                     a.PORTSTARTNUM,
                                     a.CARDSTATUS,
                                     a.TIME_RETURNED,
                                     fx.ERRORMSG
                                 });
                    System.Diagnostics.Debug.WriteLine(query);
                    if (query.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in query)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.ERRORMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.ERRORMSG;
                            }
                            string carry = "";
                            outputcrtCardR += lp.EQUPID + "|" + lp.CARDSLOT + "|" + lp.CARDNAME + "|" + lp.CARDMODEL + "|" + lp.CARDCOUNTPORT + "|" + lp.PORTSTARTNUM + "|" + lp.CARDSTATUS + "|" + lp.TIME_RETURNED + "|" + errorMsg;

                            outputcrtCardR += "!";
                        }
                    }

                    var queryFC = (from a in ctxData.BI_CREATEFC_REQUEST
                                   join fx in ctxData.BI_CREATEFC_REPLY on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   //orderby a.PROJECT_NO, a.WBS_NUM
                                   select new
                                   {
                                       a.LOCNTTNAME,
                                       a.FRANNAME,
                                       a.INDEXX,
                                       a.LOCATIONDETAIL,
                                       a.STATUS,
                                       a.TIME_RETURNED,
                                       fx.ERRORMSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryFC);
                    if (queryFC.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryFC)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.ERRORMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.ERRORMSG;
                            }
                            string carry = "";
                            outputcrtFC += lp.FRANNAME + "|" + lp.LOCNTTNAME + "|" + lp.INDEXX + "|" + lp.LOCATIONDETAIL + "|" + lp.STATUS + "|" + lp.TIME_RETURNED + "|" + errorMsg;

                            outputcrtFC += "!";
                        }
                    }

                    var queryFU = (from a in ctxData.BI_CREATEFU_REQUEST
                                   join fx in ctxData.BI_CREATEFU_REPLY on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   //orderby a.PROJECT_NO, a.WBS_NUM
                                   select new
                                   {
                                       a.FRAUPOSITION,
                                       a.FRAUNAME,
                                       a.FUPTMANRABBREAVIATION,
                                       a.PRODUCTTYPE,
                                       a.TERMINATIONTYPE,
                                       a.COUNTPAIR,
                                       a.TIME_RETURNED,
                                       fx.ERRORMSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryFU);
                    if (queryFU.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryFU)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.ERRORMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.ERRORMSG;
                            }
                            string carry = "";
                            outputcrtFU += lp.FRAUNAME + "|" + lp.FRAUPOSITION + "|" + lp.FUPTMANRABBREAVIATION + "|" + lp.PRODUCTTYPE + "|" + lp.TERMINATIONTYPE + "|" + lp.COUNTPAIR + "|" + lp.TIME_RETURNED + "|" + errorMsg;

                            outputcrtFU += "!";
                        }
                    }

                    var queryNE = (from a in ctxData.BI_CREATENE_REQUEST
                                   join fx in ctxData.BI_CREATENE_REPLY on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   select new
                                   {
                                       a.EQUPLOCNTTNAME,
                                       a.EQUPEQUTABBREAVIATION,
                                       a.EQUPINDEX,
                                       a.EQUPSTATUS,
                                       a.EQUPMANRABBREAVIATION,
                                       a.EQUPEQUMMODEL,
                                       a.TIME_RETURNED,
                                       fx.ERRORMSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryNE);
                    if (queryNE.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryNE)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.ERRORMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.ERRORMSG;
                            }
                            string carry = "";
                            outputcrtNE += lp.EQUPLOCNTTNAME + "|" + lp.EQUPEQUTABBREAVIATION + "|" + lp.EQUPINDEX + "|" + lp.EQUPEQUMMODEL + "|" + lp.EQUPMANRABBREAVIATION + "|" + lp.EQUPSTATUS + "|" + lp.TIME_RETURNED + "|" + errorMsg;

                            outputcrtNE += "!";
                        }
                    }
                }
                if (queryHandoverGRN > 0)
                {

                    var queryLE = (from a in ctxData.BI_GRNDLOADEQUIP_REQ
                                   join fx in ctxData.BI_GRNDLOADEQUIP_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   select new
                                   {
                                       a.EQUIP_EQUIPID,
                                       a.EQUIP_EQUIPCAT,
                                       a.EQUIP_EQUIPVEND,
                                       a.EQUIP_EQUIPMODEL,
                                       a.EQUIPUDA_TAGGING,
                                       a.EQUIPUDA_OUTINDOORTAG,
                                       a.TIME_SENT,
                                       fx.CALLSTATUS_MSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryLE);
                    if (queryLE.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLE)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLE += lp.EQUIP_EQUIPID + "|" + lp.EQUIP_EQUIPCAT + "|" + lp.EQUIP_EQUIPVEND + "|" + lp.EQUIP_EQUIPMODEL + "|" + lp.EQUIPUDA_TAGGING + "|" + lp.EQUIPUDA_OUTINDOORTAG + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLE += "!";
                        }
                    }

                    var queryLPNC = (from a in ctxData.BI_GRNDLDPATHNONCONS_REQ
                                   join fx in ctxData.BI_GRNDLDPATHNONCONS_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   select new
                                   {
                                       a.ANAME,
                                       a.ASITE,
                                       a.ATYPE,
                                       a.ASLOT,
                                       a.ACARD,
                                       a.APORT,
                                       a.ZNAME,
                                       a.ZSITE,
                                       a.ZTYPE,
                                       a.ZSLOT,
                                       a.ZCARD,
                                       a.ZPORT,
                                       a.PRIMARYSECONDARY,
                                       a.PATHBW,
                                       a.TIME_SENT,
                                       fx.CALLSTATUS_MSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryLPNC);
                    if (queryLPNC.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLPNC)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLPNC += lp.ANAME + "|" + lp.ASITE + "|" + lp.ATYPE + "|" + lp.ASLOT + "|";
                            outputcrtLPNC += lp.ACARD + "|" + lp.APORT + "|" + lp.ZNAME + "|" + lp.ZSITE + "|";
                            outputcrtLPNC += lp.ZTYPE + "|" + lp.ZSLOT + "|" + lp.ZCARD + "|" + lp.ZPORT + "|";
                            outputcrtLPNC += lp.PRIMARYSECONDARY + "|" + lp.PATHBW + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLPNC += "!";
                        }
                    }

                    var queryLPC = (from a in ctxData.BI_GRNDLDPATHCONS_REQ
                                     join fx in ctxData.BI_GRNDLDPATHCONS_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                     where a.PROC_ID == id
                                     select new
                                     {
                                         a.ANAME,
                                         a.ASITE,
                                         a.ATYPE,
                                         a.ACARD2,
                                         a.APORT2,
                                         a.ACARD3,
                                         a.APORT3,
                                         a.ZNAME,
                                         a.ZSITE,
                                         a.ZTYPE,
                                         a.ZCARD,
                                         a.ZPORT,
                                         a.DPNAME,
                                         a.DPSITE,
                                         a.TIME_SENT,
                                         fx.CALLSTATUS_MSG
                                     });
                    System.Diagnostics.Debug.WriteLine(queryLPC);
                    if (queryLPC.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLPC)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLPC += lp.ANAME + "|" + lp.ASITE + "|" + lp.ATYPE + "|" + lp.ACARD2 + "|";
                            outputcrtLPC += lp.APORT2 + "|" + lp.ACARD3 + "|" + lp.APORT3 + "|" + lp.ZNAME + "|" ;
                            outputcrtLPC += lp.ZSITE + "|" + lp.ZTYPE + "|" + lp.ZCARD + "|" + lp.ZPORT + "|";
                            outputcrtLPC += lp.DPNAME + "|" + lp.DPSITE + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLPC += "!";
                        }
                    }

                    var queryDM = (from a in ctxData.BI_GRNDATAMATCH_REQ
                                   join fx in ctxData.BI_GRNDATAMATCH_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                    where a.PROC_ID == id
                                    select new
                                    {
                                        a.EVENTNAME,
                                        a.EQUIP_EQUIPID,
                                        a.EQUIP_EXCHDESC,
                                        a.EQUIP_SITE,
                                        a.TIME_SENT,
                                        fx.CALLSTATUS_MSG
                                    });
                    System.Diagnostics.Debug.WriteLine(queryDM);
                    if (queryDM.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryDM)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtDM += lp.EVENTNAME + "|" + lp.EQUIP_EQUIPID + "|" + lp.EQUIP_EXCHDESC + "|" + lp.EQUIP_SITE + "|";
                            outputcrtDM += lp.TIME_SENT + "|" + errorMsg;

                            outputcrtDM += "!";
                        }
                    }
                }
                if (queryHandoverGRNOSP > 0) // granite OSP
                {
                    var queryLE = (from a in ctxData.BI_GRNOSPDLOADEQUIP_REQ
                                   join fx in ctxData.BI_GRNOSPDLOADEQUIP_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   select new
                                   {
                                       a.EQUIP_EQUIPID,
                                       a.EQUIP_EQUIPCAT,
                                       a.EQUIP_EQUIPVEND,
                                       a.EQUIP_EQUIPMODEL,
                                       a.EQUIPUDA_TAGGING,
                                       a.EQUIPUDA_OUTINDOORTAG,
                                       a.TIME_SENT,
                                       fx.CALLSTATUS_MSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryLE);
                    if (queryLE.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLE)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLE += lp.EQUIP_EQUIPID + "|" + lp.EQUIP_EQUIPCAT + "|" + lp.EQUIP_EQUIPVEND + "|" + lp.EQUIP_EQUIPMODEL + "|" + lp.EQUIPUDA_TAGGING + "|" + lp.EQUIPUDA_OUTINDOORTAG + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLE += "!";
                        }
                    }

                    var queryLPNC = (from a in ctxData.BI_GRNOSPDLOADPATH_REQ
                                     join fx in ctxData.BI_GRNOSPDLDPATHCONS_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                     where a.PROC_ID == id
                                     select new
                                     {
                                         a.EQUIPA_NAME,
                                         a.EQUIPA_SITE,
                                         a.EQUIPA_TYPE,
                                         a.EQUIPA_SLOT,
                                         a.EQUIPA_CARD,
                                         a.EQUIPA_PORT,
                                         a.EQUIPZ_NAME,
                                         a.EQUIPZ_SITE,
                                         a.EQUIPZ_TYPE,
                                         a.EQUIPZ_SLOT,
                                         a.EQUIPZ_CARD,
                                         a.EQUIPZ_PORT,
                                         a.PATH_TYPE,
                                         a.PATH_BANDWIDTH,
                                         a.TIME_SENT,
                                         fx.CALLSTATUS_MSG
                                     });
                    System.Diagnostics.Debug.WriteLine(queryLPNC);
                    if (queryLPNC.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLPNC)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLPNC += lp.EQUIPA_NAME + "|" + lp.EQUIPA_SITE + "|" + lp.EQUIPA_TYPE + "|" + lp.EQUIPA_SLOT + "|";
                            outputcrtLPNC += lp.EQUIPA_CARD + "|" + lp.EQUIPA_PORT + "|" + lp.EQUIPZ_NAME + "|" + lp.EQUIPZ_SITE + "|";
                            outputcrtLPNC += lp.EQUIPZ_TYPE + "|" + lp.EQUIPZ_SLOT + "|" + lp.EQUIPZ_CARD + "|" + lp.EQUIPZ_PORT + "|";
                            outputcrtLPNC += lp.PATH_TYPE + "|" + lp.PATH_BANDWIDTH + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLPNC += "!";
                        }
                    }

                    var queryLPC = (from a in ctxData.BI_GRNOSPDLDPATHCONS_REQ
                                    join fx in ctxData.BI_GRNOSPDLDPATHCONS_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                    where a.PROC_ID == id
                                    select new
                                    {
                                        a.ANAME,
                                        a.ASITE,
                                        a.ATYPE,
                                        a.ACARD2,
                                        a.APORT2,
                                        a.ACARD3,
                                        a.APORT3,
                                        a.ZNAME,
                                        a.ZSITE,
                                        a.ZTYPE,
                                        a.ZCARD,
                                        a.ZPORT,
                                        a.DPNAME,
                                        a.DPSITE,
                                        a.TIME_SENT,
                                        fx.CALLSTATUS_MSG
                                    });
                    System.Diagnostics.Debug.WriteLine(queryLPNC);
                    if (queryLPC.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLPC)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLPC += lp.ANAME + "|" + lp.ASITE + "|" + lp.ATYPE + "|" + lp.ACARD2 + "|";
                            outputcrtLPC += lp.APORT2 + "|" + lp.ACARD3 + "|" + lp.APORT3 + "|" + lp.ZNAME + "|";
                            outputcrtLPC += lp.ZSITE + "|" + lp.ZTYPE + "|" + lp.ZCARD + "|" + lp.ZPORT + "|";
                            outputcrtLPC += lp.DPNAME + "|" + lp.DPSITE + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLPC += "!";
                        }
                    }

                    var queryLOSITE = (from a in ctxData.BI_GRNOSPLOADSITE_REQ
                                       join fx in ctxData.BI_GRNOSPLOADSITE_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                       where a.PROC_ID == id
                                       select new
                                       {
                                            a.SITENAME,
                                            a.SITEDESC,
                                            a.ADDRSTREETTYPE,
                                            a.ADDRSTREET,
                                            a.ADDRCOUNTY,
                                            a.ADDRCITY,
                                            a.ADDRSTATE,
                                            a.ADDRPOSTCODE,
                                            a.ADDRCOUNTRY,
                                            a.UDAEQUIPLOC,
                                            a.UDACABLINGTYPE,
                                            a.UDAFIBERTOPREMISEEXIST,
                                            a.UDAACCESSRESTRICT,
                                            a.UDACONTACT,
                                            a.TIME_SENT,
                                            fx.CSMSG
                                       });
                    System.Diagnostics.Debug.WriteLine(queryLOSITE);
                    if (queryLOSITE.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLOSITE)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CSMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CSMSG;
                            }
                            string carry = "";
                            outputcrtLOSITE += lp.SITENAME + "|" + lp.SITEDESC + "|" + lp.ADDRSTREETTYPE + "," + lp.ADDRSTREET + ",";
                            outputcrtLOSITE += lp.ADDRCOUNTY + "," + lp.ADDRCITY + "," + lp.ADDRSTATE + "," + lp.ADDRPOSTCODE + ",";
                            outputcrtLOSITE += lp.ADDRCOUNTRY + "|" + lp.UDAEQUIPLOC + "|" + lp.UDACABLINGTYPE + "|" + lp.UDAFIBERTOPREMISEEXIST + "|";
                            outputcrtLOSITE += lp.UDAACCESSRESTRICT + "|" + lp.UDACONTACT + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLOSITE += "!";
                        }
                    }

                    var queryGSB = (from a in ctxData.BI_GRNOSPLOADSRVBND_REQ
                                    join fx in ctxData.BI_GRNOSPLOADSRVBND_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                    where a.PROC_ID == id
                                    //orderby a.PROJECT_NO, a.WBS_NUM
                                    select new
                                    {
                                        a.SRVBNDID,
                                        a.ADDRSITENO,
                                        a.ADDRSITEFLOOR,
                                        a.ADDRSITEBUILD,
                                        a.ADDRSTREETTYPE,
                                        a.ADDRSTREETNAME,
                                        a.ADDRSECTION,
                                        a.ADDRPOSTCODE,
                                        a.ADDRCITY,
                                        a.ADDRSTATE,
                                        a.ADDRCOUNTRY,
                                        a.ADDRPREMISETYPE,
                                        a.ADDRSITESDP,
                                        a.ADDRSITEDPEXC,
                                        fx.CALLMSG
                                    });
                    System.Diagnostics.Debug.WriteLine(queryGSB);
                    if (queryGSB.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryGSB)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLMSG;
                            }
                            string carry = "";
                            outputcrtGSB += lp.SRVBNDID + "|" + lp.ADDRSITENO + " " + lp.ADDRSITEFLOOR + " " + lp.ADDRSITEBUILD + "," + lp.ADDRSTREETTYPE + "," + lp.ADDRSTREETNAME + "," + lp.ADDRSECTION + ",";
                            outputcrtGSB += lp.ADDRPOSTCODE + "," + lp.ADDRCITY + "," + lp.ADDRSTATE + "," + lp.ADDRCOUNTRY + "|" + lp.ADDRPREMISETYPE + "|" + lp.ADDRSITESDP + "|" + lp.ADDRSITEDPEXC + "|" + errorMsg;

                            outputcrtGSB += "!";
                        }
                    }

                    var queryDM = (from a in ctxData.BI_GRNOSPDATAMATCH_REQ
                                   join fx in ctxData.BI_GRNOSPDATAMATCH_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   select new
                                   {
                                       a.EVENTNAME,
                                       a.EQUIP_EQUIPID,
                                       a.EQUIP_EXCHDESC,
                                       a.EQUIP_SITE,
                                       a.TIME_SENT,
                                       fx.CALLSTATUS_MSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryDM);
                    if (queryDM.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryDM)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtDM += lp.EVENTNAME + "|" + lp.EQUIP_EQUIPID + "|" + lp.EQUIP_EXCHDESC + "|" + lp.EQUIP_SITE + "|";
                            outputcrtDM += lp.TIME_SENT + "|" + errorMsg;

                            outputcrtDM += "!";
                        }
                    }
                }
            }

            return Json(new
            {
                crtCardR = outputcrtCardR,
                crtFCR = outputcrtFC,
                crtFUR = outputcrtFU,
                crtNE = outputcrtNE,
                crtLE = outputcrtLE,
                crtLPNC = outputcrtLPNC,
                crtLPC = outputcrtLPC,
                crtLOSITE = outputcrtLOSITE,
                crtGSB = outputcrtGSB,
                outputcrtDM = outputcrtDM
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetListDataOSP(int id, string jobID)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            string outputcrtCardR = "";
            string outputcrtFC = "";
            string outputcrtFU = "";
            string outputcrtNE = "";
            string outputcrtCS = "";
            string outputcrtSB = "";
            string outputcrtLE = "";
            string outputcrtLPNC = "";
            string outputcrtLPC = "";
            string outputcrtLOSITE = "";
            string outputcrtGSB = "";
            string outputcrtDM = "";
            using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
            {
                var queryHandover = (from a in ctxData.BI_PROCESS
                                     where a.NEPS_JOB_ID.Trim() == jobID.Trim()
                                     select a).Count();

                var queryHandoverGRN = (from a in ctxData.BI_PROC_GRN_ISP
                                        where a.NEPS_JOB_ID.Trim() == jobID.Trim()
                                        select a).Count();

                var queryHandoverGRNOSP = (from a in ctxData.BI_PROC_GRN_OSP
                                        where a.NEPS_JOB_ID.Trim() == jobID.Trim()
                                        select a).Count();

                if (queryHandover > 0)
                {

                    var queryNE = (from a in ctxData.BI_CREATENE_REQUEST_OSP
                                   join fx in ctxData.BI_CREATENE_REPLY_OSP on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   select new
                                   {
                                       a.EQUPLOCNTTNAME,
                                       a.EQUPEQUTABBREAVIATION,
                                       a.EQUPINDEX,
                                       a.EQUPSTATUS,
                                       a.EQUPMANRABBREAVIATION,
                                       a.EQUPEQUMMODEL,
                                       a.TIME_RETURNED,
                                       fx.ERRORMSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryNE);
                    if (queryNE.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryNE)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.ERRORMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.ERRORMSG;
                            }
                            string carry = "";
                            outputcrtNE += lp.EQUPLOCNTTNAME + "|" + lp.EQUPEQUTABBREAVIATION + "|" + lp.EQUPINDEX + "|" + lp.EQUPEQUMMODEL + "|" + lp.EQUPMANRABBREAVIATION + "|" + lp.EQUPSTATUS + "|" + lp.TIME_RETURNED + "|" + errorMsg;

                            outputcrtNE += "!";
                        }
                    }

                    var query = (from a in ctxData.BI_CREATECARD_REQUEST_OSP
                                 join fx in ctxData.BI_CREATECARD_REPLY_OSP on a.REQUEST_ID equals fx.REQUEST_ID
                                 where a.PROC_ID == id
                                 //orderby a.PROJECT_NO, a.WBS_NUM
                                 select new
                                 {
                                     a.EQUPID,
                                     a.CARDSLOT,
                                     a.CARDNAME,
                                     a.CARDMODEL,
                                     a.CARDCOUNTPORT,
                                     a.PORTSTARTNUM,
                                     a.CARDSTATUS,
                                     a.TIME_RETURNED,
                                     fx.ERRORMSG
                                 });
                    System.Diagnostics.Debug.WriteLine(query);
                    if (query.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in query)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.ERRORMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.ERRORMSG;
                            }
                            string carry = "";
                            outputcrtCardR += lp.EQUPID + "|" + lp.CARDSLOT + "|" + lp.CARDNAME + "|" + lp.CARDMODEL + "|" + lp.CARDCOUNTPORT + "|" + lp.PORTSTARTNUM + "|" + lp.CARDSTATUS + "|" + lp.TIME_RETURNED + "|" + errorMsg;

                            outputcrtCardR += "!";
                        }
                    }

                    var queryFC = (from a in ctxData.BI_CREATEFC_REQUEST_OSP
                                   join fx in ctxData.BI_CREATEFC_REPLY_OSP on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   //orderby a.PROJECT_NO, a.WBS_NUM
                                   select new
                                   {
                                       a.LOCNTTNAME,
                                       a.FRANNAME,
                                       a.INDEXX,
                                       a.LOCATIONDETAIL,
                                       a.STATUS,
                                       a.TIME_RETURNED,
                                       fx.ERRORMSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryFC);
                    if (queryFC.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryFC)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.ERRORMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.ERRORMSG;
                            }
                            string carry = "";
                            outputcrtFC += lp.FRANNAME + "|" + lp.LOCNTTNAME + "|" + lp.INDEXX + "|" + lp.LOCATIONDETAIL + "|" + lp.STATUS + "|" + lp.TIME_RETURNED + "|" + errorMsg;

                            outputcrtFC += "!";
                        }
                    }

                    var queryFU = (from a in ctxData.BI_CREATEFU_REQUEST_OSP
                                   join fx in ctxData.BI_CREATEFU_REPLY_OSP on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   //orderby a.PROJECT_NO, a.WBS_NUM
                                   select new
                                   {
                                       a.FRAUPOSITION,
                                       a.FRAUNAME,
                                       a.FUPTMANRABBREAVIATION,
                                       a.PRODUCTTYPE,
                                       a.TERMINATIONTYPE,
                                       a.COUNTPAIR,
                                       a.TIME_RETURNED,
                                       fx.ERRORMSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryFU);
                    if (queryFU.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryFU)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.ERRORMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.ERRORMSG;
                            }
                            string carry = "";
                            outputcrtFU += lp.FRAUNAME + "|" + lp.FRAUPOSITION + "|" + lp.FUPTMANRABBREAVIATION + "|" + lp.PRODUCTTYPE + "|" + lp.TERMINATIONTYPE + "|" + lp.COUNTPAIR + "|" + lp.TIME_RETURNED + "|" + errorMsg;

                            outputcrtFU += "!";
                        }
                    }

                    var queryCS = (from a in ctxData.BI_CREATECS_REQUEST_OSP
                                   join fx in ctxData.BI_CREATECS_REPLY_OSP on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   //orderby a.PROJECT_NO, a.WBS_NUM
                                   select new
                                   {
                                       //a.EQUPID,
                                       a.CABS_NAME,
                                       a.CABS_CAST_TYPE,
                                       a.CSPT_PROD_NAME,
                                       a.MIN_NUMBER,
                                       a.MAX_NUMBER,
                                       a.LOCATION_A,
                                       a.LOCATION_B,
                                       fx.ERRORMSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryCS);
                    if (queryCS.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryCS)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.ERRORMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.ERRORMSG;
                            }
                            string carry = "";
                            outputcrtCS += lp.CABS_NAME + "|" + lp.CABS_CAST_TYPE + "|" + lp.CSPT_PROD_NAME + "|" + lp.MIN_NUMBER + "|" + lp.MAX_NUMBER + "|" + lp.LOCATION_A + "|" + lp.LOCATION_B + "|" + errorMsg;
                            //outputcrtCS += lp.EQUPID + "|" + lp.CABS_NAME + "|" + lp.CABS_CAST_TYPE + "|" + lp.CSPT_PROD_NAME + "|" + lp.MIN_NUMBER + "|" + lp.MAX_NUMBER + "|" + lp.LOCATION_A + "|" + lp.LOCATION_B + "|" + errorMsg;
                            outputcrtCS += "!";
                        }
                    }

                    var querySB = (from a in ctxData.BI_CREATESB_REQUEST_OSP
                                   join fx in ctxData.BI_CREATESB_REPLY_OSP on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   //orderby a.PROJECT_NO, a.WBS_NUM
                                   select new
                                   {
                                       a.FRAC_ID,
                                       a.FIELD1,
                                       a.FIELD2,
                                       a.STREET_NUMBER,
                                       a.STREET_TYPE,
                                       a.STREET_NAME,
                                       a.SUBURB,
                                       a.STAT_ABBR,
                                       fx.ERRORMSG
                                   });
                    System.Diagnostics.Debug.WriteLine(querySB);
                    if (querySB.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in querySB)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.ERRORMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.ERRORMSG;
                            }
                            string carry = "";
                            outputcrtSB += lp.FRAC_ID + "|" + lp.FIELD1 + "|" + lp.FIELD2 + "|" + lp.STREET_NUMBER + "|" + lp.STREET_TYPE + "|" + lp.STREET_NAME + "|" + lp.SUBURB + "|" + lp.STAT_ABBR + "|" + errorMsg;

                            outputcrtSB += "!";
                        }
                    }
                }
                if (queryHandoverGRN > 0) // granite ISP
                {
                    var queryLE = (from a in ctxData.BI_GRNDLOADEQUIP_REQ
                                   join fx in ctxData.BI_GRNDLOADEQUIP_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   select new
                                   {
                                       a.EQUIP_EQUIPID,
                                       a.EQUIP_EQUIPCAT,
                                       a.EQUIP_EQUIPVEND,
                                       a.EQUIP_EQUIPMODEL,
                                       a.EQUIPUDA_TAGGING,
                                       a.EQUIPUDA_OUTINDOORTAG,
                                       a.TIME_SENT,
                                       fx.CALLSTATUS_MSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryLE);
                    if (queryLE.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLE)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLE += lp.EQUIP_EQUIPID + "|" + lp.EQUIP_EQUIPCAT + "|" + lp.EQUIP_EQUIPVEND + "|" + lp.EQUIP_EQUIPMODEL + "|" + lp.EQUIPUDA_TAGGING + "|" + lp.EQUIPUDA_OUTINDOORTAG + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLE += "!";
                        }
                    }

                    var queryLPNC = (from a in ctxData.BI_GRNDLDPATHNONCONS_REQ
                                     join fx in ctxData.BI_GRNDLDPATHNONCONS_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                     where a.PROC_ID == id
                                     select new
                                     {
                                         a.ANAME,
                                         a.ASITE,
                                         a.ATYPE,
                                         a.ASLOT,
                                         a.ACARD,
                                         a.APORT,
                                         a.ZNAME,
                                         a.ZSITE,
                                         a.ZTYPE,
                                         a.ZSLOT,
                                         a.ZCARD,
                                         a.ZPORT,
                                         a.PRIMARYSECONDARY,
                                         a.PATHBW,
                                         a.TIME_SENT,
                                         fx.CALLSTATUS_MSG
                                     });
                    System.Diagnostics.Debug.WriteLine(queryLPNC);
                    if (queryLPNC.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLPNC)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLPNC += lp.ANAME + "|" + lp.ASITE + "|" + lp.ATYPE + "|" + lp.ASLOT + "|";
                            outputcrtLPNC += lp.ACARD + "|" + lp.APORT + "|" + lp.ZNAME + "|" + lp.ZSITE + "|";
                            outputcrtLPNC += lp.ZTYPE + "|" + lp.ZSLOT + "|" + lp.ZCARD + "|" + lp.ZPORT + "|";
                            outputcrtLPNC += lp.PRIMARYSECONDARY + "|" + lp.PATHBW + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLPNC += "!";
                        }
                    }

                    var queryLPC = (from a in ctxData.BI_GRNDLDPATHCONS_REQ
                                    join fx in ctxData.BI_GRNDLDPATHCONS_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                    where a.PROC_ID == id
                                    select new
                                    {
                                        a.ANAME,
                                        a.ASITE,
                                        a.ATYPE,
                                        a.ACARD2,
                                        a.APORT2,
                                        a.ACARD3,
                                        a.APORT3,
                                        a.ZNAME,
                                        a.ZSITE,
                                        a.ZTYPE,
                                        a.ZCARD,
                                        a.ZPORT,
                                        a.DPNAME,
                                        a.DPSITE,
                                        a.TIME_SENT,
                                        fx.CALLSTATUS_MSG
                                    });
                    System.Diagnostics.Debug.WriteLine(queryLPC);
                    if (queryLPC.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLPC)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLPC += lp.ANAME + "|" + lp.ASITE + "|" + lp.ATYPE + "|" + lp.ACARD2 + "|";
                            outputcrtLPC += lp.APORT2 + "|" + lp.ACARD3 + "|" + lp.APORT3 + "|" + lp.ZNAME + "|";
                            outputcrtLPC += lp.ZSITE + "|" + lp.ZTYPE + "|" + lp.ZCARD + "|" + lp.ZPORT + "|";
                            outputcrtLPC += lp.DPNAME + "|" + lp.DPSITE + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLPC += "!";
                        }
                    }

                    var queryDM = (from a in ctxData.BI_GRNDATAMATCH_REQ
                                   join fx in ctxData.BI_GRNDATAMATCH_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   select new
                                   {
                                       a.EVENTNAME,
                                       a.EQUIP_EQUIPID,
                                       a.EQUIP_EXCHDESC,
                                       a.EQUIP_SITE,
                                       a.TIME_SENT,
                                       fx.CALLSTATUS_MSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryDM);
                    if (queryDM.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryDM)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtDM += lp.EVENTNAME + "|" + lp.EQUIP_EQUIPID + "|" + lp.EQUIP_EXCHDESC + "|" + lp.EQUIP_SITE + "|";
                            outputcrtDM += lp.TIME_SENT + "|" + errorMsg;

                            outputcrtDM += "!";
                        }
                    }
                }
                if (queryHandoverGRNOSP > 0) // granite OSP
                {
                    var queryLE = (from a in ctxData.BI_GRNOSPDLOADEQUIP_REQ
                                   join fx in ctxData.BI_GRNOSPDLOADEQUIP_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   select new
                                   {
                                       a.EQUIP_EQUIPID,
                                       a.EQUIP_EQUIPCAT,
                                       a.EQUIP_EQUIPVEND,
                                       a.EQUIP_EQUIPMODEL,
                                       a.EQUIPUDA_TAGGING,
                                       a.EQUIPUDA_OUTINDOORTAG,
                                       a.TIME_SENT,
                                       fx.CALLSTATUS_MSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryLE);
                    if (queryLE.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLE)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLE += lp.EQUIP_EQUIPID + "|" + lp.EQUIP_EQUIPCAT + "|" + lp.EQUIP_EQUIPVEND + "|" + lp.EQUIP_EQUIPMODEL + "|" + lp.EQUIPUDA_TAGGING + "|" + lp.EQUIPUDA_OUTINDOORTAG + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLE += "!";
                        }
                    }
                    System.Diagnostics.Debug.WriteLine("LOAD EQUIP: " + outputcrtLE);

                    var queryLPNC = (from a in ctxData.BI_GRNDLDPATHNONCONS_REQ
                                     join fx in ctxData.BI_GRNDLDPATHNONCONS_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                     where a.PROC_ID == id
                                     select new
                                     {
                                         a.ANAME,
                                         a.ASITE,
                                         a.ATYPE,
                                         a.ASLOT,
                                         a.ACARD,
                                         a.APORT,
                                         a.ZNAME,
                                         a.ZSITE,
                                         a.ZTYPE,
                                         a.ZSLOT,
                                         a.ZCARD,
                                         a.ZPORT,
                                         a.PRIMARYSECONDARY,
                                         a.PATHBW,
                                         a.TIME_SENT,
                                         fx.CALLSTATUS_MSG
                                     });
                    System.Diagnostics.Debug.WriteLine(queryLPNC);
                    if (queryLPNC.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLPNC)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLPNC += lp.ANAME + "|" + lp.ASITE + "|" + lp.ATYPE + "|" + lp.ASLOT + "|";
                            outputcrtLPNC += lp.ACARD + "|" + lp.APORT + "|" + lp.ZNAME + "|" + lp.ZSITE + "|";
                            outputcrtLPNC += lp.ZTYPE + "|" + lp.ZSLOT + "|" + lp.ZCARD + "|" + lp.ZPORT + "|";
                            outputcrtLPNC += lp.PRIMARYSECONDARY + "|" + lp.PATHBW + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLPNC += "!";
                        }
                    }

                    var queryLPC = (from a in ctxData.BI_GRNOSPDLDPATHCONS_REQ
                                    join fx in ctxData.BI_GRNOSPDLDPATHCONS_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                    where a.PROC_ID == id
                                    select new
                                    {
                                        a.ANAME,
                                        a.ASITE,
                                        a.ATYPE,
                                        a.ACARD2,
                                        a.APORT2,
                                        a.ACARD3,
                                        a.APORT3,
                                        a.ZNAME,
                                        a.ZSITE,
                                        a.ZTYPE,
                                        a.ZCARD,
                                        a.ZPORT,
                                        a.DPNAME,
                                        a.DPSITE,
                                        a.TIME_SENT,
                                        fx.CALLSTATUS_MSG
                                    });
                    System.Diagnostics.Debug.WriteLine(queryLPNC);
                    if (queryLPC.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLPC)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtLPC += lp.ANAME + "|" + lp.ASITE + "|" + lp.ATYPE + "|" + lp.ACARD2 + "|";
                            outputcrtLPC += lp.APORT2 + "|" + lp.ACARD3 + "|" + lp.APORT3 + "|" + lp.ZNAME + "|";
                            outputcrtLPC += lp.ZSITE + "|" + lp.ZTYPE + "|" + lp.ZCARD + "|" + lp.ZPORT + "|";
                            outputcrtLPC += lp.DPNAME + "|" + lp.DPSITE + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLPC += "!";
                        }
                    }

                    var queryLOSITE = (from a in ctxData.BI_GRNOSPLOADSITE_REQ
                                       join fx in ctxData.BI_GRNOSPLOADSITE_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                       where a.PROC_ID == id
                                       select new
                                       {
                                           a.SITENAME,
                                           a.SITEDESC,
                                           a.ADDRSTREETTYPE,
                                           a.ADDRSTREET,
                                           a.ADDRCOUNTY,
                                           a.ADDRCITY,
                                           a.ADDRSTATE,
                                           a.ADDRPOSTCODE,
                                           a.ADDRCOUNTRY,
                                           a.UDAEQUIPLOC,
                                           a.UDACABLINGTYPE,
                                           a.UDAFIBERTOPREMISEEXIST,
                                           a.UDAACCESSRESTRICT,
                                           a.UDACONTACT,
                                           a.TIME_SENT,
                                           fx.CSMSG
                                       });
                    System.Diagnostics.Debug.WriteLine(queryLOSITE);
                    if (queryLOSITE.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryLOSITE)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CSMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CSMSG;
                            }
                            string carry = "";
                            outputcrtLOSITE += lp.SITENAME + "|" + lp.SITEDESC + "|" + lp.ADDRSTREETTYPE + "," + lp.ADDRSTREET + ",";
                            outputcrtLOSITE += lp.ADDRCOUNTY + "," + lp.ADDRCITY + "," + lp.ADDRSTATE + "," + lp.ADDRPOSTCODE + ",";
                            outputcrtLOSITE += lp.ADDRCOUNTRY + "|" + lp.UDAEQUIPLOC + "|" + lp.UDACABLINGTYPE + "|" + lp.UDAFIBERTOPREMISEEXIST + "|";
                            outputcrtLOSITE += lp.UDAACCESSRESTRICT + "|" + lp.UDACONTACT + "|" + lp.TIME_SENT + "|" + errorMsg;

                            outputcrtLOSITE += "!";
                        }
                    }

                    var queryGSB = (from a in ctxData.BI_GRNOSPLOADSRVBND_REQ
                                   join fx in ctxData.BI_GRNOSPLOADSRVBND_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   //orderby a.PROJECT_NO, a.WBS_NUM
                                   select new
                                   {
                                       a.SRVBNDID,
                                       a.ADDRSITENO,
                                       a.ADDRSITEFLOOR,
                                       a.ADDRSITEBUILD,
                                       a.ADDRSTREETTYPE,
                                       a.ADDRSTREETNAME,
                                       a.ADDRSECTION,
                                       a.ADDRPOSTCODE,
                                       a.ADDRCITY,
                                       a.ADDRSTATE,
                                       a.ADDRCOUNTRY,
                                       a.ADDRPREMISETYPE,
                                       a.ADDRSITESDP,
                                       a.ADDRSITEDPEXC,
                                       fx.CALLMSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryGSB);
                    if (queryGSB.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryGSB)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLMSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLMSG;
                            }
                            string carry = "";
                            outputcrtGSB += lp.SRVBNDID + "|" + lp.ADDRSITENO + " " + lp.ADDRSITEFLOOR + " " + lp.ADDRSITEBUILD + "," + lp.ADDRSTREETTYPE + "," + lp.ADDRSTREETNAME + "," + lp.ADDRSECTION + ",";
                            outputcrtGSB += lp.ADDRPOSTCODE + "," + lp.ADDRCITY + "," + lp.ADDRSTATE + "," + lp.ADDRCOUNTRY + "|" + lp.ADDRPREMISETYPE + "|" + lp.ADDRSITESDP + "|" + lp.ADDRSITEDPEXC + "|" + errorMsg;

                            outputcrtGSB += "!";
                        }
                    }

                    var queryDM = (from a in ctxData.BI_GRNOSPDATAMATCH_REQ
                                   join fx in ctxData.BI_GRNOSPDATAMATCH_RES on a.REQUEST_ID equals fx.REQUEST_ID
                                   where a.PROC_ID == id
                                   select new
                                   {
                                       a.EVENTNAME,
                                       a.EQUIP_EQUIPID,
                                       a.EQUIP_EXCHDESC,
                                       a.EQUIP_SITE,
                                       a.TIME_SENT,
                                       fx.CALLSTATUS_MSG
                                   });
                    System.Diagnostics.Debug.WriteLine(queryDM);
                    if (queryDM.Count() > 0)
                    {
                        int counter = 0;
                        foreach (var lp in queryDM)
                        {
                            counter++;
                            string errorMsg = "";
                            if (lp.CALLSTATUS_MSG == null)
                            {
                                errorMsg = "OK";
                            }
                            else
                            {
                                errorMsg = lp.CALLSTATUS_MSG;
                            }
                            string carry = "";
                            outputcrtDM += lp.EVENTNAME + "|" + lp.EQUIP_EQUIPID + "|" + lp.EQUIP_EXCHDESC + "|" + lp.EQUIP_SITE + "|";
                            outputcrtDM += lp.TIME_SENT + "|" + errorMsg;

                            outputcrtDM += "!";
                        }
                    }
                }
            }

            return Json(new
            {
                crtCardR = outputcrtCardR,
                crtFCR = outputcrtFC,
                crtFUR = outputcrtFU,
                crtNE = outputcrtNE,
                crtCS = outputcrtCS,
                crtSB = outputcrtSB,
                crtLE = outputcrtLE,
                crtLPNC = outputcrtLPNC,
                crtLPC = outputcrtLPC,
                crtLOSITE = outputcrtLOSITE,
                crtGSB = outputcrtGSB,
                crtDM = outputcrtDM
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ChooseProject(string targetJob, string targetProject, string targetWBS)
        {
            System.Diagnostics.Debug.WriteLine(targetJob + "-!!!!!-" + targetProject);
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            string res = "";
            string res1 = "";
            string res2 = "";
            using (Entities ctxData = new Entities())
            {
                var CariOSP = (from p in ctxData.G3E_JOB
                               where p.SCHEME_NAME.ToUpper() == targetJob.ToUpper()
                               select p).Count();

                var CariISP = (from p in ctxData.WV_ISP_JOB
                               where p.SCHEME_NAME.ToUpper() == targetJob.ToUpper()
                               select p).Count();
                if (CariOSP > 0)
                {
                    res1 = myWebService.ChooseProject(targetJob.ToUpper(), targetProject, targetWBS);
                }
                if (CariISP > 0)
                {
                    var CariISP2 = (from p in ctxData.WV_ISP_JOB
                                    where p.SCHEME_NAME.ToUpper() == targetJob.ToUpper()
                                    select p).Single();
                    res2 = myWebService.ISPChooseProject(CariISP2.G3E_IDENTIFIER, targetProject, targetWBS);
                }
            }
            //string res = myWebService.AutoApproval(targetJob);
            if (res1 == "fail")
            {
                res = res2;
            }
            else
            {
                res = res1;
            }

            return Json(new
            {
                result = res
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ISPChooseProject(string targetJob, string targetProject, string targetWBS)
        {
            System.Diagnostics.Debug.WriteLine(targetJob + "-!!!!!-" + targetProject);
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            string res = "";
            string res1 = "";
            string res2 = "";
            using (Entities ctxData = new Entities())
            {
                var CariISP = (from p in ctxData.WV_ISP_JOB
                               where p.SCHEME_NAME.ToUpper() == targetJob.ToUpper()
                               select p).Count();

                var CariDataISP = (from p in ctxData.WV_ISP_JOB
                                   where p.SCHEME_NAME.ToUpper() == targetJob.ToUpper()
                                   select p).Single();

                var CariOSP = (from p in ctxData.G3E_JOB
                               where p.SCHEME_NAME == CariDataISP.SCHEME_NAME
                               select p).Count();

                if (CariOSP > 0)
                {
                    var CariOSP2 = (from p in ctxData.G3E_JOB
                                    where p.G3E_IDENTIFIER.ToUpper() == CariDataISP.SCHEME_NAME.ToUpper()
                                    select p).Single();
                    res1 = myWebService.ChooseProject(CariOSP2.G3E_IDENTIFIER.ToUpper(), targetProject, targetWBS);
                }
                if (CariISP > 0)
                {
                    res2 = myWebService.ISPChooseProject(targetJob, targetProject, targetWBS);
                }
            }
            //string res = myWebService.ISPChooseProject(targetJob, targetProject);
            System.Diagnostics.Debug.WriteLine(res2);
            if (res2 == "fail")
            {
                res = res1;
            }
            else
            {
                res = res2;
            }
            return Json(new
            {
                result = res
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult AutoApproval(string targetJob)
        {
            System.Diagnostics.Debug.WriteLine(targetJob + "-!!!!!-");
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            string res = "";
            string res1 = "";
            string res2 = "";
            int webser = 0;

            OSPHandoverServices.Error errorObj = null;
            Error_ISP errorISP = null;
            using (Entities ctxData = new Entities())
            {
                var CariOSP = (from p in ctxData.G3E_JOB
                               where p.G3E_IDENTIFIER == targetJob
                               select p).Count();

                var CariISP = (from p in ctxData.WV_ISP_JOB
                               where p.SCHEME_NAME == targetJob
                               select p).Count();

                int checkFeat;

                var queryNET = (from d in ctxData.GC_NETELEM
                                where d.JOB_ID == targetJob && (d.FEATURE_STATE != "ASB" || d.FEATURE_STATE != "UC")
                                select d).Count();

                var queryASB = (from d in ctxData.GC_NETELEM
                                where d.JOB_ID == targetJob && d.FEATURE_STATE != "ASB"
                                select d).Count();

                checkFeat = queryNET;
                int checkASB = queryASB;

                if (CariOSP > 0)
                {
                    var dataOSP = (from p in ctxData.G3E_JOB
                                   where p.G3E_IDENTIFIER == targetJob
                                   select p).Single();
                    if (dataOSP.JOB_TYPE == "Civil")
                    {
                        if (checkFeat == 0){
                            res1 = myWebService.AutoApproval(targetJob);
                        }else
                        { res1 = "fail";  }

                    }
                    else
                    {
                        neps_procmanClient testWSOSP = new neps_procmanClient();
                        testWSOSP.CreateProcess(out errorObj, targetJob);
                        if (checkFeat == 0)
                        {
                        using (EntitiesNetworkElement chckData = new EntitiesNetworkElement())
                        {
                            var checkDataOSP = (from p in chckData.BI_PROCESS
                                                where p.NEPS_JOB_ID == targetJob && p.STATUS == "SUCCESS"
                                                select p).Count();

                            if (checkDataOSP > 0)
                            {
                                if (checkASB == 0)
                                {
                                    res1 = myWebService.AutoApproval(targetJob);
                                }
                                else
                                {
                                    res1 = "fail";
                                }
                            }
                            else
                            { res1 = "fail"; }

                        }
                        }
                        else
                        {
                            res1 = "fail";
                        }
                    }
                }
                if (CariISP > 0)
                {

                    neps_procman_ispClient testWSISP = new neps_procman_ispClient();
                    webser = testWSISP.CreateProcess(out errorISP, targetJob);

                    var CariISP2 = (from p in ctxData.WV_ISP_JOB
                                    where p.SCHEME_NAME == targetJob
                                    select p).Single();

                    using (EntitiesNetworkElement chckData = new EntitiesNetworkElement())
                    {
                        var checkDataISP = (from p in chckData.BI_PROCESS_ISP
                                            where p.NEPS_JOB_ID == targetJob && p.STATUS == "SUCCESS"
                                            select p).Count();
                        if (checkDataISP > 0)
                        {
                            if (CariISP2.JOB_TYPE == "ISP" || CariISP2.JOB_TYPE == "Others")
                            {
                                res2 = myWebService.ISPAutoApproval(CariISP2.G3E_IDENTIFIER);
                            }
                            else
                            {
                                if (checkFeat == 0)
                                {
                                    res2 = myWebService.ISPAutoApproval(CariISP2.G3E_IDENTIFIER);
                                }
                                else
                                { res2 = "fail"; }
                            }
                        }
                        else
                            res2 = "fail";
                    }
                }
            }
            //string res = myWebService.AutoApproval(targetJob);
            if (res1 == "fail")
            {
                res = res2;
            }
            else
            {
                res = res1;
            }

            //MailMessage msg = new MailMessage();
            //msg.IsBodyHtml = true;
            //msg.From = new MailAddress("dev-noreply@tm.com", "NEPS Webview.");
            //msg.To.Add("haidarsukur@gmail.com");
            //msg.Subject = "TESTING";
            //msg.Body = "TEST";
            //SmtpClient emailClient = new SmtpClient("smtp.tm.com.my");
            //System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("neps@tm.com.my", "nepsadmin");
            //emailClient.UseDefaultCredentials = false;
            //emailClient.Port = 25;
            //emailClient.Credentials = SMTPUserInfo;
            //emailClient.Send(msg);

            return Json(new
            {
                result = res
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GraniteApproval(string targetJob)
        {
            System.Diagnostics.Debug.WriteLine(targetJob + "-!!!!!-");
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            string res = "";
            string username = "";
            //int webser = 0;
            int result = 0;

            GraniteOSP.Error errorObject = null;
            GraniteISP.Error errorObj = null;

            using (Entities ctxData = new Entities())
            {
                

                var CariOSP = (from p in ctxData.G3E_JOB
                               where p.G3E_IDENTIFIER == targetJob
                               select p).Count();

                var CariISP = (from p in ctxData.WV_ISP_JOB
                               where p.G3E_IDENTIFIER == targetJob
                               select p).Count();

                bool callProc = myWebService.CallProcedureGRN(targetJob);

                System.Diagnostics.Debug.WriteLine(" isp aaaaa");
                System.Diagnostics.Debug.WriteLine(callProc);

                if (CariOSP > 0)
                {
                    var dataOSP = (from p in ctxData.G3E_JOB
                                   where p.G3E_IDENTIFIER == targetJob
                                   select p).Single();
                    username = dataOSP.G3E_OWNER;

                    neps_procman_grn_ospClient Grn = new neps_procman_grn_ospClient();
                    result = Grn.CreateProcess(out errorObject, targetJob, username);
                }
                if (CariISP > 0)
                {
                    var dataISP = (from p in ctxData.WV_ISP_JOB
                                   where p.G3E_IDENTIFIER == targetJob
                                   select p).Single();

                    username = dataISP.G3E_OWNER;

                    neps_procman_grn_ispClient Grn = new neps_procman_grn_ispClient();
                    result = Grn.CreateProcess(out errorObj, targetJob, username);
                }

                if (result == 0)
                {
                    if (CariOSP > 0)
                    {
                        myWebService.AutoApproval(targetJob);
                    }
                    if (CariISP > 0)
                    {
                        myWebService.ISPAutoApproval(targetJob);
                    }
                }
            }

            //MailMessage msg = new MailMessage();
            //msg.IsBodyHtml = true;
            //msg.From = new MailAddress("dev-noreply@tm.com", "NEPS Webview.");
            //msg.To.Add("haidarsukur@gmail.com");
            //msg.Subject = "TESTING";
            //msg.Body = "TEST";
            //SmtpClient emailClient = new SmtpClient("smtp.tm.com.my");
            //System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("neps@tm.com.my", "nepsadmin");
            //emailClient.UseDefaultCredentials = false;
            //emailClient.Port = 25;
            //emailClient.Credentials = SMTPUserInfo;
            //emailClient.Send(msg);

            return Json(new
            {
                result = res
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult AssetGems(string targetJob)
        {
            bool success;

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            success = myWebService.assetGems(targetJob);
            System.Diagnostics.Debug.WriteLine("ssssss : "+success);
            success = true;
            return Json(new
            {
                Success = success
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ResentApproval(string targetJob, string targetDesc)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            string res = "";

            res = myWebService.ResendApproval(targetJob, targetDesc);

            //MailMessage msg = new MailMessage();
            //msg.IsBodyHtml = true;
            //msg.From = new MailAddress("dev-noreply@tm.com", "NEPS Webview.");
            //msg.To.Add("haidarsukur@gmail.com");
            //msg.Subject = "TESTING";
            //msg.Body = "TEST";
            //SmtpClient emailClient = new SmtpClient("smtp.tm.com.my");
            //System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("neps@tm.com.my", "nepsadmin");
            //emailClient.UseDefaultCredentials = false;
            //emailClient.Port = 25;
            //emailClient.Credentials = SMTPUserInfo;
            //emailClient.Send(msg);

            return Json(new
            {
                result = res
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ISPAutoApproval(string targetJob)
        {
            System.Diagnostics.Debug.WriteLine(targetJob + "-!!!!!-");
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            string res = "";
            string res1 = "";
            string res2 = "";
            int chckISP = 0;

            Error_ISP errorObj = null;
            OSPHandoverServices.Error errorOSP = null;
            using (Entities ctxData = new Entities())
            {
                var CariISP = (from p in ctxData.WV_ISP_JOB
                               where p.G3E_IDENTIFIER == targetJob
                               select p).Count();

                var CariDataISP = (from p in ctxData.WV_ISP_JOB
                                   where p.G3E_IDENTIFIER == targetJob
                                   select p).Single();

                var CariOSP = (from p in ctxData.G3E_JOB
                               where p.G3E_IDENTIFIER == CariDataISP.SCHEME_NAME
                               select p).Count();

                int checkFeat;

                var queryNET = (from d in ctxData.GC_NETELEM
                                where d.JOB_ID == targetJob && d.FEATURE_STATE != "ASB"
                                select d).Count();

                checkFeat = queryNET;

                if (CariOSP > 0)
                {
                    var CariOSP2 = (from p in ctxData.G3E_JOB
                                    where p.G3E_IDENTIFIER == CariDataISP.SCHEME_NAME
                                    select p).Single();
                    if (checkFeat == 0){   
                        neps_procmanClient testWSOSP = new neps_procmanClient();
                        testWSOSP.CreateProcess(out errorOSP, targetJob);

                        using (EntitiesNetworkElement chckData = new EntitiesNetworkElement())
                        {
                            var checkDataOSP = (from p in chckData.BI_PROCESS
                                                where p.NEPS_JOB_ID == targetJob && p.STATUS == "SUCCESS"
                                                select p).Count();
                            if (checkDataOSP > 0)
                            {
                                    res1 = myWebService.AutoApproval(CariOSP2.G3E_IDENTIFIER);
                            }
                            else
                                res1 = "fail";
                        }
                    }
                     else
                     { res1 = "fail"; }

                }
                if (CariISP > 0)
                {
                    neps_procman_ispClient testWS = new neps_procman_ispClient();
                    testWS.CreateProcess(out errorObj, targetJob);

                    System.Diagnostics.Debug.WriteLine(testWS + "-HANDOVER ISP-");
                    using (EntitiesNetworkElement chckData = new EntitiesNetworkElement())
                    {
                        var checkDataISP = (from p in chckData.BI_PROCESS_ISP
                                            where p.NEPS_JOB_ID == targetJob && p.STATUS == "SUCCESS"
                                            select p).Count();
                        if (checkDataISP > 0)
                        {
                            if (CariDataISP.JOB_TYPE == "ISP" || CariDataISP.JOB_TYPE == "Others")
                            {
                                res2 = myWebService.ISPAutoApproval(targetJob);
                            }
                            else
                            {
                                if (checkFeat == 0)
                                {
                                    res2 = myWebService.ISPAutoApproval(targetJob);
                                }
                                else
                                { res1 = "fail"; }
                            }
                        }
                        else
                            res2 = "fail";
                        
                    }
                }
            }
            //string res = myWebService.ISPAutoApproval(targetJob);
            if (res2 == "fail")
            {
                res = res1;
            }
            else
            {
                res = res2;
            }
            return Json(new
            {
                result = res
            }, JsonRequestBehavior.AllowGet);
        }

        // state: ASB, Status: COMPLETED

        [HttpPost]
        public ActionResult SendNotification(string subject, string message,
            string from, string recipient, string targetUser, string jobId, string schemeName)
        {
            string result = "";

            System.Diagnostics.Debug.WriteLine("sending...");
            System.Diagnostics.Debug.WriteLine(jobId);
            System.Diagnostics.Debug.WriteLine(schemeName);
            System.Diagnostics.Debug.WriteLine(subject);
            System.Diagnostics.Debug.WriteLine(message);
            System.Diagnostics.Debug.WriteLine(recipient);
            System.Diagnostics.Debug.WriteLine("targetUser: " + targetUser);
            System.Diagnostics.Debug.WriteLine("############");

            //string[] targetUsr = targetUser.Split('|');
            //for (int i = 0; i < targetUsr.Length - 1; i++)
            //{
            //    WebView.WebService._base myWebService;
            //    myWebService = new WebService._base();

            //    myWebService.AddApproval(schemeName,targetUsr[i], jobId);
            //}
            try
            {

                TcpClient tcpclient = new TcpClient(); // create an instance of TcpClient
                tcpclient.Connect("SMSGVS34.tm.my", 110); // HOST NAME POP SERVER and gmail uses port number 995 for POP 
                System.Net.Security.SslStream sslstream = new SslStream(tcpclient.GetStream()); // This is Secure Stream // opened the connection between client and POP Server
                sslstream.AuthenticateAsClient("SMSGVS34.tm.my"); // authenticate as client 
                //bool flag = sslstream.IsAuthenticated; // check flag 
                System.IO.StreamWriter sw = new StreamWriter(sslstream); // Asssigned the writer to stream
                System.IO.StreamReader reader = new StreamReader(sslstream); // Assigned reader to stream
                sw.WriteLine("USER neps"); // refer POP rfc command, there very few around 6-9 command
                sw.Flush(); // sent to server
                sw.WriteLine("PASS nepsadmin");
                sw.Flush();
                sw.WriteLine("RETR 1"); // this will retrive your first email 
                sw.Flush();
                sw.WriteLine("Quit "); // close the connection
                sw.Flush();

                string str = string.Empty;
                string strTemp = string.Empty;

                while ((strTemp = reader.ReadLine()) != null)
                {
                    if (strTemp == ".") // find the . character in line
                    {
                        break;
                    }
                    if (strTemp.IndexOf("-ERR") != -1)
                    {
                        break;
                    }
                    str += strTemp;
                }

                Response.Write(str);

                Response.Write("<BR>" + "Congratulation.. ....!!! You read your first gmail email ");
            }

            catch (Exception ex)
            {
                Response.Write(ex.Message);
            }

            string[] arr = recipient.Split('|');
            string emailList = "";
            string nameList = "";

            for (int i = 0; i < arr.Length - 1; i++)
            {
                string[] extractArr = arr[i].Split('#');

                emailList = emailList + extractArr[1] + ",";
                nameList = nameList + extractArr[0] + ",";
            }

            emailList = emailList.Substring(0, emailList.Length - 1);
            nameList = emailList.Substring(0, nameList.Length - 1);

            System.Diagnostics.Debug.WriteLine("EMAIL LIST: " + emailList);
            try
            {
                //MailMessage msg = new MailMessage();
                //msg.IsBodyHtml = true;
                //msg.From = new MailAddress("neps@tm.com.my", "NEPS");
                //msg.To.Add(emailList);
                //msg.Subject = subject;
                //msg.Body = message;
                //SmtpClient emailClient = new SmtpClient("smtp.tm.com.my");
                //System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("tmmaster\neps", "nepsadmin");
                //emailClient.UseDefaultCredentials = false;
                //emailClient.Port = 25;
                //emailClient.Credentials = SMTPUserInfo;
                //emailClient.Send(msg);

                result = "ok";
            }
            catch (Exception ex)
            {
                result = "fail" + "|" + ex.ToString();
                System.Diagnostics.Debug.WriteLine(ex.ToString());
            }

            return Json(new
            {
                result = result
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Handover(string id)
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            System.Diagnostics.Debug.WriteLine("handover aaa");
            ArrayList lst = new ArrayList();
            List<string> innerLst = new List<string>();
            innerLst.Add("btn-add");
            innerLst.Add("#AvailableUsers");
            innerLst.Add("#RequestedSelected");
            lst.Add(innerLst);

            innerLst = new List<string>();
            innerLst.Add("btn-add-fibre");
            innerLst.Add("#FibreAvailable");
            innerLst.Add("#FibreRequested");
            lst.Add(innerLst);

            ViewBag.addbutton = lst;
            string schemeType = "";
            string JobID = "";
            if (id != null)
            {
                using (Entities ctxData = new Entities())
                {
                    var Cari = (from p in ctxData.G3E_JOB
                                where p.G3E_IDENTIFIER == id
                                select p).Count();
                    if (Cari > 0)
                    {
                        var query = (from p in ctxData.G3E_JOB
                                     where p.G3E_IDENTIFIER == id
                                     select p).Single();

                        ViewBag.jobId = id;
                        JobID = id;
                        ViewBag.scheme_name = query.SCHEME_NAME;
                        schemeType = query.JOB_TYPE;
                        ViewBag.JobType = "OSP";
                    }
                    else
                    {
                        var query2 = (from p in ctxData.WV_ISP_JOB
                                      where p.G3E_IDENTIFIER == id
                                      select p).Single();

                        ViewBag.jobId = id;
                        JobID = id;
                        ViewBag.scheme_name = query2.SCHEME_NAME;
                        schemeType = query2.JOB_TYPE;
                        ViewBag.JobType = "ISP";
                    }
                }
            }

            string grpId; // check user group ---------------------------not done yet (04-May-2012)
            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_USER
                             where p.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || p.USERNAME.ToLower() == User.Identity.Name.ToLower()
                             select p).Single();
                grpId = query.GROUPID;
            }
            int checkApp = 0;
            string grpApprovalId = "";
            using (Entities ctxData = new Entities())
            {
                if (grpId == "8" && schemeType != "Fiber (Equip)" && schemeType != "Copper (Equip)" && schemeType != "HSBB (Equip)")
                {
                    checkApp = (from d in ctxData.WV_USER
                                join fx in ctxData.WV_USER_APPROVE on d.USERNAME equals fx.APPROVAL_USER
                                where d.GROUPID == "15" && fx.JOB_ID == id
                                orderby d.USER_ID
                                select d).Count();
                    grpApprovalId = "15";
                }
                else if (schemeType == "Civil" || schemeType == "Fiber E/Side" || schemeType == "Fiber (Equip)" || schemeType == "E/Side" || schemeType == "D/Side" || schemeType == "Copper (Equip)" || schemeType == "HSBB E/Side" || schemeType == "HSBB D/Side" || schemeType == "HSBB (Equip)")
                {
                    if (grpId == "4" || grpId == "5" || grpId == "6" || grpId == "7")
                    {
                        checkApp = (from d in ctxData.WV_USER
                                    join fx in ctxData.WV_USER_APPROVE on d.USERNAME equals fx.APPROVAL_USER
                                    where d.GROUPID == "13" && fx.JOB_ID == id
                                    orderby d.USER_ID
                                    select d).Count();
                        grpApprovalId = "13";
                    }
                }
                else if (schemeType == "Fiber Trunk" || schemeType == "Fiber Junction")
                {
                    if (grpId == "4" || grpId == "5" || grpId == "6" || grpId == "7")
                    {
                        checkApp = (from d in ctxData.WV_USER
                                    join fx in ctxData.WV_USER_APPROVE on d.USERNAME equals fx.APPROVAL_USER
                                    where d.GROUPID == "14" && fx.JOB_ID == id
                                    orderby d.USER_ID
                                    select d).Count();
                        grpApprovalId = "14";
                    }
                }
                else
                {
                    checkApp = (from d in ctxData.WV_USER
                                join fx in ctxData.WV_USER_APPROVE on d.USERNAME equals fx.APPROVAL_USER
                                where d.GROUPID == "10" && fx.JOB_ID == id
                                orderby d.USER_ID
                                select d).Count();
                    grpApprovalId = "10";
                }


                if (checkApp != 0)
                {
                    HandoverModel.ViewModel model = new HandoverModel.ViewModel { AvailableUsers = myWebService.GetHandoverUser(0, 1001, id, grpApprovalId), RequestedUsers = new List<HandoverModel.user>() };
                    return View(model);
                }
                else
                {
                    HandoverModel.ViewModel model = new HandoverModel.ViewModel { AvailableUsers = myWebService.GetHandoverUser(0, 100, id, grpApprovalId), RequestedUsers = new List<HandoverModel.user>() };
                    return View(model);
                }
            }
        }

        [HttpPost]
        public ActionResult Handover(string targetId, HandoverModel.ViewModel m)
        {
            System.Diagnostics.Debug.WriteLine(targetId);
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            int senarai_nama = 0;
            string appusername = "";
            string grpApprovalId = "";
            List<int> list = new List<int>();
            for (int i = 0; i < m.RequestedSelected.Length; i++)
            {
                //senarai_nama = m.RequestedUsers.ToString();
                list.Add(m.RequestedSelected[i]);
                senarai_nama = m.RequestedSelected[i];
                System.Diagnostics.Debug.WriteLine(senarai_nama);

                using (Entities ctxData = new Entities())
                {
                    var query = (from d in ctxData.WV_USER
                                 where d.USER_ID == senarai_nama
                                 select d).Single();

                    appusername = query.USERNAME;
                    grpApprovalId = query.GROUPID;
                }
                Tools tool = new Tools();
                bool success = true;
                string sqlCmd = "";
                string sqlCmd2 = "";
                string sqlCmd3 = "";
                DateTime thisDay = DateTime.Now;
                using (Entities ctxData = new Entities())
                {
                    var CariOSP = (from p in ctxData.G3E_JOB
                                   where p.G3E_IDENTIFIER == targetId
                                   select p).Count();

                    var CariISP = (from p in ctxData.WV_ISP_JOB
                                   where p.G3E_IDENTIFIER == targetId
                                   select p).Count();

                    sqlCmd = "INSERT INTO WV_USER_APPROVE (JOB_ID, REMARKS, STATUS, GLOBAL_STATUS, APPROVAL_USER, CREATED_AT) VALUES ( '" + targetId + "', 'PENDING APPROVAL', 'PENDING', 'INCOMPLETE','" + appusername + "', '" + thisDay.ToString("dd/MMMM/yyyy") + "')";
                    if (CariOSP > 0)
                    {
                        sqlCmd2 = "UPDATE G3E_JOB SET JOB_STATE= 'PENDING APP' WHERE G3E_IDENTIFIER ='" + targetId + "'";
                        using (Entities ctxData2 = new Entities())
                        {
                            tool.ExecuteSql(ctxData2, sqlCmd2);

                            var query = (from p in ctxData.G3E_JOB
                                         where p.G3E_IDENTIFIER == targetId
                                         select p).Single();

                            ViewBag.jobId = targetId;
                            ViewBag.scheme_name = query.SCHEME_NAME;
                            ViewBag.JobType = "OSP";
                        }
                    }
                    if (CariISP > 0)
                    {
                        sqlCmd3 = "UPDATE WV_ISP_JOB SET JOB_STATE= 'PENDING APP' WHERE G3E_IDENTIFIER ='" + targetId + "'";
                        using (Entities ctxData2 = new Entities())
                        {
                            tool.ExecuteSql(ctxData2, sqlCmd3);

                            var query = (from p in ctxData.WV_ISP_JOB
                                         where p.G3E_IDENTIFIER == targetId
                                         select p).Single();

                            ViewBag.jobId = targetId;
                            ViewBag.scheme_name = query.SCHEME_NAME;
                            ViewBag.JobType = "ISP";
                        }
                    }
                }
                using (Entities ctxData = new Entities())
                {
                    success = tool.ExecuteSql(ctxData, sqlCmd);
                }
                System.Diagnostics.Debug.WriteLine("ok X?" + success);
            }

            HandoverModel.ViewModel model = new HandoverModel.ViewModel { AvailableUsers = myWebService.GetHandoverUser(0, 1001, targetId, grpApprovalId), RequestedUsers = new List<HandoverModel.user>(), ListSend = list };
            return View(model);
        }

        public ActionResult FileList(string id) // get list file by Job No
        {
            //string path = AppDomain.CurrentDomain.BaseDirectory + "App_Data/uploads/job"+id+"/";
            string path = Server.MapPath("~/App_Data/uploads/job" + id + "/");
            DirectoryInfo salesFTPDirectory = null;
            FileInfo[] filesupload = null;
            var result = "";
            var checkJob = "";
            bool folderCreated = false;

            using (Entities ctxData = new Entities())
            {
                var queryOSP = (from p in ctxData.G3E_JOB
                                where p.G3E_IDENTIFIER == id
                                select p).Count();
                if (queryOSP > 0)
                {
                    var query = (from p in ctxData.G3E_JOB
                                 where p.G3E_IDENTIFIER == id
                                 select p).Single();
                    checkJob = query.SCHEME_NAME;
                }
                else
                {
                    var query2 = (from p in ctxData.WV_ISP_JOB
                                  where p.G3E_IDENTIFIER == id
                                  select p).Single();

                    checkJob = query2.SCHEME_NAME;
                }
                ViewBag.SchemeName = checkJob;

            }

            if (Directory.Exists(path)) //check for existing directory
            {
                string salesFTPPath = Server.MapPath("~/App_Data/uploads/job" + id + "/");
                salesFTPDirectory = new DirectoryInfo(salesFTPPath);
                filesupload = salesFTPDirectory.GetFiles();
                Session["pathId"] = id;

                filesupload = filesupload.OrderBy(f => f.Name).ToArray();
                ViewBag.AttachLink = id;

                return View(filesupload);
            }
            else
            {
                //create job directory
                string newPath = System.IO.Path.Combine(Server.MapPath("~/App_Data/uploads/job" + id ));
                System.IO.Directory.CreateDirectory(newPath);
                System.Diagnostics.Debug.WriteLine(newPath);

                folderCreated = true;
                Session["pathId"] = id;
                ViewBag.AttachLink = id;
                return View();
            }
        }

        public ActionResult FileListRedmark(string id) // get list file by Job No
        {
            //string path = AppDomain.CurrentDomain.BaseDirectory + "App_Data/uploads/job"+id+"/";
            string path = Server.MapPath("~/App_Data/uploads/job" + id + "/");
            DirectoryInfo salesFTPDirectory = null;
            FileInfo[] filesupload = null;
            var result = "";
            string grpId = "";
            bool folderCreated = false;

            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_NONNETWORK_JOB
                             where p.G3E_IDENTIFIER == id
                             select p).Single();

                ViewBag.STATUSSEMASA = query.JOB_STATE;
                ViewBag.DESCRIPTION = query.G3E_DESCRIPTION;
                ViewBag.REMARKS = query.SCH_DESC1;

                var query2 = (from p in ctxData.WV_USER
                              where p.USERNAME == User.Identity.Name.ToUpper()
                              select p).Single();
                grpId = query2.GROUPID;
            }
            List<SelectListItem> list1 = new List<SelectListItem>();
            if (grpId == "2" || grpId == "16" || grpId == "17")
            {
                list1.Add(new SelectListItem() { Text = ViewBag.STATUSSEMASA, Value = ViewBag.STATUSSEMASA, Selected = true });
                list1.Add(new SelectListItem() { Text = "REJECT", Value = "REJECT" });
                list1.Add(new SelectListItem() { Text = "ACCEPTED", Value = "ACCEPTED" });
                list1.Add(new SelectListItem() { Text = "COMPLETED", Value = "COMPLETED" });
            }
            else if (grpId == "9")
            {
                list1.Add(new SelectListItem() { Text = ViewBag.STATUSSEMASA, Value = ViewBag.STATUSSEMASA, Selected = true });
                list1.Add(new SelectListItem() { Text = "RESENT REDMARK", Value = "PENDING" });
            }

            ViewBag.UPDATESTATUS = list1;

            if (Directory.Exists(path)) //check for existing directory
            {
                string salesFTPPath = Server.MapPath("~/App_Data/uploads/job" + id + "/");
                salesFTPDirectory = new DirectoryInfo(salesFTPPath);
                filesupload = salesFTPDirectory.GetFiles();
                Session["pathId"] = id;

                filesupload = filesupload.OrderBy(f => f.Name).ToArray();
                ViewBag.AttachLink = id;

                return View(filesupload);
            }
            else
            {
                //create job directory
                string newPath = System.IO.Path.Combine(Server.MapPath("~/App_Data/uploads"), "job" + id);
                System.IO.Directory.CreateDirectory(newPath);
                System.Diagnostics.Debug.WriteLine(newPath);

                folderCreated = true;
                Session["pathId"] = id;
                ViewBag.AttachLink = id;
                return View();
            }
        }

        public ActionResult ViewHandover(string id, int? page) // get list file by Job No
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            WebService._base.OSPJob jobs = new WebService._base.OSPJob();

            jobs = myWebService.GetHandoverJob(id, 0, 100);

            string input = "\\\\adsvr";
            string output = String.Format("http:{0}", input.Replace("\\d$\\x\\y", String.Empty).Replace("\\", "/"));

            ViewBag.output = output;
            ViewBag.SchemeName = id;
            ViewBag.searchKey = id;

            int pageSize = 5;
            int pageNumber = (page ?? 1);
            return View(jobs.JobList.ToPagedList(pageNumber, pageSize));
        }

        public ActionResult ViewHandoverISP(string id, int? page) // get list file by Job No
        {
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            WebService._base.OSPJob jobs = new WebService._base.OSPJob();

            jobs = myWebService.GetHandoverISP(id, 0, 100);

            string input = "\\\\adsvr";
            string output = String.Format("http:{0}", input.Replace("\\d$\\x\\y", String.Empty).Replace("\\", "/"));

            ViewBag.output = output;
            ViewBag.SchemeName = id;
            ViewBag.searchKey = id;

            int pageSize = 5;
            int pageNumber = (page ?? 1);
            return View(jobs.JobList.ToPagedList(pageNumber, pageSize));
        }

        public ActionResult Download(string id, string filename) //download file
        {
            string file = Server.MapPath("~/App_Data/uploads/job" + id + "/");
            var filePath = Path.Combine(file, filename);

            return File(filePath, "application/octet-stream", filename);
        }

        [HttpPost]
        public ActionResult NewAttachment(HttpPostedFileBase files) // add file by folder
        {

            string extension = Path.GetExtension(files.FileName); // get extension file
            string schemeName = "";
            //string result = "";
            //WebView.WebService._base myWebService;
            //myWebService = new WebService._base();

            //bool selected = false;
            if (files != null && files.ContentLength > 0) // filter file
            {
                var fileName = Path.GetFileName(files.FileName);
                var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + Session["pathId"] + "/"), fileName);
                string scheme = Session["pathId"].ToString();
                if (extension == ".xml")
                {
                    try
                    {
                        DateTime thisDay = DateTime.Now;

                        using (Entities ctxData = new Entities())
                        {
                            var query = (from p in ctxData.G3E_JOB
                                         where p.G3E_IDENTIFIER == scheme
                                         select p).Single();

                            schemeName = query.SCHEME_NAME;
                        }
                        if (schemeName == null)
                        {
                            using (Entities ctxData = new Entities())
                            {
                                var query = (from p in ctxData.WV_ISP_JOB
                                             where p.G3E_IDENTIFIER == scheme
                                             select p).Single();

                                schemeName = query.SCHEME_NAME;
                            }
                        }

                        var path2 = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + Session["pathId"] + "/" + schemeName + thisDay.ToString("MMdd") + "-" + thisDay.ToString("HH") + "" + thisDay.ToString("mm") + extension));
                        //var path3 = EXEC_NAME + "_" + CABINET + "_" + thisDay.ToString("yyyyMMdd") + "_" + thisDay.ToString("HH") + "" + thisDay.ToString("mm") + extension;

                        //result = myWebService.insertXml(path3, scheme, User.Identity.Name);

                        files.SaveAs(path2);

                        //StreamReader fileStream = new StreamReader(path);
                        //string fileContent = fileStream.ReadToEnd();
                        //fileStream.Close();

                        //StreamWriter ansiWriter = new StreamWriter(path, false);
                        //ansiWriter.Write(fileContent, Encoding.Default);
                        //ansiWriter.Close();

                        //System.Diagnostics.Debug.WriteLine("Blah");

                        //result = myWebService.insertXml(path, scheme);
                    }
                    catch (Exception ex)
                    {
                        // Log error.
                        System.Diagnostics.Debug.WriteLine(ex.ToString());
                    }

                }
                else
                {
                    files.SaveAs(path);
                }

            }

            return RedirectToAction("FileList/" + Session["pathId"]);
        }

        [HttpPost]
        public ActionResult NewAttachmentRedmark(HttpPostedFileBase files) // add file by folder
        {
            string extension = Path.GetExtension(files.FileName); // get extension file
            string schemeName = "";

            bool selected = false;
            if (files != null && files.ContentLength > 0) // filter file
            {
                var fileName = Path.GetFileName(files.FileName);
                var path = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + Session["pathId"] + "/"), fileName);
                string scheme = Session["pathId"].ToString();
                if (extension == ".xml")
                {
                    try
                    {
                        DateTime thisDay = DateTime.Now;

                        using (Entities ctxData = new Entities())
                        {
                            var query = (from p in ctxData.WV_NONNETWORK_JOB
                                         where p.G3E_IDENTIFIER == scheme
                                         select p).Single();

                            schemeName = query.SCHEME_NAME;
                        }

                        System.Diagnostics.Debug.WriteLine(schemeName);
                        schemeName = schemeName.Replace("/", "");
                        schemeName = schemeName.Replace("*", "");
                        var path2 = Path.Combine(Server.MapPath("~/App_Data/uploads/job" + Session["pathId"] + "/" + schemeName + "-" + thisDay.ToString("HH") + "" + thisDay.ToString("mm") + extension));
                        files.SaveAs(path2);
                    }
                    catch (Exception ex)
                    {
                        System.Diagnostics.Debug.WriteLine(ex.ToString());
                    }
                }
                else
                {
                    files.SaveAs(path);
                }

            }

            return RedirectToAction("FileListRedmark/" + Session["pathId"]);
        }

        [HttpPost]
        public ActionResult UpdatedStatusRedmark(String id, String status, String description, String remarks) // add file by folder
        {

            System.Diagnostics.Debug.WriteLine(status);
            string success = "";
            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            success = myWebService.UpdateStatusRedmark(id, status, description, remarks);

            string ownerUsername = "";
            string ownerEmail = "";
            string schemeName = "";
            string jdescription = "";
            string jremarks = "";
            string andEmail = "";
            string andTel = "";
            string namaFailUpload = "";
            string EmailListStr = "";

            using (Entities ctxData = new Entities())
            {
                var query = (from d in ctxData.WV_USER
                             join fx in ctxData.WV_NONNETWORK_JOB on d.USERNAME equals fx.G3E_OWNER
                             where fx.G3E_IDENTIFIER == id
                             select d).Single();
                ownerUsername = query.USERNAME;
                ownerEmail = query.EMAIL;

                var queryJob = (from d in ctxData.WV_NONNETWORK_JOB
                                where d.G3E_IDENTIFIER == id
                                select d).Single();
                schemeName = queryJob.SCHEME_NAME;
                jdescription = queryJob.G3E_DESCRIPTION;
                jremarks = queryJob.SCH_DESC1;

                var queryAND = (from d in ctxData.WV_USER
                                where d.USERNAME.ToUpper() == User.Identity.Name.ToUpper() || d.USERNAME.ToLower() == User.Identity.Name.ToLower()
                                select d).Single();

                andEmail = queryAND.EMAIL;
                andTel = queryAND.NO_TEL;

                var querylist = (from up in ctxData.WV_USER
                                 where up.GROUPID == "16" && up.PTT_STATE.Trim() == queryAND.PTT_STATE.Trim()
                                 select up);

                int i = 0;
                foreach (var emailAND in querylist)
                {
                    if (i++ > 0)
                        EmailListStr += ",";
                    EmailListStr += emailAND.EMAIL;
                }

            }

            string salesFTPPath = Server.MapPath("~/App_Data/uploads/job" + id + "/");
            DirectoryInfo namaFail = new DirectoryInfo(salesFTPPath);
            FileInfo[] fi = namaFail.GetFiles("*.xml");
            foreach (FileInfo namaFailRedMark in fi)
            {
                namaFailUpload = namaFailRedMark.Name;
                System.Diagnostics.Debug.WriteLine(namaFailRedMark.Name);
            }

            DateTime thisDay = DateTime.Now;
            if (status == "REJECT")
            {
                try
                {
                    MailMessage msg = new MailMessage();
                    msg.IsBodyHtml = true;
                    msg.From = new MailAddress("neps@tm.com.my", "NEPS");
                    msg.To.Add(ownerEmail);
                    msg.Subject = "Rejected Redmark File for Scheme " + schemeName;
                    msg.Body = "<h1>FILES DETAILS</h1>SCHEME NAME	: " + schemeName + "<br/><br/>DESCRIPTION : " + jdescription + "<br/><br/>REMARKS : " + jremarks + " <br/><br/>REDMARK FILE NAME: " + namaFailUpload;
                    msg.Body += "<br/><br/> <h1>AND DETAILS</h1> <br>";
                    msg.Body += "AND ID : " + User.Identity.Name + "<br/><br/>AND EMAIL	: " + andEmail + "<br/><br/>AND PHONE NUMBER: " + andTel + "<br/><br/>Please log in to <a href='http://10.41.101.168/'>NEPS WEBVIEW  </a>to download the file.";
                    msg.IsBodyHtml = true;
                    SmtpClient emailClient = new SmtpClient("smtp.tm.com.my");
                    emailClient.UseDefaultCredentials = true;
                    emailClient.Port = 25;
                    emailClient.EnableSsl = false;
                    emailClient.Send(msg);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine(ex.ToString());
                }
            }
            if (status == "PENDING")
            {
                try
                {
                    MailMessage msg = new MailMessage();
                    msg.IsBodyHtml = true;
                    msg.From = new MailAddress("neps@tm.com.my", "NEPS");
                    msg.To.Add(EmailListStr);
                    msg.Subject = "Resent Redmark File for Scheme " + schemeName + "Rejected";
                    msg.Body = "<h1>FILES DETAILS</h1>SCHEME NAME	: " + schemeName + "<br/><br/>DESCRIPTION : " + jdescription + "<br/><br/>REMARKS : " + jremarks + " <br/><br/>REDMARK FILE NAME: " + namaFailUpload;
                    msg.Body += "<br/><br/> <h1>RNO DETAILS</h1> <br>";
                    msg.Body += "RNO ID : " + User.Identity.Name + "<br/><br/>RNO EMAIL	: " + andEmail + "<br/><br/>RNO PHONE NUMBER: " + andTel + "<br/><br/>.Please log in to <a href='http://10.41.101.168/'>NEPS WEBVIEW  </a>to download the file.";
                    msg.IsBodyHtml = true;
                    SmtpClient emailClient = new SmtpClient("smtp.tm.com.my");
                    emailClient.UseDefaultCredentials = true;
                    emailClient.Port = 25;
                    emailClient.EnableSsl = false;
                    emailClient.Send(msg);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine(ex.ToString());
                }
            }
            if (status == "COMPLETED")
            {
                try
                {
                    MailMessage msg = new MailMessage();
                    msg.IsBodyHtml = true;
                    msg.From = new MailAddress("neps@tm.com.my", "NEPS");
                    msg.To.Add(ownerEmail);
                    msg.Subject = "Redmark Job Completed for Scheme " + schemeName;
                    msg.Body = "<h1>FILES DETAILS</h1>SCHEME NAME	: " + schemeName + "<br/><br/>DESCRIPTION : " + jdescription + " <br/><br/>REDMARK FILE NAME: " + namaFailUpload;
                    msg.Body += "<br/><br/> <h1>AND DETAILS</h1> <br>";
                    msg.Body += "AND ID : " + User.Identity.Name + "<br/><br/>AND EMAIL	: " + andEmail + "<br/><br/>AND PHONE NUMBER: " + andTel + "<br/><br/>Job is succesfully updated.";
                    msg.IsBodyHtml = true;
                    SmtpClient emailClient = new SmtpClient("smtp.tm.com.my");
                    emailClient.UseDefaultCredentials = true;
                    emailClient.Port = 25;
                    emailClient.EnableSsl = false;
                    emailClient.Send(msg);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine(ex.ToString());
                }
            }
            return Json(new
            {
                Success = success
            });
        }

        public ActionResult DeleteFile(string id) //delete file
        {
            FileInfo fileID = new FileInfo(Server.MapPath("~/App_Data/uploads/job" + Session["pathId"] + "/" + id));
            fileID.Delete();
            return RedirectToAction("FileList/" + Session["pathId"]);
        }

        public ActionResult DeleteFileRNO(string id) //delete file
        {
            FileInfo fileID = new FileInfo(Server.MapPath("~/App_Data/uploads/job" + Session["pathId"] + "/" + id));
            fileID.Delete();
            return RedirectToAction("FileListRedmark/" + Session["pathId"]);
        }

        public ActionResult testLoad() //WSDL file
        {
            return View();
        }

        [HttpPost]
        public ActionResult testWSDL() // add file by folder
        {
            //using (Entities_NEPS ctxData = new Entities_NEPS())
            //{
            //    var CariOSP = (from p in ctxData.GC_NETELEM 
            //                   join fx in ctxData.GC_FDP on fx.G3E_FNO = p.G3E_FNO
            //                   where p.JOB_ID == targetJob
            //                   select p).Count();
            //}
            NEPSLoadEquipmentService osp = new NEPSLoadEquipmentService();
            
            //Error errorObj = null;
            string test = "NEPSLoadEquipment";
            NEPSLoadEquipmentRequestSetEquip SetEquip = new NEPSLoadEquipmentRequestSetEquip();
            SetEquip.EquipID = "EPEHWWMU15";
            SetEquip.EquipCat = "EPE";
            SetEquip.EquipVend = "HUAWEI";
            SetEquip.EquipModel = "NE40E-8";
            SetEquip.Region = "CENTRAL";
            SetEquip.State = "SELANGOR";
            SetEquip.ExchDesc = "WANGSA MAJU";
            SetEquip.Site = "WMU";
            //SetEquip.MngtIP = "10.26.1.22";
            SetEquip.TempName = "EPE HUAWEI NE40E-8 19 SLOTS CONTAINER";
            
            NEPSLoadEquipmentRequestSetEquipUDA SetEquipUDA = new NEPSLoadEquipmentRequestSetEquipUDA();
            SetEquipUDA.Tagging = "BAU";
            SetEquipUDA.OutdoorIndoorTagging = "INDOOR";
            SetEquipUDA.DpExtensionFlag = "NULL";
            SetEquipUDA.NetworkName = "EPEHWWMU15";

            NEPSLoadEquipmentResponseListEquipUDA ListEquipUDA = null;
            NEPSLoadEquipmentResponseCallstatus CallStatus = null;

            try
            {
                osp.NEPSLoadEquipment(test, SetEquip, SetEquipUDA, out ListEquipUDA, out CallStatus);
                System.Diagnostics.Debug.WriteLine("aaaa");
                //System.Diagnostics.Debug.WriteLine(test + "|" + SetEquip.EquipID + "|" + SetEquipUDA.Tagging + "|" + ListEquipUDA.Tagging + "|" + CallStatus.Status);
                System.Diagnostics.Debug.WriteLine(CallStatus.Status);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("BBBB");
                System.Diagnostics.Debug.WriteLine(ex.Message.ToString());
                System.Diagnostics.Debug.WriteLine("CCCC");
            }
            //NEPSLoadEquipmentResponseCallstatus success = new NEPSLoadEquipmentResponseCallstatus();
            //if (success.EquipCat == null)
            //{
                
            //}
            //else
            //{
            //    System.Diagnostics.Debug.WriteLine("DDDD");
            //}
            return Json(new
            {
                //Success = success
            });
        }
        public ActionResult ISP_3D() // get list file by Job No
        {
            List<SelectListItem> list1 = new List<SelectListItem>();
            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.WV_EXC_MAST
                            orderby p.EXC_NAME ascending
                            select new { Text = p.EXC_NAME, Value = p.EXC_ABB };

                foreach (var a in query)
                {
                    list1.Add(new SelectListItem() { Text = a.Text, Value = a.Value.ToString() });
                }

                ViewBag.excabb = list1;
            }
            return View();
        }

        public ActionResult IOSPLink(string tjOb)
        {
            System.Diagnostics.Debug.WriteLine("get lalaaaa" + tjOb );

            //WebView.WebService._base myWebService;
            //myWebService = new WebService._base();

            //myWebService.linkIOSP(tjOb,tGTECH);

            string ID ="";

            using (Entities_NRM ctxNRM = new Entities_NRM())
            {
                var query = (from a in ctxNRM.PROJECTs
                             where a.NAME.Contains(tjOb)
                             select a).Single();
              
                 return Json(new
                 {
                    ID = query.ID.ToString(),
                    visionael = visionael
                 }, JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult CheckJob(string id) {
           
            using (Entities ctxNeps = new Entities()){
                System.Diagnostics.Debug.WriteLine("ID:"+ id + " check job");
                int fnoMin = 9500;
                int fnoMSan = 9100;
                int fnoRT = 9600;
                int row = 0;
                string outputMinimux = "";

                var queryMinimux = (from a in ctxNeps.GC_NETELEM
                                    join b in ctxNeps.GC_MINIMUX on a.G3E_FID equals b.G3E_FID
                                    join c in ctxNeps.GC_ADDRESS on a.G3E_FID equals c.G3E_FID
                                    join d in ctxNeps.WV_EXC_MAST on a.EXC_ABB.Trim() equals d.EXC_ABB.Trim()
                                    where a.JOB_ID.Contains(id) &&  a.G3E_FNO == fnoMin 
                                    select new { LOCTTNAME = a.EXC_ABB + "_" + b.MUX_CODE , 
                                                a.JOB_ID ,
                                                INDEX = b.MUX_CODE,
                                                EQUPMODEL = b.MODEL,
                                                MONRABB = b.MANUFACTURER,
                                                STATUS = "INSERVICE"});


                var queryMSAN = (from a in ctxNeps.GC_NETELEM
                                 join b in ctxNeps.GC_MSAN on a.G3E_FID equals b.G3E_FID
                                 join c in ctxNeps.GC_ADDRESS on a.G3E_FID equals c.G3E_FID
                                 join d in ctxNeps.WV_EXC_MAST on a.EXC_ABB.Trim() equals d.EXC_ABB.Trim()
                                 where a.JOB_ID.Contains(id) && a.G3E_FNO == fnoMSan
                                 select new { LOCNTTNAMEMSAN = a.EXC_ABB + "_" + b.RT_CODE,
                                              a.JOB_ID ,
                                              INDEX = b.RT_CODE ,
                                              EQUPMODEL = b.MODEL ,
                                              MONRABB = b.MANUFACTURER ,
                                              STATUS = "PLANNED"});

                var queryRT = (from a in ctxNeps.GC_NETELEM
                               join b in ctxNeps.GC_RT on a.G3E_FID equals b.G3E_FID
                               join c in ctxNeps.GC_ADDRESS on a.G3E_FID equals c.G3E_FID
                               join d in ctxNeps.WV_EXC_MAST on a.EXC_ABB.Trim() equals d.EXC_ABB.Trim()
                               where a.JOB_ID.Contains(id) && a.G3E_FNO == fnoRT
                               select new { LOCNTTNAMERT = a.EXC_ABB + "_" + b.RT_CODE,
                                            a.JOB_ID,
                                            INDEXS = b.RT_CODE,
                                            EQUPMODEL = b.MODEL, 
                                            MONRABB = b.MANUFACTURER,
                                            STATUS = "PLANNED"});

                if (queryMinimux.Count() > 0){
                    
                    System.Diagnostics.Debug.WriteLine("Minimux have data");
                    foreach (var a in queryMinimux) {
                        row = row + 1;
                        outputMinimux = row + "||" + a.LOCTTNAME + "|" + a.INDEX + "|" + a.EQUPMODEL + "|" + a.MONRABB + "|" + a.STATUS;
                        System.Diagnostics.Debug.WriteLine(outputMinimux);
                    }
                }
                else if (queryMSAN.Count() > 0) {

                    System.Diagnostics.Debug.WriteLine("MSAN have data");
                    foreach (var a in queryMSAN) {
                        row = row + 1;
                        outputMinimux = row + "||" + a.LOCNTTNAMEMSAN + "|" + a.INDEX + "|" + a.EQUPMODEL + "|" + a.MONRABB + "|" + a.STATUS;
                    }
                }
                else if (queryRT.Count() > 0){
                    
                    System.Diagnostics.Debug.WriteLine("RT have data");
                    foreach (var a in queryRT){
                        row = row + 1;
                        outputMinimux = row + "||" + a.LOCNTTNAMERT + "|" + a.INDEXS + "|" + a.EQUPMODEL + "|" + a.MONRABB + "|" + a.STATUS;
                    }
                }
                else {

                    System.Diagnostics.Debug.WriteLine(" tade data");
                    outputMinimux = "";
                }


                int Fno = 7000;
                int out_fnos = 10300;

                /*CREATE CABLE SHEATH(COOPER ESIDE)*/
                var queryC = (from a in ctxNeps.GC_NETELEM
                              join b in ctxNeps.GC_CBL on a.G3E_FID equals b.G3E_FID
                              join c in ctxNeps.GC_NR_CONNECT on a.G3E_FID equals c.G3E_FID
                              join d in ctxNeps.GC_ITFACE on c.OUT_FID equals d.G3E_FID
                              where a.JOB_ID.Contains(id) && a.G3E_FNO == Fno && b.CABLE_CLASS == "E-CABLE" && c.G3E_FNO == Fno && c.OUT_FNO == out_fnos
                              select new { CABS_NAME = a.EXC_ABB + "_" + b.RT_CODE ,
                                           CSPT_PROD_NAME = a.MIN_MATERIAL ,
                                           MIN_NUMBER = 1,
                                           MAX_NUMBER = b.TOTAL_SIZE,
                                           LOCATION_A = a.EXC_ABB + "_" + b.RT_CODE,
                                           LOCATION_B = a.EXC_ABB + "_" + b.RT_CODE });


                /*CREATE CABLE SHEATH(COOPER DSIDE)*/
                var queryCD = (from a in ctxNeps.GC_NETELEM
                               join b in ctxNeps.GC_CBL on a.G3E_FID equals b.G3E_FID
                               join c in ctxNeps.GC_NR_CONNECT on a.G3E_FID equals c.G3E_FID
                               join d in ctxNeps.GC_DP on c.OUT_FID equals d.G3E_FID
                               where a.JOB_ID.Contains(id) && a.G3E_FNO == Fno && b.CABLE_CLASS == "D-CABLE" && c.G3E_FNO == Fno && c.OUT_FNO == out_fnos
                               select new { CABS_NAME = a.EXC_ABB + "_" + b.RT_CODE, 
                                            CSPT_PROD_NAME = a.MIN_MATERIAL,
                                            MIN_MATERIAL = 1,
                                            MAX_NUMBER = b.TOTAL_SIZE,
                                            LOCATION_A = a.EXC_ABB + "_" + b.RT_CODE,
                                            LOCATION_B = a.EXC_ABB + "_" + b.RT_CODE});


                /*CREATE CABLE SHEATH (FIBER ESIDE)*/
                var queryFE = (from a in ctxNeps.GC_NETELEM
                               join b in ctxNeps.GC_FCBL on a.G3E_FID equals b.G3E_FID
                               where a.JOB_ID.Contains(id) && a.G3E_FNO == 7200
                               select new {});

                /*SELECT A.JOB_ID, A.EXC_ABB, A.G3E_FID, A.G3E_FNO, NEPS.lookup_fno(A.G3E_FNO) FNO_TYPE, 
B.CABLE_CODE, B.CABLE_TYPE, 'INSERVICE' STATUS, '' CABLE_CLASS, '' LO_PR, '' HI_PR, B.CABLE_SIZE, '' SOURCE_ID, '' TERMINATION_ID, B.MANUFACTURER 
FROM NEPS.GC_NETELEM A 
JOIN NEPS.GC_FCBL B ON B.G3E_FID=A.G3E_FID 
WHERE A.G3E_FNO='7200' and a.job_id = 'YP-D/SIDE-2589-2013'  */


                return Json(new
                {
                    outputMinimux = outputMinimux,
                }, JsonRequestBehavior.AllowGet);
            }
        }
    }
}
