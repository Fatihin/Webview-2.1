using System;
using System.Collections.Generic;
using System.Linq;
using WebView.Library;
using System.Net;
using System.Net.Mail;
using System.Web.Mvc;
using System.Configuration;

namespace WebView.Controllers
{

    public class VIS_NRMController : Controller
    {
       
        // GET: /PUFRM/
        private string connString = ConfigurationManager.AppSettings.Get("connString");

        public ActionResult Index()
        {
            return View();
        }

        public ActionResult NewPath(string searchKey, int? page)
        {
            using (Entities ctxData = new Entities())
            {
                //filter PTT
                List<SelectListItem> list = new List<SelectListItem>();
                var queryEXC = from p in ctxData.WV_EXC_MAST
                               select new { Text = p.PTT_ID, Value = p.PTT_ID };

                list.Add(new SelectListItem() { Text = "", Value = "Select" });
                foreach (var a in queryEXC.Distinct().OrderBy(it => it.Value))
                {
                    if (a.Value != null)
                        list.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                }
                ViewBag.PTT = list;

                List<SelectListItem> list1 = new List<SelectListItem>();
                var querySCHEME = from p in ctxData.WV_ISP_JOB
                                  where (p.G3E_OWNER.ToUpper() == User.Identity.Name.ToUpper() || p.G3E_OWNER.ToLower() == User.Identity.Name.ToLower()) && (p.JOB_TYPE == "METROE" || p.JOB_TYPE == "IPCORE")
                                  select new { Text = p.G3E_IDENTIFIER, Value = p.G3E_IDENTIFIER };

                list1.Add(new SelectListItem() { Text = "", Value = "Select" });
                foreach (var a in querySCHEME.Distinct().OrderBy(it => it.Value))
                {
                    if (a.Value != null)
                        list1.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                }

                ViewBag.job = list1;

                List<SelectListItem> list2 = new List<SelectListItem>();
                list2.Add(new SelectListItem() { Text = "", Value = "Select" });
                ViewBag.pathType = list2;
                ViewBag.equipA = list2;
                ViewBag.equipZ = list2;
                ViewBag.cardA = list2;
                ViewBag.cardZ = list2;
                ViewBag.exc = list2;

            }
            return View();
        }

        [HttpPost]
        public ActionResult updatePath(string job) // Update equip
        {
            string[] jobSplit = job.Split('-');
            string jobType = jobSplit[1];
            string listData = "";
            string listJob = "";
            using (Entities ctxData = new Entities())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                if (jobType == "METROE")
                {
                    var queryPATH = from p in ctxData.WV_PATH_MATRIX
                                    where (p.PATH_TYPE == "INTERCONNECT" || p.PATH_TYPE == "METRO ETHERNET")
                                    select new { p.PATH_TYPE, p.A_TYPE, p.Z_TYPE};

                    foreach (var a in queryPATH.Distinct().OrderBy(it => it.PATH_TYPE))
                    {
                        listData = listData + a.PATH_TYPE + ":" + a.A_TYPE + ":" + a.Z_TYPE + ":" + "|";
                    }
                }
                else if (jobType == "IPCORE")
                {
                    var queryPATH = from p in ctxData.WV_PATH_MATRIX
                                    where (p.PATH_TYPE == "INTERCONNECT" || p.PATH_TYPE == "IPCORE" || p.PATH_TYPE == "METRO ETHERNET")
                                    select new { p.PATH_TYPE, p.A_TYPE, p.Z_TYPE };

                    foreach (var a in queryPATH.Distinct().OrderBy(it => it.PATH_TYPE))
                    {
                        listData = listData + a.PATH_TYPE + ":" + a.A_TYPE + ":" + a.Z_TYPE + ":" + "|";
                    }
                }
                else if (jobType.Contains("HSBB"))
                {
                    var queryPATH = from p in ctxData.WV_PATH_MATRIX
                                    where p.PATH_TYPE.Trim() == "BEARER FDC - OLT" 
                                    select new { p.PATH_TYPE, p.A_TYPE, p.Z_TYPE };

                    foreach (var a in queryPATH.Distinct().OrderBy(it => it.PATH_TYPE))
                    {
                        listData = listData + a.PATH_TYPE + ":" + a.A_TYPE + ":" + a.Z_TYPE + ":" + "|";
                    }
                }

                var queryJOB = from p in ctxData.WV_LOAD_PATH
                               where p.JOBID == job
                               select new { p.ANAME, p.ATYPE, p.ASITE, p.ASLOT, p.ACARD , p.APORT, p.ZNAME, p.ZTYPE,  p.ZSITE, p.ZSLOT, p.ZCARD , p.ZPORT, p.PRIMARYSECONDARY, p.PATHBANDWIDTH, p.ID };

                foreach (var a in queryJOB.OrderBy(it => it.ID))
                {
                    listJob = listJob + a.ANAME + ":" + a.ATYPE + ":" + a.ASITE + ":" + a.ASLOT + ":" + a.ACARD + ":" + a.APORT + ":" + a.ZNAME + ":" + a.ZTYPE + ":" + a.ZSITE + ":" + a.ZSLOT + ":" + a.ZCARD + ":" + a.ZPORT + ":" + a.PRIMARYSECONDARY + ":" + a.PATHBANDWIDTH + ":" + a.ID + ":" + "|";
                }
                if (queryJOB.Count() == 0)
                {

                    var queryJOBFTTH = from p in ctxData.WV_LOAD_PATH_CONSUMER
                                       where p.JOBID == job
                                       select new { p.ANAME, p.ATYPE, p.ASITE, p.ACARD3, p.APORT3, p.ZNAME, p.ZTYPE, p.ZSITE, p.ZCARD, p.ZPORT, p.DPNAME, p.ID };

                    foreach (var a in queryJOBFTTH.OrderBy(it => it.ID))
                    {
                        listJob = listJob + a.ANAME + ":" + a.ATYPE + ":" + a.ASITE + ":" + a.ACARD3 + ":" + a.APORT3 + ":" + a.ZNAME + ":" + a.ZTYPE + ":" + a.ZSITE + ":" + a.ZCARD + ":" + a.ZPORT + ":" + a.DPNAME + ":" + a.ID + ":" + "|";
                    }
                }

            }
          
            return Json(new
            {
                Success = true,
                listData = listData,
                listJob = listJob
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult updateEquipA(string job, string pathType, string ZEXC) // Update card
        {
            string[] jobSplit = job.Split('-');
            string exc = jobSplit[0];
            string[] pathTypeSplit1 = pathType.Split('-');
            string pathType1 = pathTypeSplit1[0];
            string pathType2 = pathTypeSplit1[1];

            string listData1 = "";
            string listData2 = "";
            string condition1 = pathType1;
            string condition2 = pathType1;
            string condition3 = pathType2;
            string condition4 = pathType2;
            if (pathType1 == "BRAS") 
            {
                condition1 = "ERX";
                condition2 = "BRS";
            }
            if (pathType2 == "BRAS")
            {
                condition3 = "ERX";
                condition4 = "BRS";
            }
            System.Diagnostics.Debug.WriteLine("exc Type : " + exc);
            System.Diagnostics.Debug.WriteLine("Path Type : "+ condition1);
            System.Diagnostics.Debug.WriteLine("ZEXC Type : " + ZEXC);
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list1 = new List<SelectListItem>();
                var queryEquipA = from p in ctxData.VFDITEMs
                                    join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                                    join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                    join fxx in ctxData.VFDITEMPLACEMENTs on e.ID equals fxx.CONTAINER_ID
                                    where e.AUTODISPLAYNAME.Contains(exc) && e.DTYPE == "Rack" && 
                                    (p.AUTODISPLAYNAME.Contains(condition1) || p.AUTODISPLAYNAME.Contains(condition2))
                                    select new { p.AUTODISPLAYNAME, p.ID };

                foreach (var a in queryEquipA.Distinct().OrderBy(it => it.AUTODISPLAYNAME))
                {
                    listData1 = listData1 + a.AUTODISPLAYNAME + ":" + a.ID + "|";
                }

                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryEquipZ = from p in ctxData.VFDITEMs
                                    join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                                    join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                    join fxx in ctxData.VFDITEMPLACEMENTs on e.ID equals fxx.CONTAINER_ID
                                    where e.AUTODISPLAYNAME.Contains(ZEXC) && e.DTYPE == "Rack" && 
                                    (p.AUTODISPLAYNAME.Contains(condition3) || p.AUTODISPLAYNAME.Contains(condition4))
                                    select new { p.AUTODISPLAYNAME, p.ID };

                foreach (var a in queryEquipZ.Distinct().OrderBy(it => it.AUTODISPLAYNAME))
                {
                    listData2 = listData2 + a.AUTODISPLAYNAME + ":" + a.ID + "|";
                }

            }

            return Json(new
            {
                Success = true,
                listData = listData1,
                listData2 = listData2
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult updateCardA(int equip) // Update port
        {
            string listData = "";
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryParent = from p in ctxData.VFDITEMs
                                join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                                //join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                //join fxx in ctxData.VFDITEMPLACEMENTs on e.ID equals fxx.ITEM_ID
                                where fx.CONTAINER_ID == equip
                                select new { p.AUTODISPLAYNAME, p.ID };

                foreach (var a in queryParent.Distinct().OrderBy(it => it.AUTODISPLAYNAME))
                {
                    listData = listData + a.AUTODISPLAYNAME + ":" + a.ID + "|";
                }
                //sub card
                var queryPATH = from p in ctxData.VFDITEMs
                                join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                                join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                join fxx in ctxData.VFDITEMPLACEMENTs on e.ID equals fxx.ITEM_ID
                                where fxx.CONTAINER_ID == equip
                                select new { p.AUTODISPLAYNAME, p.ID };

                foreach (var a in queryPATH.Distinct().OrderBy(it => it.AUTODISPLAYNAME))
                {
                    listData = listData + a.AUTODISPLAYNAME + ":" + a.ID + "|";
                }
            }

            return Json(new
            {
                Success = true,
                listData = listData
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult updatePortA(string cardA) // Update list port
        {
            string listData = "";
            string[] card = cardA.Split('-');
            string testc = card[0];
            int cardID = Convert.ToInt32(testc);
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryPATH = from p in ctxData.VFDITEMs
                                join fx in ctxData.VFDMODELs on p.MODEL_ID equals fx.ID
                                join e in ctxData.PORTDESCRIPTIONs on p.MODEL_ID equals e.DEVICEMODEL_ID
                                where p.ID == cardID 
                                select new { p.AUTODISPLAYNAME, p.ID , fx.NAME, e.NUMBER_, e.LABEL};

                foreach (var a in queryPATH.Distinct().OrderBy(it => it.NUMBER_))
                {
                    listData = listData + a.AUTODISPLAYNAME + ":" + a.ID + ":" + a.NAME + ":" + a.NUMBER_ + ":" + a.LABEL + "|";
                }

            }

            return Json(new
            {
                Success = true,
                listData = listData
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult updataEXC(string PTT_ID) // NIS Network Element
        {
            string PuList = "";
            //string PuList2 = "";
            using (Entities ctxData = new Entities())
            {
                //filter PTT

                List<SelectListItem> list = new List<SelectListItem>();
                var queryEXC = from p in ctxData.WV_EXC_MAST
                               where p.PTT_ID.Trim() == PTT_ID.Trim()
                               orderby p.EXC_ABB
                               select new { p.EXC_ABB };

                foreach (var a in queryEXC)
                {
                    PuList = PuList + a.EXC_ABB + ":  " + a.EXC_ABB + "|";
                }
            }

            return Json(new
            {
                Success = true,
                PuList = PuList
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult InsertLoadPath(string JOBID, string PATHTYPE, string PATHBANDWIDTH, int ANAME, int ZNAME, string PORT, string ASLOT, string ZSLOT, string PRIMARY, string ZEXC, string STATUS,
        string NISBEARERID, string NISMEDIAPATHID, string IPDSLAMNODENAME, string UPLINKPORT, string IPDSLAMDOWNLINKPORT, string MSENODENAME, string MSEDOWNLINKPORT, string ACARDNAME, string ZCARDNAME) // Update list port
        {
            bool success;
            string ANAMEtext;
            string ZNAMEtext;
            string listJob = "";

            using (Entities_NRM ctxData = new Entities_NRM())
            {
                var queryEquipA = (from p in ctxData.VFDITEMs
                                  where p.ID == ANAME
                                  select new { p.AUTODISPLAYNAME, p.ID }).Single();
                ANAMEtext = queryEquipA.AUTODISPLAYNAME;

                var queryEquipZ = (from p in ctxData.VFDITEMs
                                   where p.ID == ZNAME
                                   select new { p.AUTODISPLAYNAME, p.ID }).Single();

                ZNAMEtext = queryEquipZ.AUTODISPLAYNAME;
            }

            string[] path = PATHTYPE.Split('-');
            string[] exc = JOBID.Split('-');

            WebView.WebService._base myWebService = new WebService._base();
            WebService._base.LoadPath cs = new WebService._base.LoadPath();
            cs.PATHNAME = ANAMEtext + "-" + ZNAMEtext;
            cs.ANAME = ANAMEtext;
            cs.ATYPE = path[0];
            cs.ASITE = exc[0];
            cs.ZNAME = ZNAMEtext;
            cs.ZTYPE = path[1];
            cs.ZSITE = ZEXC;
            cs.PATHTYPE = path[2];
            cs.PATHBANDWIDTH = PATHBANDWIDTH;
            cs.PATHSTATUS = STATUS;
            cs.ASLOT = ASLOT;
            //string ACARD =
            //string APORT =
            cs.ZSLOT = ZSLOT;
            //string ZCARD =
            cs.ZPORT = PORT;
            cs.JOBID = JOBID;
            cs.PRIMARY = PRIMARY;
            cs.NISBEARERID = NISBEARERID;
            cs.NISMEDIAPATHID = NISMEDIAPATHID;
            cs.IPDSLAMNODENAME = IPDSLAMNODENAME;
            cs.UPLINKPORT = UPLINKPORT;
            cs.IPDSLAMDOWNLINKPORT = IPDSLAMDOWNLINKPORT;
            cs.MSENODENAME = MSENODENAME;
            cs.MSEDOWNLINKPORT = MSEDOWNLINKPORT;
            cs.ACARDNAME = ACARDNAME;
            cs.ZCARDNAME = ZCARDNAME;

            success = myWebService.AddLoadPath(cs);
            using (Entities ctxData = new Entities())
            {

                var queryJOB = from p in ctxData.WV_LOAD_PATH
                               where p.JOBID == JOBID
                               select new { p.ANAME, p.ATYPE, p.ASITE, p.ASLOT, p.ACARD, p.APORT, p.ZNAME, p.ZTYPE, p.ZSITE, p.ZSLOT, p.ZCARD, p.ZPORT, p.PRIMARYSECONDARY, p.PATHBANDWIDTH, p.ID };

                foreach (var a in queryJOB.OrderBy(it => it.APORT))
                {
                    listJob = listJob + a.ANAME + ":" + a.ATYPE + ":" + a.ASITE + ":" + a.ASLOT + ":" + a.ACARD + ":" + a.APORT + ":" + a.ZNAME + ":" + a.ZTYPE + ":" + a.ZSITE + ":" + a.ZSLOT + ":" + a.ZCARD + ":" + a.ZPORT + ":" + a.PRIMARYSECONDARY + ":" + a.PATHBANDWIDTH + ":" + a.ID + ":" + "|";
                }
            }
            return Json(new
            {
                Success = true,
                listJob = listJob
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult UpdateLoadPath(string LoadID, string JOBID, string PATHTYPE, string PATHBANDWIDTH, int ANAME, int ZNAME, string PORT, string ASLOT, string ZSLOT, string PRIMARY, string ZEXC, string STATUS,
        string NISBEARERID, string NISMEDIAPATHID, string IPDSLAMNODENAME, string UPLINKPORT, string IPDSLAMDOWNLINKPORT, string MSENODENAME, string MSEDOWNLINKPORT, string ACARDNAME, string ZCARDNAME) // Update list port
        {
            bool success;
            string ANAMEtext;
            string ZNAMEtext;
            string listJob = "";

            using (Entities_NRM ctxData = new Entities_NRM())
            {
                var queryEquipA = (from p in ctxData.VFDITEMs
                                   where p.ID == ANAME
                                   select new { p.AUTODISPLAYNAME, p.ID }).Single();
                ANAMEtext = queryEquipA.AUTODISPLAYNAME;

                var queryEquipZ = (from p in ctxData.VFDITEMs
                                   where p.ID == ZNAME
                                   select new { p.AUTODISPLAYNAME, p.ID }).Single();

                ZNAMEtext = queryEquipZ.AUTODISPLAYNAME;
            }

            string[] path = PATHTYPE.Split('-');
            string[] exc = JOBID.Split('-');

            WebView.WebService._base myWebService = new WebService._base();
            WebService._base.LoadPath cs = new WebService._base.LoadPath();
            cs.PATHNAME = ANAMEtext + "-" + ZNAMEtext;
            cs.ANAME = ANAMEtext;
            cs.ATYPE = path[0];
            cs.ASITE = exc[0];
            cs.ZNAME = ZNAMEtext;
            cs.ZTYPE = path[1];
            cs.ZSITE = ZEXC;
            cs.PATHTYPE = path[2];
            cs.PATHBANDWIDTH = PATHBANDWIDTH;
            cs.PATHSTATUS = STATUS;
            cs.ASLOT = ASLOT;
            cs.ZSLOT = ZSLOT;
            cs.ZPORT = PORT;
            cs.JOBID = JOBID;
            cs.PRIMARY = PRIMARY;
            cs.NISBEARERID = NISBEARERID;
            cs.NISMEDIAPATHID = NISMEDIAPATHID;
            cs.IPDSLAMNODENAME = IPDSLAMNODENAME;
            cs.UPLINKPORT = UPLINKPORT;
            cs.IPDSLAMDOWNLINKPORT = IPDSLAMDOWNLINKPORT;
            cs.MSENODENAME = MSENODENAME;
            cs.MSEDOWNLINKPORT = MSEDOWNLINKPORT;
            cs.ACARDNAME = ACARDNAME;
            cs.ZCARDNAME = ZCARDNAME;

            success = myWebService.UpdateLoadPath(cs, LoadID);
            using (Entities ctxData = new Entities())
            {

                var queryJOB = from p in ctxData.WV_LOAD_PATH
                               where p.JOBID == JOBID
                               select new { p.ANAME, p.ATYPE, p.ASITE, p.ASLOT, p.ACARD, p.APORT, p.ZNAME, p.ZTYPE, p.ZSITE, p.ZSLOT, p.ZCARD, p.ZPORT, p.PRIMARYSECONDARY, p.PATHBANDWIDTH, p.ID };

                foreach (var a in queryJOB.OrderBy(it => it.APORT))
                {
                    listJob = listJob + a.ANAME + ":" + a.ATYPE + ":" + a.ASITE + ":" + a.ASLOT + ":" + a.ACARD + ":" + a.APORT + ":" + a.ZNAME + ":" + a.ZTYPE + ":" + a.ZSITE + ":" + a.ZSLOT + ":" + a.ZCARD + ":" + a.ZPORT + ":" + a.PRIMARYSECONDARY + ":" + a.PATHBANDWIDTH + ":" + a.ID + ":" + "|";
                }
            }
            return Json(new
            {
                Success = true,
                listJob = listJob
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult GetDetails(string id)
        {
            string equipA;
            string equipZ;

            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_LOAD_PATH
                             where p.ID == id
                             select p).Single();
                equipA = query.ANAME;
                equipZ = query.ZNAME;
            }

            using (Entities_NRM ctxData = new Entities_NRM())
            {
                var queryEquipA = (from p in ctxData.VFDITEMs
                                  where p.AUTODISPLAYNAME == equipA
                                  select p).Single();
                equipA = queryEquipA.ID.ToString();

                var queryEquipZ = (from p in ctxData.VFDITEMs
                                  where p.AUTODISPLAYNAME == equipZ
                                  select p).Single();
                equipZ = queryEquipZ.ID.ToString();
            }

            using (Entities ctxData = new Entities())
            {
                var query = (from p in ctxData.WV_LOAD_PATH
                             where p.ID == id
                             select p).Single();
                query.PATHTYPE = query.ATYPE + "-" + query.ZTYPE + "-" + query.PATHTYPE;

                System.Diagnostics.Debug.WriteLine("FUCK");
                System.Diagnostics.Debug.WriteLine(equipZ);
                return Json(new
                {
                    Success = true,
                    id = id,
                    job = query.JOBID,
                    zexc = query.ZSITE,
                    pathType = query.PATHTYPE,
                    equipA = equipA,
                    equipZ = equipZ,
                    bandwidth = query.PATHBANDWIDTH,
                    primary = query.PRIMARYSECONDARY,
                    status = query.PATHSTATUS,
                    ipnode = query.IPDSLAMNODENAME,
                    ipuplink = query.UPLINKPORT,
                    ipdownlink = query.IPDSLAMDOWNLINKPORT,
                    bearerid = query.NISBEARERID,
                    bearerpath = query.NISMEDIAPATHID,
                    msenode = query.MSENODENAME,
                    msedownlink = query.MSEDOWNLINKPORT,
                    acardname = query.ACARDNAME,
                    zcardname = query.ZCARDNAME,
                    aport = query.APORT,
                    zport = query.ZPORT
                    //checkfeature = checkfeature,
                }, JsonRequestBehavior.AllowGet); //
            }
        }

        [HttpPost]
        public ActionResult DeleteDetails(string id)
        {
            bool success;

            WebView.WebService._base myWebService = new WebService._base();
            WebService._base.LoadPath cs = new WebService._base.LoadPath();
            success = myWebService.DeleteLoadPath(id);
                return Json(new
                {
                    Success = true
                }, JsonRequestBehavior.AllowGet); //

        }

        [HttpPost]
        public ActionResult EmailTest(string JOBID) // NIS Network Element
        {
            string result;
            try 
            {
                MailMessage msg = new MailMessage();
                msg.IsBodyHtml = true;
                msg.From = new MailAddress("neps@tm.com.my", "NEPS");
                msg.To.Add("tay.engsoon@tm.com.my");
                msg.Subject = "EMAIL FROM LOCAL " ;
                msg.Body = "<h1>FILES DETAILS</h1>SCHEME NAME	: <br/><br/>DESCRIPTION : <br/><br/>REDMARK FILE NAME: .xml ";
                msg.Body += "<br/><br/> <h1>RNO DETAILS</h1> <br>";
                msg.Body += "RNO ID : " + User.Identity.Name + "<br/><br/>RNO EMAIL	: <br/><br/>RNO PHONE NUMBER: <br/><br/>Please log in to <a href='http://10.41.101.168/'>NEPS WEBVIEW  </a>to download the file.";
                msg.IsBodyHtml = true;
                SmtpClient emailClient = new SmtpClient("smtp.tm.com.my");
                emailClient.UseDefaultCredentials = true;
                emailClient.Port = 25;
                emailClient.EnableSsl = false;
                //emailClient.UseDefaultCredentials = false;
                emailClient.Send(msg);
                result = "OK";
            }
            catch (Exception ex)
            {
                result = ex.ToString();
            }

            return Json(new
            {
                Success = true,
                result = result
            }, JsonRequestBehavior.AllowGet); //
        }

        //--------------------------------------------------------------------FTTH PATH

        public ActionResult NewFTTHPath(string searchKey, int? page)
        {
            using (Entities ctxData = new Entities())
            {
                //filter PTT
                List<SelectListItem> list = new List<SelectListItem>();
                var queryEXC = from p in ctxData.WV_EXC_MAST
                               select new { Text = p.PTT_ID, Value = p.PTT_ID };

                list.Add(new SelectListItem() { Text = "", Value = "Select" });
                foreach (var a in queryEXC.Distinct().OrderBy(it => it.Value))
                {
                    if (a.Value != null)
                        list.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                }
                ViewBag.PTT = list;

                List<SelectListItem> list1 = new List<SelectListItem>();
                var querySCHEME = from p in ctxData.G3E_JOB
                                  orderby p.G3E_IDENTIFIER
                                  where (p.G3E_OWNER.ToUpper() == User.Identity.Name.ToUpper() || p.G3E_OWNER.ToLower() == User.Identity.Name.ToLower()) && (p.JOB_TYPE.Contains("HSBB"))
                                  select new { Text = p.G3E_IDENTIFIER, Value = p.G3E_IDENTIFIER };

                list1.Add(new SelectListItem() { Text = "", Value = "Select" });
                foreach (var a in querySCHEME.Distinct().OrderBy(it => it.Value))
                {
                    if (a.Value != null)
                        list1.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                }

                ViewBag.job = list1;

                List<SelectListItem> list2 = new List<SelectListItem>();
                list2.Add(new SelectListItem() { Text = "", Value = "Select" });
                ViewBag.pathType = list2;
                ViewBag.equipA = list2;
                ViewBag.equipZ = list2;
                ViewBag.cardA = list2;
                ViewBag.cardZ = list2;
                ViewBag.exc = list2;

            }
            return View();
        }

        [HttpPost]
        public ActionResult updateEquipFTTHA(string job, string pathType, string ZEXC) // Update card
        {
            string listJob = "";
            string[] jobSplit = job.Split('-');
            string exc = jobSplit[0];
            string[] pathTypeSplit1 = pathType.Split('-');
            string pathType1 = pathTypeSplit1[0];
            string pathType2 = pathTypeSplit1[1];
            System.Diagnostics.Debug.WriteLine("[" + pathType1 + "]");
            
            string listData1 = "";
            string listData2 = "";

            string condition3 = ZEXC + "_G";
            
            System.Diagnostics.Debug.WriteLine("[" + ZEXC + "_" + condition3 + "]");

            using (Entities ctxData = new Entities())
            {
                List<SelectListItem> list1 = new List<SelectListItem>();
                var queryEquipA = from p in ctxData.GC_FDC
                                  join fx in ctxData.GC_NETELEM on p.G3E_FID equals fx.G3E_FID
                                  where fx.EXC_ABB == exc
                                  select new { p.FDC_CODE, p.G3E_FID };

                foreach (var a in queryEquipA.Distinct().OrderBy(it => it.FDC_CODE))
                {
                    listData1 = listData1 + a.FDC_CODE + ":" + a.G3E_FID + "|";
                }
            }
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryEquipZ = from p in ctxData.VFDITEMs
                                  join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                                  join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                  join fxx in ctxData.VFDITEMPLACEMENTs on e.ID equals fxx.CONTAINER_ID
                                  where //(e.DTYPE == "Rack") && 
                                  p.USERDISPLAYNAME.Contains(condition3)
                                  select new { p.USERDISPLAYNAME, p.ID };

                foreach (var a in queryEquipZ.Distinct().OrderBy(it => it.USERDISPLAYNAME))
                {
                    listData2 = listData2 + a.USERDISPLAYNAME + ":" + a.ID + "|";
                }

            }

            using (Entities ctxData = new Entities())
            {

                var queryJOB = from p in ctxData.WV_LOAD_PATH_CONSUMER
                               where p.JOBID == job
                               select new { p.ANAME, p.ATYPE, p.ASITE, p.ACARD2, p.APORT2, p.ZNAME, p.ZTYPE, p.ZSITE, p.ZCARD, p.ZPORT, p.DPNAME, p.ID };

                foreach (var a in queryJOB.OrderBy(it => it.APORT2))
                {
                    listJob = listJob + a.ANAME + ":" + a.ATYPE + ":" + a.ASITE + ":" + a.ACARD2 + ":" + a.APORT2 + ":" + a.ZNAME + ":" + a.ZTYPE + ":" + a.ZSITE + ":" + a.ZCARD + ":" + a.ZPORT + ":" + a.DPNAME + ":" + a.ID + ":" + "|";
                }
            }

            return Json(new
            {
                Success = true,
                listData = listData1,
                listData2 = listData2,
                listJob = listJob
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult updateCardFTTHA(int equip) // Update port
        {
            string listData = "";
            bool result;

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            //result = myWebService.FindFDC(equip);
            using (Entities ctxData = new Entities())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();

                //var queryParent = (from p in ctxData.GC_FDP
                //                   join q in ctxData.GC_OWNERSHIP on p.G3E_FID equals q.G3E_FID
                //                   join r in ctxData.GC_OWNERSHIP on q.G3E_ID equals r.OWNER1_ID
                //                   join sc in ctxData.GC_SPLICE_CONNECT on p.FDC_FID equals sc.FID1
                //                   join spl in ctxData.GC_FSPLITTER on sc.FID2 equals spl.G3E_FID
                //                   where p.FDC_FID == equip //FDC FID
                //                   //&& (sc.FNO1 == 7200 || sc.FNO1 == 4400 || sc.FNO1 == 4500) || 
                //                   //   (sc.FNO2 == 7200 || sc.FNO1 == 4400 || sc.FNO1 == 4500)
                //                   orderby sc.FID2, sc.LOW2
                //                   select new {  sc.G3E_FID, sc.LOW1, sc.HIGH1, p.FDP_CODE, spl.SPLITTER_CODE, spl.SPLITTER_TYPE}); 

                // D-SIDE (FDP)
                var queryParent = from p in ctxData.GC_FDC
                                  join s in ctxData.GC_SPLICE_CONNECT on p.G3E_FID equals s.G3E_FID
                                  join spl in ctxData.GC_FSPLITTER on s.FID1 equals spl.G3E_FID
                                  join u in ctxData.GC_NETELEM on s.G3E_FID equals u.G3E_FID 
                                  where p.G3E_FID == equip
                                  select new { spl.G3E_FID, spl.SPLITTER_CODE, spl.SPLITTER_TYPE };

                foreach (var a in queryParent.Distinct().OrderBy(it => it.SPLITTER_CODE))
                {
                    //listData = listData + a.FDP_CODE + "," + a.LOW1 + "," + a.HIGH1 + "," + a.SPLITTER_CODE + "-" + a.SPLITTER_TYPE + "|";
                    listData = listData + a.G3E_FID + "," + a.SPLITTER_CODE + "(" + a.SPLITTER_TYPE + ")|";
                }
                System.Diagnostics.Debug.WriteLine(listData);
            }

            return Json(new
            {
                Success = true,
                listData = listData
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult updateCardFTTHZ(int equip, string scode) // Update port
        {
            string listData = "";
            string listData1 = "";
            string[] xcode = scode.Split('-');
            string code = xcode[1];
            string listDataOdf = "";
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryParent = from p in ctxData.VFDITEMs
                                  join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                                  //join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                  //join fxx in ctxData.VFDITEMPLACEMENTs on e.ID equals fxx.ITEM_ID
                                  where fx.CONTAINER_ID == equip
                                  select new { p.AUTODISPLAYNAME, p.ID };

                foreach (var a in queryParent.Distinct().OrderBy(it => it.AUTODISPLAYNAME))
                {
                    listData = listData + a.AUTODISPLAYNAME + ":" + a.ID + "|";
                }
                //sub card
                var queryPATH = from p in ctxData.VFDITEMs
                                join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                                join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                join fxx in ctxData.VFDITEMPLACEMENTs on e.ID equals fxx.ITEM_ID
                                where fxx.CONTAINER_ID == equip
                                select new { p.AUTODISPLAYNAME, p.ID };

                foreach (var a in queryPATH.Distinct().OrderBy(it => it.AUTODISPLAYNAME))
                {
                    listData = listData + a.AUTODISPLAYNAME + ":" + a.ID + "|";
                }

                //ODF
                string[] dataExc = code.Split('_');
                string Exc = dataExc[0];
                var queryODF = from p in ctxData.VFDITEMs
                                join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                               where (p.USERDISPLAYNAME.Contains(Exc) || p.AUTODISPLAYNAME.Contains(Exc)) && (p.USERDISPLAYNAME.Contains("ODF") || p.AUTODISPLAYNAME.Contains("ODF")) && p.DTYPE == "Rack"
                                select new { p.USERDISPLAYNAME, p.AUTODISPLAYNAME, p.ID };

                foreach (var a in queryODF.Distinct().OrderBy(it => it.USERDISPLAYNAME))
                {
                    var dataDisplay = "";
                    if (a.USERDISPLAYNAME == null)
                    {
                        dataDisplay = a.AUTODISPLAYNAME;
                    }
                    else
                    {
                        dataDisplay = a.USERDISPLAYNAME;
                    }
                    listDataOdf = listDataOdf + dataDisplay + ":" + a.ID + "|";
                }
            }

            //string lastcode = code.Substring(code.Length - 2, 2);
            //string newcode = "G" + lastcode;
            string[] codeSplit = code.Split('_');
            string exc = codeSplit[0];
            string oltcode = codeSplit[1];
            string last_code = oltcode.Substring(oltcode.Length - 2, 2);

            //System.Diagnostics.Debug.WriteLine("exc" + newcode);
            using (Entities ctxData = new Entities())
            {
                List<SelectListItem> list1 = new List<SelectListItem>();
                var queryEquipA = from p in ctxData.GC_FDC
                                  join fx in ctxData.GC_NETELEM on p.G3E_FID equals fx.G3E_FID
                                  where p.OLT_ID.Contains(last_code) && fx.EXC_ABB.Trim() == exc
                                  select new { p.FDC_CODE, p.G3E_FID };

                foreach (var a in queryEquipA.Distinct().OrderBy(it => it.FDC_CODE))
                {
                    listData1 = listData1 + a.FDC_CODE + ":" + a.G3E_FID + "|";
                }
            }

            return Json(new
            {
                Success = true,
                listData = listData,
                listData1 = listData1,
                last_code = last_code,
                listDataOdf = listDataOdf
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult updatePatchPanelODF(int equip) // Update port
        {
            string listDataPP = "";

            using (Entities_NRM ctxData = new Entities_NRM())
            {
                //PatchPanel
                var queryPP= from p in ctxData.VFDITEMs
                                join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                                join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                join fxx in ctxData.VFDITEMPLACEMENTs on e.ID equals fxx.ITEM_ID
                                where e.ID == equip
                                select new { p.AUTODISPLAYNAME, p.ID };

                foreach (var a in queryPP.Distinct().OrderBy(it => it.AUTODISPLAYNAME))
                {
                    listDataPP = listDataPP + a.AUTODISPLAYNAME + ":" + a.ID + "|";
                }
            }

            return Json(new
            {
                Success = true,
                listDataPP = listDataPP
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult updatePatchPanelPort(int equip) // Update port
        {
            string listDataPP = "";

            using (Entities_NRM ctxData = new Entities_NRM())
            {
                //Port PatchPanel
                var queryPP = from p in ctxData.JUNCTIONs
                              join fx in ctxData.VFDITEMs on p.JUNCTIONARRAYMODEL_ID equals fx.MODEL_ID
                              where fx.ID == equip
                              select new { p.ROW_, p.COLUMN_, p.ID };

                var queryMaxPP = (from p in ctxData.JUNCTIONs
                                  join fx in ctxData.VFDITEMs on p.JUNCTIONARRAYMODEL_ID equals fx.MODEL_ID
                                  where fx.ID == equip
                                  select new { p.COLUMN_}).Max(x => x.COLUMN_);

                System.Diagnostics.Debug.WriteLine(queryMaxPP);

                int val = Convert.ToInt32(queryMaxPP) + 1;

                foreach (var a in queryPP.Distinct().OrderBy(it => it.ROW_).ThenBy(it => it.COLUMN_))
                {
                    //int val = runNo + 1;
                    int data = (Convert.ToInt32(a.ROW_) * val) + (Convert.ToInt32(a.COLUMN_) + 1);
                    listDataPP = listDataPP + data + ":" + data + "|";
                    //val++;
                }
            }

            return Json(new
            {
                Success = true,
                listDataPP = listDataPP
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult updatePortFTTHA(int equip, string job) // Update port
        {
            string listData = "";
            bool result;

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();
            //result = myWebService.FindFDC(equip);
            using (Entities ctxData = new Entities())
            {
                var queryParent = (from p in ctxData.GC_FDP
                                   join sc in ctxData.GC_SPLICE_CONNECT on p.G3E_FID equals sc.G3E_FID
                                   join spl in ctxData.GC_FSPLITTER on sc.SRC_FID equals spl.G3E_FID
                                   join q in ctxData.GC_OWNERSHIP on sc.SRC_FID equals q.G3E_FID
                                   join r in ctxData.GC_OWNERSHIP on q.OWNER1_ID equals r.G3E_ID
                                   join s in ctxData.GC_NETELEM on p.G3E_FID equals s.G3E_FID
                                   where spl.G3E_FID == equip && s.JOB_ID == job //FDC FID
                                   orderby sc.FID2, sc.LOW2
                                   select new { sc.LOW1, sc.HIGH1, p.FDP_CODE, spl.SPLITTER_CODE, spl.SPLITTER_TYPE, spl.NO_OF_SPLITTER }).Distinct();

                foreach (var a in queryParent.Distinct().OrderBy(it => it.FDP_CODE))
                {
                    listData = listData + a.FDP_CODE + "," + a.LOW1 + "," + a.HIGH1 + ", (" + a.SPLITTER_CODE + "/" + a.SPLITTER_TYPE + ")," + a.NO_OF_SPLITTER + "|";
                }
                System.Diagnostics.Debug.WriteLine(listData);
            }

            return Json(new
            {
                Success = true,
                listData = listData
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult updatePortFTTHZ(string cardA) // Update list port
        {
            string listData = "";
            string[] card = cardA.Split('-');
            string testc = card[0];
            int cardID = Convert.ToInt32(testc);
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryPATH = (from p in ctxData.VFDITEMs
                                join fx in ctxData.VFDMODELs on p.MODEL_ID equals fx.ID
                                join e in ctxData.PORTDESCRIPTIONs on p.MODEL_ID equals e.DEVICEMODEL_ID
                                where p.ID == cardID
                                select new { p.AUTODISPLAYNAME, p.ID, fx.NAME, e.NUMBER_, e.LABEL }).Single();

                //foreach (var a in queryPATH.Distinct().OrderBy(it => it.NUMBER_))
                //{
                listData = listData + queryPATH.AUTODISPLAYNAME + ":" + queryPATH.ID + ":" + queryPATH.NAME + ":" + queryPATH.NUMBER_ + ":" + queryPATH.LABEL + "|";
                //}

            }

            return Json(new
            {
                Success = true,
                listData = listData
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult InsertLoadFTTHPath(string JOBID, string ANAME, string ATYPE, int FDC_FID, string ASTER, string ZNAME, string ZSITE, string ZTYPE, string ZSLOT, string ZPORT, string A2Port) // Update list port
        {
            bool success;
            string[] splitS = ASTER.Split('-');
            string splitt = splitS[1];
            string[] splitter = ASTER.Split('(');
            string listJob = "";

            WebView.WebService._base myWebService = new WebService._base();
            WebService._base.LoadPath cs = new WebService._base.LoadPath();
            cs.ANAME = ANAME; // FDC CODE
            cs.ATYPE = ATYPE; // FDC
            cs.ASITE = ZSITE; // exc FDC
            cs.ACARD = splitter[0]; // splitter will be get port and card
            cs.ZNAME = ZNAME; // OLT name
            cs.ZTYPE = ZTYPE; // OLT
            cs.ZSITE = ZSITE; // exc OLT
            cs.ZCARD = ZSLOT; // OLT slot
            cs.ZPORT = ZPORT; // OLT port
            cs.FDC_FID = FDC_FID; // FDC_FID
            cs.JOBID = JOBID;

            success = myWebService.AddLoadFTTHPath(cs, A2Port);

            using (Entities ctxData = new Entities())
            {

                var queryJOB = from p in ctxData.WV_LOAD_PATH_CONSUMER
                               where p.JOBID == JOBID
                               select new { p.ANAME, p.ATYPE, p.ASITE, p.ACARD2, p.APORT2, p.ZNAME, p.ZTYPE, p.ZSITE, p.ZCARD, p.ZPORT, p.DPNAME, p.ID };

                foreach (var a in queryJOB.OrderBy(it => it.APORT2))
                {
                    listJob = listJob + a.ANAME + ":" + a.ATYPE + ":" + a.ASITE + ":" + a.ACARD2 + ":" + a.APORT2 + ":" + a.ZNAME + ":" + a.ZTYPE + ":" + a.ZSITE + ":" + a.ZCARD + ":" + a.ZPORT + ":" + a.DPNAME + ":" + a.ID + ":" + "|";
                }
            }
            return Json(new
            {
                Success = success,
                listJob = listJob
            }, JsonRequestBehavior.AllowGet); //
        }

        //[HttpPost]
        //public ActionResult UpdateLoadPathFTTH(string JOBID, string ANAME, string ATYPE, int FDC_FID, string ASTER, string ZNAME, string ZSITE, string ZTYPE, string ZSLOT, string ZPORT) // Update list port
        //{
        //    bool success;
        //    string[] splitter = ASTER.Split('(');
        //    string listJob = "";

        //    WebView.WebService._base myWebService = new WebService._base();
        //    WebService._base.LoadPath cs = new WebService._base.LoadPath();
        //    cs.ANAME = ANAME; // FDC CODE
        //    cs.ATYPE = ATYPE; // FDC
        //    cs.ASITE = ZSITE; // exc FDC
        //    cs.ACARD = splitter[0]; // splitter will be get port and card
        //    cs.ZNAME = ZNAME; // OLT name
        //    cs.ZTYPE = ZTYPE; // OLT
        //    cs.ZSITE = ZSITE; // exc OLT
        //    cs.ZCARD = ZSLOT; // OLT slot
        //    cs.ZPORT = ZPORT; // OLT port
        //    cs.FDC_FID = FDC_FID; // FDC_FID
        //    cs.JOBID = JOBID;

        //    success = myWebService.AddLoadFTTHPath(cs);

        //    using (Entities ctxData = new Entities())
        //    {

        //        var queryJOB = from p in ctxData.WV_LOAD_PATH_CONSUMER
        //                       where p.JOBID == JOBID
        //                       select new { p.ANAME, p.ATYPE, p.ASITE, p.ACARD2, p.APORT2, p.ZNAME, p.ZTYPE, p.ZSITE, p.ZCARD, p.ZPORT, p.DPNAME, p.ID };

        //        foreach (var a in queryJOB.OrderBy(it => it.APORT2))
        //        {
        //            listJob = listJob + a.ANAME + ":" + a.ATYPE + ":" + a.ASITE + ":" + a.ACARD2 + ":" + a.APORT2 + ":" + a.ZNAME + ":" + a.ZTYPE + ":" + a.ZSITE + ":" + a.ZCARD + ":" + a.ZPORT + ":" + a.DPNAME + ":" + a.ID + ":" + "|";
        //        }
        //    }
        //    return Json(new
        //    {
        //        Success = true,
        //        listJob = listJob
        //    }, JsonRequestBehavior.AllowGet); //
        //}

        [HttpPost]
        public ActionResult DeleteDetailsFTTH(string id)
        {
            bool success;

            WebView.WebService._base myWebService = new WebService._base();
            WebService._base.LoadPath cs = new WebService._base.LoadPath();
            success = myWebService.DeleteLoadPathFTTH(id);
            return Json(new
            {
                Success = true
            }, JsonRequestBehavior.AllowGet); //

        }

        public ActionResult ManageConnectivity(string searchKey, int? page)
        {
            using (Entities ctxData = new Entities())
            {
                //filter PTT
                List<SelectListItem> list = new List<SelectListItem>();
                var queryEXC = from p in ctxData.WV_EXC_MAST
                               select new { Text = p.PTT_ID, Value = p.PTT_ID };

                list.Add(new SelectListItem() { Text = "", Value = "Select" });
                foreach (var a in queryEXC.Distinct().OrderBy(it => it.Value))
                {
                    if (a.Value != null)
                        list.Add(new SelectListItem() { Text = a.Text.ToString(), Value = a.Value.ToString() });
                }
                ViewBag.PTT = list;

                List<SelectListItem> list2 = new List<SelectListItem>();
                ViewBag.exc = list2;
                ViewBag.elv = list2;
                ViewBag.equipA = list2;
                ViewBag.equipZ = list2;
                ViewBag.cardA = list2;
                ViewBag.cardZ = list2;
            }
            return View();
        }

        [HttpPost]
        public ActionResult findELV(string EXC) // Find Elevation
        {
            string listData = "";
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryEquipZ = from fx in ctxData.ELEVATIONs
                                  join p in ctxData.VFDITEMs on fx.PLAN_ID equals p.ID
                                  where (p.DTYPE == "Plan") && 
                                  p.USERDISPLAYNAME.Contains(EXC)
                                  select new { fx.NAME, fx.Z };

                foreach (var a in queryEquipZ.OrderBy(it => it.NAME))
                {
                    listData = listData + a.NAME + ":" + a.Z + "|";
                }

            }

            return Json(new
            {
                Success = true,
                listData = listData
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult findChasiss(string EXC, int lvl) // Find Chasiss
        {
            string listData = "";
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryEquipZ = from p in ctxData.VFDITEMs
                                  join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                                  //join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                  //join fxx in ctxData.VFDITEMPLACEMENTs on e.ID equals fxx.CONTAINER_ID
                                  where (p.DTYPE == "Chassis") &&
                                  p.USERDISPLAYNAME.Contains(EXC) && fx.Z >= lvl
                                  select new { p.USERDISPLAYNAME, p.ID };

                foreach (var a in queryEquipZ.Distinct().OrderBy(it => it.USERDISPLAYNAME))
                {
                    listData = listData + a.USERDISPLAYNAME + ":" + a.ID + "|";
                }

            }

            return Json(new
            {
                Success = true,
                listData = listData
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult findChasissPort(int id) // Find Chasiss
        {
            string listData = "";
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryEquipZ = from p in ctxData.VFDITEMs
                                  join fx in ctxData.PORTDESCRIPTIONs on p.MODEL_ID equals fx.DEVICEMODEL_ID
                                  where p.ID == id
                                  select new { p.ID, fx.NUMBER_ };

                foreach (var a in queryEquipZ.Distinct().OrderBy(it => it.NUMBER_))
                {
                    listData = listData + a.NUMBER_ + ":" + a.ID + "|";
                }

            }

            return Json(new
            {
                Success = true,
                listData = listData
            }, JsonRequestBehavior.AllowGet); //
        }

        class MyStub
        {
            public string name { get; set; }
            public int level { get; set; }
            public int categoryId { get; set; }
            public int parentId { get; set; }
        }

        [HttpPost]
        public ActionResult findCard(int id, string A_SUB_TYPE) // Find Chasiss Card
        {
            string listData = "";
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryEquipZ = from p in ctxData.VFDITEMs
                                  join fx in ctxData.VFDITEMPLACEMENTs on p.ID equals fx.ITEM_ID
                                  join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                  join fxx in ctxData.VFDITEMPLACEMENTs on e.ID equals fxx.CONTAINER_ID
                                  where e.ID == id
                                  select new { p.USERDISPLAYNAME, p.ID };

                foreach (var a in queryEquipZ.Distinct().OrderBy(it => it.USERDISPLAYNAME))
                {
                    listData = listData + a.USERDISPLAYNAME + ":" + a.ID + "|";
                }

            }

            string listExist = "";
            //KENA GUNA NAMA EQUIPMENT
            System.Diagnostics.Debug.WriteLine("ID :" + id);
            Tools tool = new Tools();

            string sqlCmdUpdate = "WITH    v (a_id, z_id, a_sub_type) AS (";
                    sqlCmdUpdate += " SELECT  a_id, z_id, a_sub_type";
                    sqlCmdUpdate += " FROM    CONNECTIVITY";
                    sqlCmdUpdate += " WHERE   A_SUB_TYPE = '" + A_SUB_TYPE + "'";
                    sqlCmdUpdate += " UNION ALL";
                    sqlCmdUpdate += " SELECT  t.a_id, t.z_id, t.a_sub_type";
                    sqlCmdUpdate += " FROM    v";
                    sqlCmdUpdate += " JOIN    MANAGE_CONNECTIVITY t";
                    sqlCmdUpdate += " ON      t.a_id = v.z_id )";
                    sqlCmdUpdate += " SELECT  * FROM    v";

            string queryEquip = tool.ExecuteStr(connString, sqlCmdUpdate);
            string[] extData = queryEquip.Split('!');
            //listExist = ;
            //var query = queryEquip.ToList();
            for (int i = 0; i < extData.Count() - 1; i++)
            {
                string firstData = extData[i];
                string[] appearData = firstData.Split(':');
                System.Diagnostics.Debug.WriteLine("appearData :" + appearData[2]);
                listExist = listExist + "(" + appearData[0] + " : " + appearData[2] + " )-->";
            }
                      

            return Json(new
            {
                Success = true,
                listData = listData,
                listExist = listExist
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult findPP(string EXC, int lvl) // Find Patch Panel
        {
            string listData = "";
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryEquipZ = from fx in ctxData.JUNCTIONs
                                  join p in ctxData.VFDITEMs on fx.JUNCTIONARRAYMODEL_ID equals p.MODEL_ID 
                                  //join e in ctxData.VFDITEMs on fx.CONTAINER_ID equals e.ID
                                  //join fxx in ctxData.VFDITEMPLACEMENTs on fx.JUNCTIONARRAYMODEL_ID equals fxx.CONTAINER_ID
                                  where (p.DTYPE == "PatchPanel") &&
                                  p.USERDISPLAYNAME.Contains(EXC)
                                  select new { p.USERDISPLAYNAME, p.ID };

                foreach (var a in queryEquipZ.Distinct().OrderBy(it => it.USERDISPLAYNAME))
                {
                    listData = listData + a.USERDISPLAYNAME + ":" + a.ID + "|";
                }

            }

            return Json(new
            {
                Success = true,
                listData = listData
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult findPPort(int id) // Find Chasiss Card
        {
            string listData = "";
            using (Entities_NRM ctxData = new Entities_NRM())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryEquipZ = from p in ctxData.JUNCTIONs
                                  join fx in ctxData.VFDITEMs on p.JUNCTIONARRAYMODEL_ID equals fx.MODEL_ID
                                  where fx.ID == id
                                  //p.AUTODISPLAYNAME.Contains(EXC)
                                  select new { p.ROW_, p.COLUMN_, p.ID };

                foreach (var a in queryEquipZ.Distinct().OrderBy(it => it.ROW_).ThenBy(it => it.COLUMN_))
                {
                    listData = listData + a.ROW_ + "-" + a.COLUMN_ + ":" + a.ID + "|";
                }

            }

            return Json(new
            {
                Success = true,
                listData = listData
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult checkACard(string id) // Check A Port
        {
            bool success;
            using (Entities_NEPS ctxData = new Entities_NEPS())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryCheckA = (from p in ctxData.CONNECTIVITY
                                  where p.A_ID == id
                                  select p);
                if (queryCheckA.Count() > 0)
                {
                    success = false;
                }
                else
                {
                    success = true;
                }
            }

            return Json(new
            {
                Success = success
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult checkZCard(string id) // Check Z Port
        {
            bool success;
            using (Entities_NEPS ctxData = new Entities_NEPS())
            {
                List<SelectListItem> list2 = new List<SelectListItem>();
                var queryCheckA = (from p in ctxData.CONNECTIVITY
                                   where p.Z_ID == id
                                   select p);
                if (queryCheckA.Count() > 0)
                {
                    success = false;
                }
                else
                {
                    success = true;
                }
            }

            return Json(new
            {
                Success = success
            }, JsonRequestBehavior.AllowGet); //
        }

        [HttpPost]
        public ActionResult InsertManageConn(string EXC_ABB, string ELV_NAME, string A_ID, string A_TYPE, string A_SUB_TYPE, string A_PORT, string Z_ID, string Z_TYPE, string Z_SUB_TYPE, string Z_PORT, string REMARKS, string ATYPE, string ZTYPE) // insert list port
        {
            bool success;

            WebView.WebService._base myWebService = new WebService._base();

            success = myWebService.AddConnectivity(EXC_ABB, ELV_NAME, A_ID, A_TYPE, A_SUB_TYPE, A_PORT, Z_ID, Z_TYPE, Z_SUB_TYPE, Z_PORT, REMARKS, ATYPE, ZTYPE);

            return Json(new
            {
                Success = success
            }, JsonRequestBehavior.AllowGet); //
        }
    }
}
