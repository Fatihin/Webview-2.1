using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
//using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Services;
using NEPS.BOQ.Classes;
using NEPS.BOQ.Utilities;
using Oracle.DataAccess.Client;
using WebView.Library;
using WebView.Models;
using WebView.Models.Account;
using Oracle.DataAccess.Types;

namespace WebView.WebService
{
    /// <summary>
    /// Summary description for _base
    /// </summary>
    [WebService(Namespace = "http://localhost:2392/WebService/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    // [System.Web.Script.Services.ScriptService]
    public class _base : System.Web.Services.WebService
    {
        private string connString = ConfigurationManager.AppSettings.Get("connString");

        [WebMethod]
        public string AddUserAudit(string username)
        {
            OracleTimeStamp tsCurrent1 = DateTime.Now;
            Tools tool = new Tools();
            string sqlStr = "insert into WEBVIEW_AUDIT_TRAIL (USERNAME";
            sqlStr += ") values ";

            OracleParameter[] oraPrm = new OracleParameter[1];

            oraPrm[0] = new OracleParameter("v_username", OracleDbType.Varchar2);
            oraPrm[0].Value = username;

            string success = tool.ExecuteStored(connString, "AUDIT_USER", CommandType.StoredProcedure, oraPrm, false);
            return success;
        }

        [WebMethod]
        public string HelloWorld()
        {
            return "Hello World" + "xxxxxxxx";
        }

        [WebMethod]
        public List<string> GetItems()
        {
            List<string> arr = new List<string>();

            arr.Add("one");
            arr.Add("two");
            arr.Add("three");

            return arr;
        }

        public class Book
        {
            public string name;
            public string author;
        }

        public Book[] GetBook()
        {
            Book[] books = new Book[2];

            books[0] = new Book();
            books[0].name = "test";
            books[0].author = "Ali";

            books[1] = new Book();
            books[1].name = "abc";
            books[1].author = "Abu";

            return books;
        }

        public class BookShop
        {
            public string BookStoreName;
            public Book[] booklist;
        }

        [WebMethod]
        public BookShop GetBookShop()
        {
            Book[] books = GetBook();

            BookShop bookshop = new BookShop();
            bookshop.BookStoreName = "Kedai MPH";
            bookshop.booklist = books;

            return bookshop;
        }

        [WebMethod]
        public void AddBook(Book book)
        {
            System.Diagnostics.Debug.WriteLine("--");
            System.Diagnostics.Debug.WriteLine(book.name);
            System.Diagnostics.Debug.WriteLine(book.author);
        }
        ////user validation////

        public UserModel ValidateUser(string username, string password)
        {
            System.Diagnostics.Debug.WriteLine(username + " !!! " + password);
            UserModel user = new UserModel();

            using (Entities ctxData = new Entities())
            {
                var query = from p in ctxData.WV_USER
                            join ug in ctxData.WV_GROUP on p.GROUPID equals ug.GRP_ID
                            join gr in ctxData.WV_GRP_ROLE on ug.GRPNAME equals gr.GRPNAME
                            join r in ctxData.WV_ROLE on gr.ROLENAME equals r.ROLENAME
                            where (p.USERNAME.ToUpper() == username.ToUpper() || p.USERNAME.ToLower() == username.ToLower()) && p.PASSWORD == password
                            select new
                            {
                                Username = p.USERNAME,
                                Group = ug.GRPNAME,
                                GroupFullName = ug.FULL_NAME,
                                HandoverStatus = ug.HANDOVER_STATUS,
                                Role = r.ROLENAME
                            };

                if (query.Count() > 0)
                {
                    foreach (var a in query.Distinct().OrderBy(it => it.Username))
                    {
                        user.IsValidUser = true;
                        user.UserName = a.Username;
                        user.Group = a.Group;
                        user.GroupFullName = a.GroupFullName;
                        user.HandoverStatus = a.HandoverStatus;
                        user.Role = a.Role;
                    }
                }
            }
            return user;
        }

        public class UserMaintenance
        {
            public string USERNAME;
            public string FULL_NAME;
            public string PASSWORD;
            public string GROUPID;
            public string AREA;
            public string RW_ACCESS;
            public string AUTORIZATION;
            public string NETWORK;
            public string PTT_STATE;
            public string HANDOVER;
            public string USER_ROLES;
            public string EXC;
            public string EMAIL;
            public string CONFIRMPASSWORD { get; set; }

            public string NO_TEL { get; set; }
        }

        public class UserList
        {
            public int max;
            public List<UserMaintenance> UsrList = new List<UserMaintenance>();
        }

        [WebMethod]
        public UserList GetUserMaintenanceList(int start, int size, string searchKey, string ptt)
        {
            UserList osp = new UserList();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null && ptt == null)
                {
                    int count = (from c in ctxData.WV_USER
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_USER
                                 join fx in ctxData.WV_GROUP on d.GROUPID equals fx.GRP_ID
                                 orderby d.USERNAME
                                 select new { d.USERNAME, d.FULL_NAME, fx.GRPNAME, d.PTT_STATE}).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        UserMaintenance User = new UserMaintenance();
                        User.USERNAME = a.USERNAME;
                        User.FULL_NAME = a.FULL_NAME;
                        User.PTT_STATE = a.PTT_STATE;
                        User.GROUPID = a.GRPNAME;
                        //User.AREA = a.AREA;

                        osp.UsrList.Add(User);

                        //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
                else
                {
                    if (ptt == null)
                    {
                        int count = (from c in ctxData.WV_USER
                                     where c.FULL_NAME.Contains(searchKey)
                                     select c).Count();

                        System.Diagnostics.Debug.WriteLine(count);
                        osp.max = count;

                        var query = (from d in ctxData.WV_USER
                                     join fx in ctxData.WV_GROUP on d.GROUPID equals fx.GRP_ID
                                     where d.USERNAME.ToUpper().Contains(searchKey.ToUpper()) || d.USERNAME.ToLower().Contains(searchKey.ToLower()) || d.USERNAME.Contains(searchKey) ||
                                     d.FULL_NAME.ToUpper().Contains(searchKey.ToUpper()) || d.FULL_NAME.ToLower().Contains(searchKey.ToLower()) || d.FULL_NAME.Contains(searchKey)
                                     orderby d.USERNAME
                                     select new { d.USERNAME, d.FULL_NAME, fx.GRPNAME, d.PTT_STATE }).Skip(start).Take(size);

                        foreach (var a in query)
                        {
                            UserMaintenance User = new UserMaintenance();
                            User.USERNAME = a.USERNAME;
                            User.FULL_NAME = a.FULL_NAME;
                            User.PTT_STATE = a.PTT_STATE;
                            User.GROUPID = a.GRPNAME;
                            //User.AREA = a.MAT_QTY.ToString();

                            osp.UsrList.Add(User);

                            //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                        }
                    }
                    else
                        if (searchKey == null)
                        {
                            {
                                int count = (from c in ctxData.WV_USER
                                             where c.FULL_NAME.Contains(searchKey)
                                             select c).Count();

                                System.Diagnostics.Debug.WriteLine(count);
                                osp.max = count;

                                var query = (from d in ctxData.WV_USER
                                             join fx in ctxData.WV_GROUP on d.GROUPID equals fx.GRP_ID
                                             where d.PTT_STATE.ToUpper().Contains(ptt.ToUpper())
                                             orderby d.USERNAME
                                             select new { d.USERNAME, d.FULL_NAME, fx.GRPNAME, d.PTT_STATE }).Skip(start).Take(size);

                                foreach (var a in query)
                                {
                                    UserMaintenance User = new UserMaintenance();
                                    User.USERNAME = a.USERNAME;
                                    User.FULL_NAME = a.FULL_NAME;
                                    User.PTT_STATE = a.PTT_STATE;
                                    User.GROUPID = a.GRPNAME;
                                    //User.AREA = a.MAT_QTY.ToString();

                                    osp.UsrList.Add(User);

                                    //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                                }
                            }
                        }
                        else
                        {
                            int count = (from c in ctxData.WV_USER
                                         where c.FULL_NAME.Contains(searchKey)
                                         select c).Count();

                            System.Diagnostics.Debug.WriteLine(count);
                            osp.max = count;

                            var query = (from d in ctxData.WV_USER
                                         join fx in ctxData.WV_GROUP on d.GROUPID equals fx.GRP_ID
                                         where ( d.USERNAME.ToUpper().Contains(searchKey.ToUpper()) || d.USERNAME.ToLower().Contains(searchKey.ToLower()) || d.USERNAME.Contains(searchKey) ||
                                         d.FULL_NAME.ToUpper().Contains(searchKey.ToUpper()) || d.FULL_NAME.ToLower().Contains(searchKey.ToLower()) || d.FULL_NAME.Contains(searchKey) ) &&
                                         d.PTT_STATE.ToUpper().Contains(ptt.ToUpper())
                                         orderby d.USERNAME
                                         select new { d.USERNAME, d.FULL_NAME, fx.GRPNAME, d.PTT_STATE }).Skip(start).Take(size);

                            foreach (var a in query)
                            {
                                UserMaintenance User = new UserMaintenance();
                                User.USERNAME = a.USERNAME;
                                User.FULL_NAME = a.FULL_NAME;
                                User.PTT_STATE = a.PTT_STATE;
                                User.GROUPID = a.GRPNAME;
                                //User.AREA = a.MAT_QTY.ToString();

                                osp.UsrList.Add(User);

                                //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                            }
                        }
                }
            }

            return osp;
        }

        public class Crypto
        {
            private static byte[] _salt = Encoding.ASCII.GetBytes("o6806642kbM7c5");
            private const string sharedSecret = "NEPS";

            /// <summary>
            /// Encrypt the given string using AES.  The string can be decrypted using 
            /// DecryptStringAES().  The sharedSecret parameters must match.
            /// </summary>
            /// <param name="plainText">The text to encrypt.</param>
            /// <param name="sharedSecret">A password used to generate a key for encryption.</param>
            public static string EncryptStringAES(string plainText)
            {
                if (string.IsNullOrEmpty(plainText))
                    return "";

                string outStr = null;                       // Encrypted string to return
                RijndaelManaged aesAlg = null;              // RijndaelManaged object used to encrypt the data.

                try
                {
                    // generate the key from the shared secret and the salt
                    Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret, _salt);

                    // Create a RijndaelManaged object
                    // with the specified key and IV.
                    aesAlg = new RijndaelManaged();
                    aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);
                    aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);

                    // Create a decrytor to perform the stream transform.
                    ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                    // Create the streams used for encryption.
                    using (MemoryStream msEncrypt = new MemoryStream())
                    {
                        using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                        {
                            using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                            {

                                //Write all data to the stream.
                                swEncrypt.Write(plainText);
                            }
                        }
                        outStr = Convert.ToBase64String(msEncrypt.ToArray());
                    }
                }
                finally
                {
                    // Clear the RijndaelManaged object.
                    if (aesAlg != null)
                        aesAlg.Clear();
                }

                // Return the encrypted bytes from the memory stream.
                return outStr;
            }

            /// <summary>
            /// Decrypt the given string.  Assumes the string was encrypted using 
            /// EncryptStringAES(), using an identical sharedSecret.
            /// </summary>
            /// <param name="cipherText">The text to decrypt.</param>
            /// <param name="sharedSecret">A password used to generate a key for decryption.</param>
            public static string DecryptStringAES(string cipherText)
            {
                if (string.IsNullOrEmpty(cipherText))
                    return "";

                // Declare the RijndaelManaged object
                // used to decrypt the data.
                RijndaelManaged aesAlg = null;

                // Declare the string used to hold
                // the decrypted text.
                string plaintext = null;

                try
                {
                    // generate the key from the shared secret and the salt
                    Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret, _salt);

                    // Create a RijndaelManaged object
                    // with the specified key and IV.
                    aesAlg = new RijndaelManaged();
                    aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);
                    aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);

                    // Create a decrytor to perform the stream transform.
                    ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                    // Create the streams used for decryption.                
                    byte[] bytes = Convert.FromBase64String(cipherText);
                    using (MemoryStream msDecrypt = new MemoryStream(bytes))
                    {
                        using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                        {
                            using (StreamReader srDecrypt = new StreamReader(csDecrypt))

                                // Read the decrypted bytes from the decrypting stream
                                // and place them in a string.
                                plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }
                finally
                {
                    // Clear the RijndaelManaged object.
                    if (aesAlg != null)
                        aesAlg.Clear();
                }

                return plaintext;
            }
        }

        public bool AddUser(UserMaintenance newUserMaintenance)
        {
            int UserID;
            int UserID2 = 0;
            string groupDesc = "";
            try
            {
                bool success = true;
                Tools tool = new Tools();

                using (Entities ctxData = new Entities())
                {
                    decimal queryUser = (from d in ctxData.WV_USER
                                     orderby d.USER_ID ascending
                                     select d.USER_ID).Max();
                    //foreach (var a in queryUser)
                    //{
                    System.Diagnostics.Debug.WriteLine("USER ID A : " + queryUser);
                    UserID = Convert.ToInt32(queryUser);
                    UserID2 = UserID + 1;
                   // }

                    var queryGroup = (from d in ctxData.WV_GROUP
                                      where d.GRP_ID == newUserMaintenance.GROUPID
                                      select new { d.GRPNAME }).Single();
                        groupDesc = queryGroup.GRPNAME;
                }

                string sqlStr = "insert into WV_USER (USER_ID, USERNAME, FULL_NAME, PASSWORD, GROUPID, PTT_STATE, HANDOVER, EMAIL, NO_TEL ";
                sqlStr += ") values (" + UserID2 + ",'" + newUserMaintenance.USERNAME + "','" + newUserMaintenance.FULL_NAME + "','" + newUserMaintenance.PASSWORD;
                sqlStr += "'," + newUserMaintenance.GROUPID + ",'" + newUserMaintenance.PTT_STATE + "','" + newUserMaintenance.HANDOVER + "','" + newUserMaintenance.EMAIL + "','" + newUserMaintenance.NO_TEL + "')";
                System.Diagnostics.Debug.WriteLine("USER ID : " + sqlStr);
                using (Entities ctxData = new Entities())
                {
                    success = tool.ExecuteSql(ctxData, sqlStr);
                }

                //string password = Crypto.DecryptStringAES(newUserMaintenance.PASSWORD);

                using (Entities ctxData = new Entities())
                {
                    string sqlCmdUsr = "CREATE USER " + newUserMaintenance.USERNAME + " IDENTIFIED BY " + newUserMaintenance.PASSWORD + " DEFAULT TABLESPACE users QUOTA 10M ON users TEMPORARY TABLESPACE temp QUOTA 5M ON system";
                    string sqlCmdUsrGrant = "GRANT DESIGNER, CONNECT, RESOURCE, EVERYONE  TO " + newUserMaintenance.USERNAME ;
                    string sqlCmdUsrRole = "ALTER USER " + newUserMaintenance.USERNAME + " DEFAULT ROLE ALL";

                    tool.ExecuteSql(ctxData, sqlCmdUsr);
                    tool.ExecuteSql(ctxData, sqlCmdUsrGrant);
                    tool.ExecuteSql(ctxData, sqlCmdUsrRole);
                }
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

        [WebMethod]
        public bool UpdateUser(UserMaintenance usrMaintenance, string username)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            string sqlCmd1 = "";
            string sqlCmd2 = "";
            string groupDesc = "";
            using (Entities ctxData = new Entities())
            {
                var queryGroup = (from d in ctxData.WV_GROUP
                                  where d.GRP_ID == usrMaintenance.GROUPID
                                  select new { d.GRPNAME }).Single();
                groupDesc = queryGroup.GRPNAME;
            }

            sqlCmd = "UPDATE WV_USER SET FULL_NAME = '" + usrMaintenance.FULL_NAME + "',PASSWORD = '" + usrMaintenance.PASSWORD + "', GROUPID = '" + usrMaintenance.GROUPID +
                "', AREA = '" + usrMaintenance.AREA + "',RW_ACCESS = '" + usrMaintenance.RW_ACCESS + "', AUTORIZATION = '" + usrMaintenance.AUTORIZATION +
                "', PTT_STATE = '" + usrMaintenance.PTT_STATE + "',HANDOVER = '" + usrMaintenance.HANDOVER + "', USER_ROLES = '" + usrMaintenance.USER_ROLES +
                "', EXC = '" + usrMaintenance.EXC + "', EMAIL = '" + usrMaintenance.EMAIL + "', NO_TEL = '" + usrMaintenance.NO_TEL + "' WHERE USERNAME='" + username + "'";

            sqlCmd1 = "UPDATE WV_USR_GRP SET GRPNAME = '" + groupDesc + "' WHERE username='" + username + "'";

            //string password = Crypto.DecryptStringAES(usrMaintenance.PASSWORD);

            sqlCmd2 = "alter user " + username + " identified by " + usrMaintenance.PASSWORD;

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }
            System.Diagnostics.Debug.WriteLine("bool " + success);
            return success;
        }

        public bool UpdateNewPass(UserMaintenance usrMaintenance, string username )
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            string sqlCmd1 = "";
            string sqlCmd2 = "";
            string groupDesc = "";
   
            sqlCmd = "UPDATE WV_USER SET PASSWORD = '" + usrMaintenance.PASSWORD + "' WHERE USERNAME='" + username + "'";

            using (Entities ctxData = new Entities())
            {
                tool.ExecuteSql(ctxData, sqlCmd1);
                tool.ExecuteSql(ctxData, sqlCmd2);
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }
            System.Diagnostics.Debug.WriteLine("new Pass : " + success);
            return success;
        }

        [WebMethod]
        public bool UpdateUserPass(UserMaintenance usrMaintenance, string username)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            string sqlCmd2 = "";
            System.Diagnostics.Debug.WriteLine("password " + usrMaintenance.PASSWORD);
            sqlCmd = "UPDATE WV_USER SET PASSWORD = '" + usrMaintenance.PASSWORD + "' WHERE USERNAME='" + username + "'";
            //string password = Crypto.DecryptStringAES(usrMaintenance.PASSWORD);
            sqlCmd2 = "alter user " + username + " identified by " + usrMaintenance.PASSWORD;

            using (Entities ctxData = new Entities())
            {
                tool.ExecuteSql(ctxData, sqlCmd2);
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }
            System.Diagnostics.Debug.WriteLine("bool " + success);
            return success;
        }

        [WebMethod]
        public bool DeleteUserData(string jobId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            string sqlCmd1 = "";
            string sqlCmd2 = "";

            sqlCmd = "DELETE FROM WV_USER WHERE USERNAME='" + jobId + "'";
            sqlCmd1 = "DELETE FROM WV_USR_GRP WHERE USERNAME='" + jobId + "'";
            sqlCmd2 = "DROP USER " + jobId + " CASCADE";
            using (Entities ctxData = new Entities())
            {
                tool.ExecuteSql(ctxData, sqlCmd1);
                tool.ExecuteSql(ctxData, sqlCmd2);
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

                // OSP ////////////

        public class Job
        {
            public string G3E_IDENTIFIER;
            public string G3E_ID;
            public string G3E_DESCRIPTION;
            public string WebViewName;
            public string G3E_STATE;
            public string G3E_STATUS;
            public string G3E_WORK_ORDER_ID;
            public string PROJECT_NO;
            public string EXC_ABB;
            public string Scheme_Type;
            public string Scheme_Name;
            public string G3E_OWNER;
            public string G3E_DESCRIPTION_2;
            public DateTime G3E_PlanStartDate;
            public DateTime G3E_PlanEndDate;
            public string WBS_NUM;
        }

        public class OSPJob
        {
            public int max;
            public List<Job> JobList = new List<Job>();
        }

        [WebMethod]
        public string TestOra()
        {
            Tools tool = new Tools();

            return tool.ExecuteStr(connString, "SELECT * FROM G3E_JOB");
        }

        [WebMethod]
        //public OSPJob GetOSPJob(string user, int start, int size, string searchKey, string boqCheck, string jobExc, string jobScheme, string jobYear2, string jobTypes)
        public OSPJob GetOSPJob(string user, int start, int size, string searchKey, string jobExc, string jobScheme, string jobYear2, string jobState)
        {
            OSPJob osp = new OSPJob();
            
            int jobYear = Convert.ToInt32(jobYear2);
            string UserGrp = "";

            using (Entities ctxData = new Entities())
            {
                var queryUser = (from d in ctxData.WV_USER
                                 where d.USERNAME.ToUpper() == user.ToUpper() || d.USERNAME.ToLower() == user.ToLower()
                                 select new { d.PTT_STATE, d.EXC, d.GROUPID });
                string UserPTT = "";
                string UserEXC = "";
                foreach (var a in queryUser)
                {
                    UserPTT = a.PTT_STATE;
                    UserEXC = a.EXC;
                    UserGrp = a.GROUPID;
                }

                int count = (from c in ctxData.G3E_JOB
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;

                if ((searchKey == null) && (jobExc == null) && (jobScheme == null) && (jobYear2 == null) && (UserGrp != "12") && (jobState == null)) // start page search and boq not filter
                {
                    int counts = (from d in ctxData.G3E_JOB
                                 where d.WEBVIEW == 1 && (d.PTT_ID == UserEXC || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("1");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.PTT_ID == UserEXC || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new { d.G3E_IDENTIFIER, d.G3E_ID, d.G3E_DESCRIPTION, d.JOB_STATE, d.G3E_STATUS, 
                                     d.WEBVIEW_NAME, d.WORK_ORDER_ID, d.PROJECT_NO, d.SCHEME_NAME,d.G3E_OWNER, d.WBS_NUM, d.SCHEME_TYPE }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);

                    }
                }
                else if ((searchKey == null) && (jobExc == null) && (jobScheme == null) && (jobYear2 == null) && (UserGrp == "12") && (jobState == null)) // start page search and boq not filter
                {
                    int counts = (from d in ctxData.G3E_JOB
                                 where d.WEBVIEW == 1 
                                 select d).Count();

                    osp.max = counts;
                    System.Diagnostics.Debug.WriteLine("total row : " + counts);
                    System.Diagnostics.Debug.WriteLine("2");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);

                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("3");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey))
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("4");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey))
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("5");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim()
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("6");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("7");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme
                                  select d).Count();

                    osp.max = counts;
                    System.Diagnostics.Debug.WriteLine("total row : " + counts);
                    System.Diagnostics.Debug.WriteLine("8");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("9");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.YEAR == jobYear
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("10");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim() && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("11");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim() && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim()
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("12");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE == jobScheme && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("13");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE == jobScheme && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE == jobScheme 
                                  select d).Count();

                    osp.max = counts;

                System.Diagnostics.Debug.WriteLine("14");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE == jobScheme 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("15");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.YEAR == jobYear
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("16");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("17");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("18");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 != "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("19");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 != "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.YEAR == jobYear
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("20");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 != "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("21");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 != "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("22");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("23");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("24");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 != "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("25");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 != "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("26");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 != "0") && (UserGrp != "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("27");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 != "0") && (UserGrp == "12") && (jobState == "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("28");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim()
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'A'");
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey))
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'B'" + jobState);
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() &&  (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey))
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'C'" + jobState);
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                        System.Diagnostics.Debug.WriteLine("Sent :" + a.JOB_STATE);
                    }

                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim()
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'D'" + jobState);
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey))
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'E'" +jobState);
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey))
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey))
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'E'" + jobState);
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey))
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && d.EXC_ABB.Trim() == jobExc.Trim() 
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'F'" + jobState + "  " + jobExc );
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && d.EXC_ABB.Trim() == jobExc.Trim() 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && d.EXC_ABB.Trim() == jobExc.Trim()
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'G'" + jobState + "  " + jobExc);
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && d.EXC_ABB.Trim() == jobExc.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && (UserGrp == "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && d.YEAR == jobYear
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'H'" + jobState + "  " + jobYear2);
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && (UserGrp != "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && d.YEAR == jobYear
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'I'" + jobState +" "  + jobYear2);
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && (UserGrp == "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim().ToUpper() == jobState.Trim().ToUpper() && d.SCHEME_TYPE.Trim().ToUpper() == jobScheme.Trim().ToUpper()
                                  select d).Count();

                    osp.max = counts;
                    System.Diagnostics.Debug.WriteLine("total row : " + counts);
                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'J'" + jobState + "   " + jobScheme);
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE.Trim().ToUpper() == jobScheme.Trim().ToUpper() && d.JOB_STATE.Trim() == jobState.Trim() 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && (UserGrp != "12") && (jobState != "Select"))
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && d.JOB_STATE.Trim().ToUpper() == jobState.Trim().ToUpper() && d.SCHEME_TYPE.Trim().ToUpper() == jobScheme.Trim().ToUpper()
                                  select d).Count();

                    osp.max = counts;

                    System.Diagnostics.Debug.WriteLine("P 'JobState != null' 'K'" + jobState + "  " + jobScheme);
                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE.Trim() == jobState.Trim() && d.SCHEME_NAME.Trim() == jobScheme.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else // page search and boq not filter
                {
                    int counts = (from d in ctxData.G3E_JOB
                                  where d.WEBVIEW == 1 && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)
                                 || d.EXC_ABB.Trim() == jobExc.Trim() || d.SCHEME_TYPE == jobScheme || d.YEAR == jobYear)
                                  select d).Count();

                    osp.max = counts;

                    var query = (from d in ctxData.G3E_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower()) && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey) 
                                 || d.EXC_ABB.Trim() == jobExc.Trim() || d.SCHEME_TYPE == jobScheme || d.YEAR == jobYear)
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM, 
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);

                        //System.Diagnostics.Debug.WriteLine(a.G3E_ID + " : " + a.G3E_IDENTIFIER);
                    }
                }
            }

            return osp;
        }

        [WebMethod]
        public OSPJob GetISPJob(string user, int start, int size, string searchKey, string jobExc, string jobScheme, string jobYear2, string jobState )
        {
            OSPJob osp = new OSPJob();
            int jobYear = Convert.ToInt32(jobYear2);
            string UserGrp = "";
            using (Entities ctxData = new Entities())
            {
                var queryUser = (from d in ctxData.WV_USER
                                 where d.USERNAME.ToUpper() == user.ToUpper() || d.USERNAME.ToLower() == user.ToLower()
                                 select new { d.PTT_STATE, d.GROUPID });
                string UserPTT = "";
                string GroupID = "";
                foreach (var a in queryUser)
                {
                    UserPTT = a.PTT_STATE;
                    GroupID = a.GROUPID;
                    UserGrp = a.GROUPID;
                }

                int count = (from c in ctxData.WV_ISP_JOB
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;

                if ((searchKey == null) && (jobExc == null) && (jobScheme == null) && (jobYear2 == null) && UserGrp != "12" && (jobState == null)) // start page search and boq not filter
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == null) && (jobExc == null) && (jobScheme == null) && (jobYear2 == null) && UserGrp == "12" && (jobState == null)) // start page search and boq not filter
                {
                    System.Diagnostics.Debug.WriteLine("1");
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    System.Diagnostics.Debug.WriteLine("2");
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey))
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    System.Diagnostics.Debug.WriteLine("Schma type 1");
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    System.Diagnostics.Debug.WriteLine("Schma type 2" + jobScheme);
                    System.Diagnostics.Debug.WriteLine("jobScheme : " + jobScheme);
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    System.Diagnostics.Debug.WriteLine("Schma type 11" + jobScheme.Trim().ToUpper());
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE.Trim().ToUpper () == jobScheme.Trim().ToUpper() 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    System.Diagnostics.Debug.WriteLine("Schma type 222");
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE.Trim().ToUpper() == jobScheme.Trim().ToUpper() && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.YEAR == jobYear && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim() && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE == jobScheme && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.YEAR == jobYear && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.YEAR == jobYear && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 != "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 != "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && 
                                 d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) &&
                                 d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 != "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) &&
                                 d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 != "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) &&
                                 d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }

                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 != "0") && UserGrp != "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear && 
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 != "0") && UserGrp == "12" && (jobState == "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE == jobScheme && d.YEAR == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE == jobState
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE == jobState &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE == jobState 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.JOB_STATE == jobState &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.JOB_STATE == jobState
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.JOB_STATE == jobState &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.JOB_STATE.Trim() == jobState.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.JOB_STATE.Trim() == jobState.Trim() &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    System.Diagnostics.Debug.WriteLine("Job Schame: " + jobScheme + "  jobstate : " + jobState );
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE.Trim().ToUpper() == jobScheme.Trim().ToUpper()  && d.JOB_STATE.Trim().ToUpper() == jobState.Trim().ToUpper()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    System.Diagnostics.Debug.WriteLine("2Job Schame: " + jobScheme + "  jobstate : " + jobState);
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE.Trim() == jobScheme.Trim() && d.JOB_STATE.Trim() == jobState.Trim() &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.YEAR == jobYear  && d.JOB_STATE.Trim() == jobState.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.YEAR == jobYear && d.JOB_STATE.Trim() == jobState.Trim() &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey !="" ) && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim() && d.JOB_STATE.Trim() == jobState.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.EXC_ABB.Trim() == jobExc.Trim() && d.JOB_STATE.Trim() == jobState.Trim() &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE.Trim() == jobScheme.Trim() && d.JOB_STATE.Trim() == jobState.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.SCHEME_TYPE.Trim() == jobScheme.Trim() && d.JOB_STATE == jobState.Trim() &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.YEAR == jobYear && d.JOB_STATE.Trim() == jobState.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.YEAR == jobYear && d.JOB_STATE.Trim() == jobState.Trim() &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending 
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE.Trim() == jobScheme.Trim() && d.JOB_STATE.Trim() == jobState.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.SCHEME_TYPE.Trim() == jobScheme.Trim() && d.JOB_STATE.Trim() == jobState.Trim()&&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.YEAR == jobYear && d.JOB_STATE.Trim() == jobState.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 != "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.EXC_ABB.Trim() == jobExc.Trim() && d.YEAR == jobYear && d.JOB_STATE.Trim() == jobState.Trim() &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp == "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE.Trim() == jobScheme.Trim() && d.JOB_STATE.Trim() == jobState.Trim()
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0") && UserGrp != "12" && (jobState != "Select"))
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && d.SCHEME_TYPE.Trim() == jobScheme.Trim() && d.JOB_STATE.Trim() == jobState.Trim() &&
                                 (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else // page search filter without boq
                {
                    var query = (from d in ctxData.WV_ISP_JOB
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == 1 && (d.SCHEME_NAME.ToLower().Contains(searchKey) || d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.EXC_ABB.Trim() == jobExc.Trim() ||
                                 d.SCHEME_TYPE == jobScheme || d.YEAR == jobYear) && (d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
            }

            return osp;
        }

        [WebMethod]
        public OSPJob GetRNOJob(string user, int start, int size, string searchKey)
        {
            OSPJob osp = new OSPJob();

            using (Entities ctxData = new Entities())
            {
                var queryUser = (from d in ctxData.WV_USER
                                 where d.USERNAME.ToUpper() == user.ToUpper() || d.USERNAME.ToLower() == user.ToLower()
                                 select new { d.PTT_STATE, d.GROUPID });
                string UserPTT = "";
                string GroupID = "";
                foreach (var a in queryUser)
                {
                    UserPTT = a.PTT_STATE;
                    GroupID = a.GROUPID;
                }

                int count = (from c in ctxData.WV_NONNETWORK_JOB
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;
                
                if (searchKey != null)// page search filter without boq
                {
                    var query = (from d in ctxData.WV_NONNETWORK_JOB
                                 orderby d.G3E_ID
                                 where d.WEBVIEW == 1 && (d.G3E_IDENTIFIER.Contains(searchKey) ||
                                 d.WEBVIEW_NAME.ToUpper().Contains(searchKey) ||
                                 d.SCHEME_NAME.ToUpper().Contains(searchKey)) && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower() || GroupID == "16") 
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        osp.JobList.Add(job);
                    }
                }
                else
                {
                    var query = (from d in ctxData.WV_NONNETWORK_JOB
                                 orderby d.G3E_ID
                                 where d.WEBVIEW == 1 && (d.PTT_ID == UserPTT || d.G3E_OWNER.ToUpper() == user.ToUpper() || d.G3E_OWNER.ToLower() == user.ToLower() || GroupID == "16")
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.WEBVIEW_NAME;
                        job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        osp.JobList.Add(job);
                    }
                }
            }

            return osp;
        }

        [WebMethod]
        //public OSPJob GetOSPJob(string user, int start, int size, string searchKey, string boqCheck, string jobExc, string jobScheme, string jobYear2, string jobTypes)
        public OSPJob GetLNMSJob(string user, int start, int size, string searchKey, string jobExc, string jobScheme, string jobYear2)
        {
            OSPJob osp = new OSPJob();

            int jobYear = Convert.ToInt32(jobYear2);

            using (Entities ctxData = new Entities())
            {
                var queryUser = (from d in ctxData.WV_USER
                                 where d.USERNAME.ToUpper() == user.ToUpper() || d.USERNAME.ToLower() == user.ToLower()
                                 select new { d.PTT_STATE, d.EXC });
                string UserPTT = "";
                string UserEXC = "";
                foreach (var a in queryUser)
                {
                    UserPTT = a.PTT_STATE;
                    UserEXC = a.EXC;
                }

                if ((searchKey == null) && (jobExc == null) && (jobScheme == null) && (jobYear2 == null)) // start page search and boq not filter
                {

                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 //orderby d.G3E_ID descending
                                 where d.WEBVIEW == null
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 });//.Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_IDENTIFIER))
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 == "0"))
                {
                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && (c.SCHEME_NAME.ToUpper().Contains(searchKey) || c.SCHEME_NAME.ToLower().Contains(searchKey))
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey))
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0"))
                {
                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && c.G3E_IDENTIFIER.Contains(jobExc.Trim())
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && d.G3E_IDENTIFIER.Contains(jobExc.Trim())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0"))
                {
                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && c.JOB_TYPE == jobScheme
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && d.JOB_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0"))
                {

                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && c.YEAR_INSTALL == jobYear
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && d.YEAR_INSTALL == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 == "0"))
                {
                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && (c.SCHEME_NAME.ToUpper().Contains(searchKey) || c.SCHEME_NAME.ToLower().Contains(searchKey)) && c.G3E_IDENTIFIER.Contains(jobExc.Trim())
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.G3E_IDENTIFIER.Contains(jobExc.Trim())
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 == "0"))
                {
                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && (c.SCHEME_NAME.ToUpper().Contains(searchKey) || c.SCHEME_NAME.ToLower().Contains(searchKey)) && c.JOB_TYPE == jobScheme
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.JOB_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme == "Select") && (jobYear2 != "0"))
                {
                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && (c.SCHEME_NAME.ToUpper().Contains(searchKey) || c.SCHEME_NAME.ToLower().Contains(searchKey)) && c.YEAR_INSTALL == jobYear
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.YEAR_INSTALL == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0"))
                {

                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && c.G3E_IDENTIFIER.Contains(jobExc.Trim()) && c.JOB_TYPE == jobScheme
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && d.G3E_IDENTIFIER.Contains(jobExc.Trim())  && d.JOB_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme == "Select") && (jobYear2 != "0"))
                {

                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && c.G3E_IDENTIFIER.Contains(jobExc.Trim()) && c.YEAR_INSTALL == jobYear
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && d.G3E_IDENTIFIER.Contains(jobExc.Trim())  && d.YEAR_INSTALL == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey == "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 != "0"))
                {
                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && c.JOB_TYPE == jobScheme && c.YEAR_INSTALL == jobYear
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && d.JOB_TYPE == jobScheme && d.YEAR_INSTALL == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 == "0"))
                {

                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && (c.SCHEME_NAME.ToUpper().Contains(searchKey) || c.SCHEME_NAME.ToLower().Contains(searchKey)) && c.G3E_IDENTIFIER.Contains(jobExc.Trim()) && c.JOB_TYPE == jobScheme
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.G3E_IDENTIFIER.Contains(jobExc.Trim())  && d.JOB_TYPE == jobScheme
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else if ((searchKey != "") && (jobExc == "Select") && (jobScheme != "Select") && (jobYear2 != "0"))
                {
                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && (c.SCHEME_NAME.ToUpper().Contains(searchKey) || c.SCHEME_NAME.ToLower().Contains(searchKey)) && c.G3E_IDENTIFIER.Contains(jobExc.Trim()) && c.YEAR_INSTALL == jobYear
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)) && d.JOB_TYPE == jobScheme && d.YEAR_INSTALL == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);

                        //System.Diagnostics.Debug.WriteLine(a.G3E_ID + " : " + a.G3E_IDENTIFIER);
                    }
                }
                else if ((searchKey == "") && (jobExc != "Select") && (jobScheme != "Select") && (jobYear2 != "0"))
                {
                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && c.G3E_IDENTIFIER.Contains(jobExc.Trim()) && c.JOB_TYPE == jobScheme && c.YEAR_INSTALL == jobYear
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && d.G3E_IDENTIFIER.Contains(jobExc.Trim())  && d.JOB_TYPE == jobScheme && d.YEAR_INSTALL == jobYear
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);
                    }
                }
                else // page search and boq not filter
                {
                    int count = (from c in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on c.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 where c.WEBVIEW == null && (c.SCHEME_NAME.ToUpper().Contains(searchKey) || c.SCHEME_NAME.ToLower().Contains(searchKey)
                                 || c.G3E_IDENTIFIER.Contains(jobExc.Trim()) || c.JOB_TYPE == jobScheme || c.YEAR_INSTALL == jobYear)
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.G3E_JOB
                                 //join fx in ctxData.GC_NETELEM on d.G3E_IDENTIFIER equals fx.SCHEME_NAME
                                 orderby d.G3E_ID descending
                                 where d.WEBVIEW == null && (d.SCHEME_NAME.ToUpper().Contains(searchKey) || d.SCHEME_NAME.ToLower().Contains(searchKey)
                                 || d.G3E_IDENTIFIER.Contains(jobExc.Trim())  || d.JOB_TYPE == jobScheme || d.YEAR_INSTALL == jobYear)
                                 select new
                                 {
                                     d.G3E_IDENTIFIER,
                                     d.G3E_ID,
                                     d.G3E_DESCRIPTION,
                                     d.JOB_STATE,
                                     d.G3E_STATUS,
                                     d.WEBVIEW_NAME,
                                     d.WORK_ORDER_ID,
                                     d.PROJECT_NO,
                                     d.SCHEME_NAME,
                                     d.G3E_OWNER,
                                     d.WBS_NUM,
                                     d.SCHEME_TYPE,
                                     d.G3E_CREATION,
                                     d.PLAN_START_DATE,
                                     d.PLAN_END_DATE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query.Distinct())
                    {
                        job = new Job();

                        job.G3E_ID = a.G3E_ID.ToString();
                        job.G3E_IDENTIFIER = a.G3E_IDENTIFIER.ToString();
                        job.G3E_DESCRIPTION = a.G3E_DESCRIPTION;
                        job.G3E_STATE = a.JOB_STATE;
                        job.G3E_STATUS = a.G3E_STATUS;
                        job.WebViewName = a.G3E_CREATION.ToString();
                        job.G3E_WORK_ORDER_ID = a.PLAN_START_DATE.ToString();
                        job.PROJECT_NO = a.PLAN_END_DATE.ToString();
                        //job.G3E_WORK_ORDER_ID = a.WORK_ORDER_ID;
                        //job.PROJECT_NO = a.PROJECT_NO;
                        job.Scheme_Name = a.SCHEME_NAME;
                        job.G3E_OWNER = a.G3E_OWNER;
                        job.WBS_NUM = a.WBS_NUM;
                        job.Scheme_Type = a.SCHEME_TYPE;
                        osp.JobList.Add(job);

                        //System.Diagnostics.Debug.WriteLine(a.G3E_ID + " : " + a.G3E_IDENTIFIER);
                    }
                }
            }

            return osp;
        }

        public bool migratedLmns(string lmnsjob, string nepsjob)
        {
            //string sqlCmd = "";
            bool success = false;
            string result;
            Tools tool = new Tools();
            try
            {
                OracleParameter[] oraPrm = new OracleParameter[2];

                oraPrm[0] = new OracleParameter("JOBID", OracleDbType.Varchar2);
                oraPrm[0].Value = lmnsjob;
                oraPrm[1] = new OracleParameter("G3EIDENTIFIER", OracleDbType.Varchar2);
                oraPrm[1].Value = nepsjob;

                result = tool.ExecuteStored(connString, "MIG_GC_G3E", CommandType.StoredProcedure, oraPrm, false);
                if (result != "fail")
                    success = true;

                System.Diagnostics.Debug.WriteLine("status : " + result);            
            }
            catch
            {
            }
            return success;
        }

        public bool assetGems(string jobid)
        {
            //string sqlCmd = "";
            bool success = false;
            string result;
            Tools tool = new Tools();
            try
            {
                OracleParameter[] oraPrm = new OracleParameter[1];

                oraPrm[0] = new OracleParameter("JOBID", OracleDbType.Varchar2);
                oraPrm[0].Value = jobid;

                result = tool.ExecuteStored(connString, "ASSET_TO_GEMS", CommandType.StoredProcedure, oraPrm, false);
                if (result != "fail")
                    success = true;

                System.Diagnostics.Debug.WriteLine("status : " + result);
            }
            catch
            {
            }
            return success;
        }

        [WebMethod]
        public OSPJob GetHandoverJob(string id, int start, int size)
        {
            OSPJob osp = new OSPJob();

            using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
            {
                var queryHandover = (from a in ctxData.BI_PROCESS
                                     where a.NEPS_JOB_ID.Trim() == id.Trim()
                                     select a).Count();
                var queryHandoverGRN = (from a in ctxData.BI_PROC_GRN_ISP
                                     where a.NEPS_JOB_ID.Trim() == id.Trim()
                                     select a).Count();

                var queryHandoverGRNOSP = (from a in ctxData.BI_PROC_GRN_OSP
                                        where a.NEPS_JOB_ID.Trim() == id.Trim()
                                        select a).Count();
                if (queryHandover > 0)
                {
                    var query = (from d in ctxData.BI_PROCESS
                                 orderby d.PROC_ID descending
                                 where d.NEPS_JOB_ID == id
                                 select new
                                 {
                                     d.PROC_ID,
                                     d.TIME_CREATED,
                                     d.STATUS,
                                     d.STACK_TRACE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.PROC_ID.ToString();
                        job.G3E_IDENTIFIER = a.TIME_CREATED.ToString();
                        job.G3E_DESCRIPTION = a.STATUS;
                        job.G3E_STATE = a.STACK_TRACE;
                        osp.JobList.Add(job);
                    }
                }
                if (queryHandoverGRN > 0)
                {
                    var query = (from d in ctxData.BI_PROC_GRN_ISP
                                 orderby d.PROC_ID descending
                                 where d.NEPS_JOB_ID == id
                                 select new
                                 {
                                     d.PROC_ID,
                                     d.TIME_CREATED,
                                     d.STATUS,
                                     d.STACK_TRACE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.PROC_ID.ToString();
                        job.G3E_IDENTIFIER = a.TIME_CREATED.ToString();
                        job.G3E_DESCRIPTION = a.STATUS;
                        job.G3E_STATE = a.STACK_TRACE;
                        osp.JobList.Add(job);
                    }
                }
                if (queryHandoverGRNOSP > 0)
                {
                    var query = (from d in ctxData.BI_PROC_GRN_OSP
                                 orderby d.PROC_ID descending
                                 where d.NEPS_JOB_ID == id
                                 select new
                                 {
                                     d.PROC_ID,
                                     d.TIME_CREATED,
                                     d.STATUS,
                                     d.STACK_TRACE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.PROC_ID.ToString();
                        job.G3E_IDENTIFIER = a.TIME_CREATED.ToString();
                        job.G3E_DESCRIPTION = a.STATUS;
                        job.G3E_STATE = a.STACK_TRACE;
                        osp.JobList.Add(job);
                    }
                }
            }

            return osp;
        }

        [WebMethod]
        public OSPJob GetHandoverISP(string id, int start, int size)
        {
            OSPJob osp = new OSPJob();

            using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
            {
                var queryHandover = (from a in ctxData.BI_PROCESS_ISP
                                     where a.NEPS_JOB_ID.Trim() == id.Trim()
                                     select a).Count();

                var queryHandoverGRN = (from a in ctxData.BI_PROC_GRN_ISP
                                     where a.NEPS_JOB_ID.Trim() == id.Trim()
                                     select a).Count();
                if (queryHandover > 0)
                {
                    var query = (from d in ctxData.BI_PROCESS_ISP
                                 orderby d.PROC_ID descending
                                 where d.NEPS_JOB_ID == id
                                 select new
                                 {
                                     d.PROC_ID,
                                     d.TIME_CREATED,
                                     d.STATUS,
                                     d.STACK_TRACE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.PROC_ID.ToString();
                        job.G3E_IDENTIFIER = a.TIME_CREATED.ToString();
                        job.G3E_DESCRIPTION = a.STATUS;
                        job.G3E_STATE = a.STACK_TRACE;
                        osp.JobList.Add(job);
                    }
                }
                else if (queryHandoverGRN > 0)
                {
                    var query = (from d in ctxData.BI_PROC_GRN_ISP
                                 orderby d.PROC_ID descending
                                 where d.NEPS_JOB_ID == id
                                 select new
                                 {
                                     d.PROC_ID,
                                     d.TIME_CREATED,
                                     d.STATUS,
                                     d.STACK_TRACE
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.PROC_ID.ToString();
                        job.G3E_IDENTIFIER = a.TIME_CREATED.ToString();
                        job.G3E_DESCRIPTION = a.STATUS;
                        job.G3E_STATE = a.STACK_TRACE;
                        osp.JobList.Add(job);
                    }
                }
            }

            return osp;
        }

        [WebMethod]
        public OSPJob GetAPPJob(string user, int start, int size, string searchKey)
        {
            OSPJob osp = new OSPJob();

            using (Entities ctxData = new Entities())
            {
                var queryUser = (from d in ctxData.WV_USER
                                 where d.USERNAME.ToUpper() == user.ToUpper() || d.USERNAME.ToLower() == user.ToLower() 
                                 select new { d.PTT_STATE, d.GROUPID });
                string UserPTT = "";
                string GroupID = "";
                foreach (var a in queryUser)
                {
                    UserPTT = a.PTT_STATE;
                    GroupID = a.GROUPID;
                }

                int count = (from c in ctxData.WV_USER_APPROVE
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;

                if (searchKey != null)// page search filter without boq
                {
                    var query = (from d in ctxData.WV_USER_APPROVE
                                 orderby d.JOB_ID
                                 where d.JOB_ID.Contains(searchKey) && (d.APPROVAL_USER.ToUpper() == user.ToUpper() || d.APPROVAL_USER.ToLower() == user.ToLower())
                                 select new
                                 {
                                     d.JOB_ID,
                                     d.REMARKS,
                                     d.STATUS,
                                     d.GLOBAL_STATUS,
                                     d.APPROVAL_USER
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.JOB_ID.ToString();
                        job.G3E_IDENTIFIER = a.JOB_ID.ToString();
                        job.G3E_DESCRIPTION = a.REMARKS;
                        job.G3E_STATE = a.STATUS;
                        job.G3E_STATUS = a.GLOBAL_STATUS;
                        job.G3E_OWNER = a.APPROVAL_USER;
                        osp.JobList.Add(job);
                    }
                }
                else
                {
                    var query = (from d in ctxData.WV_USER_APPROVE
                                 orderby d.JOB_ID
                                 where d.APPROVAL_USER.ToUpper() == user.ToUpper() || d.APPROVAL_USER.ToLower() == user.ToLower()
                                 select new
                                 {
                                     d.JOB_ID,
                                     d.REMARKS,
                                     d.STATUS,
                                     d.GLOBAL_STATUS,
                                     d.APPROVAL_USER
                                 }).Skip(start).Take(size);

                    Job job = new Job();

                    foreach (var a in query)
                    {
                        job = new Job();

                        job.G3E_ID = a.JOB_ID.ToString();
                        job.G3E_IDENTIFIER = a.JOB_ID.ToString();
                        job.G3E_DESCRIPTION = a.REMARKS;
                        job.G3E_STATE = a.STATUS;
                        job.G3E_STATUS = a.GLOBAL_STATUS;
                        job.G3E_OWNER = a.APPROVAL_USER;
                        osp.JobList.Add(job);
                    }
                }
            }

            return osp;
        }

        [WebMethod]
        public bool UpdateJob(Job job, string jobId) 
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            
            sqlCmd = "UPDATE G3E_JOB SET G3E_DESCRIPTION = '" + job.G3E_DESCRIPTION + "',G3E_DESCRIPTION_2 = '" + job.G3E_DESCRIPTION_2 + "', JOB_STATE = '" + job.G3E_STATE +
                "' WHERE G3E_IDENTIFIER='" + jobId + "'";
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }
            System.Diagnostics.Debug.WriteLine("bool =" + success);
            return success;
        }

        [WebMethod]
        public bool UpdateJobISP(Job job, string jobId ,string SDate,string EDate)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_ISP_JOB SET PLAN_START_DATE = '" + SDate + "', PLAN_END_DATE = '" +EDate + "', G3E_DESCRIPTION = '" + job.G3E_DESCRIPTION + "',G3E_DESCRIPTION_2 = '" + job.G3E_DESCRIPTION_2 + "', JOB_STATE = '" + job.G3E_STATE +
                "' WHERE G3E_IDENTIFIER='" + jobId + "'";
            System.Diagnostics.Debug.WriteLine("StartDate :" + SDate + "  EndDate :" + EDate);
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }
            System.Diagnostics.Debug.WriteLine("bool " + success);
            return success;
        }

        [WebMethod]
        public bool UpdateOwner(Job job, string jobId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE G3E_JOB SET G3E_OWNER = '" + job.G3E_OWNER + 
                "' WHERE G3E_IDENTIFIER='" + jobId + "'";
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

       
        }

        [WebMethod]
        public bool DeleteJob(string jobId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            System.Diagnostics.Debug.Write("#####");
            System.Diagnostics.Debug.WriteLine(jobId);

            sqlCmd = "DELETE FROM G3E_JOB " +
                " WHERE SCHEME_NAME='" + jobId + "'";
            System.Diagnostics.Debug.WriteLine(sqlCmd);

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        [WebMethod]
        public bool DeleteJobISP(string jobId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            System.Diagnostics.Debug.Write("#####");
            System.Diagnostics.Debug.WriteLine(jobId);

            sqlCmd = "DELETE FROM WV_ISP_JOB" +
                " WHERE SCHEME_NAME='" + jobId + "'";
            System.Diagnostics.Debug.WriteLine(sqlCmd);

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        [WebMethod]
        public string AddJobOSP(Job job, string username)
        {
            string result = "";
            Tools tool = new Tools();

            // temporary to handle job id.
            int count;
            using (Entities ctxData = new Entities())
            {
                count = (from c in ctxData.G3E_JOB
                             select c).Count();
            }

            string JOB_IDENTIFIER = "9910" + count.ToString();

            DateTime current = DateTime.Now;
            int year = current.Year;
            int year_counter = 0;
            using (Entities ctxData = new Entities())
            {
                var query = from c in ctxData.WV_SCHEME_COUNTER
                            where c.YEAR == year
                            select new { c.COUNTER };

                if (query.Count() > 0)
                {
                    var record = query.Single();
                    year_counter = Convert.ToInt32(record.COUNTER.ToString());
                    year_counter++;

                    tool.ExecuteSql(ctxData, "UPDATE WV_SCHEME_COUNTER SET COUNTER = " + year_counter.ToString() +
                        " WHERE YEAR = " + year.ToString());
                }
                else
                {
                    WV_SCHEME_COUNTER newRecord;
                    newRecord = new WV_SCHEME_COUNTER();
                    //year++;
                    newRecord.YEAR = year;
                    newRecord.COUNTER = 0;

                    ctxData.WV_SCHEME_COUNTER.AddObject(newRecord);

                    try
                    {
                        //ctxData.SaveChanges();
                        tool.ExecuteSql(ctxData, "INSERT INTO WV_SCHEME_COUNTER (YEAR, COUNTER) VALUES (" +
                            year + ", 0) ");
                    }
                    catch (Exception ex)
                    {
                        // Log error.
                        System.Diagnostics.Debug.WriteLine(ex.ToString());

                        return "fail";
                    }
                }
            }

            string scheme_name = job.EXC_ABB.ToUpper() + "-" + job.Scheme_Type.ToUpper() + "-" + year_counter.ToString() + "-" + year.ToString();

            string sqlStr = "exec CREATE_JOB_WORKFLOW('" + JOB_IDENTIFIER + "', 'TEST', 'TEST', '-', '-', '-', '-', '-', 'ok', '-');";

            OracleParameter[] oraPrm = new OracleParameter[21];

            oraPrm[0] = new OracleParameter("v_WO", OracleDbType.Varchar2);
            oraPrm[0].Value = JOB_IDENTIFIER;
            oraPrm[1] = new OracleParameter("v_DESC", OracleDbType.Varchar2);
            oraPrm[1].Value = job.G3E_DESCRIPTION;
            oraPrm[2] = new OracleParameter("v_title", OracleDbType.Varchar2);
            oraPrm[2].Value = "-";
            oraPrm[3] = new OracleParameter("v_location", OracleDbType.Varchar2);
            oraPrm[3].Value = "-";
            oraPrm[4] = new OracleParameter("v_plant", OracleDbType.Varchar2);
            oraPrm[4].Value = "-";
            oraPrm[5] = new OracleParameter("v_exchange", OracleDbType.Varchar2);
            oraPrm[5].Value = "-";
            oraPrm[6] = new OracleParameter("v_chargeable", OracleDbType.Varchar2);
            oraPrm[6].Value = "-";
            oraPrm[7] = new OracleParameter("v_designer", OracleDbType.Varchar2);
            oraPrm[7].Value = "-";
            oraPrm[8] = new OracleParameter("v_jobstatus", OracleDbType.Varchar2);
            oraPrm[8].Value = job.G3E_STATUS;
            oraPrm[9] = new OracleParameter("v_planner", OracleDbType.Varchar2);
            oraPrm[9].Value = "-";
            oraPrm[10] = new OracleParameter("v_webview", OracleDbType.Int32);
            oraPrm[10].Value = 1;
            oraPrm[11] = new OracleParameter("v_webviewname", OracleDbType.Varchar2);
            oraPrm[11].Value = job.WebViewName;
            oraPrm[12] = new OracleParameter("v_state", OracleDbType.Varchar2);
            oraPrm[12].Value = job.G3E_STATE;
            oraPrm[13] = new OracleParameter("v_excabb", OracleDbType.Varchar2);
            oraPrm[13].Value = job.EXC_ABB;
            oraPrm[14] = new OracleParameter("v_schemetype", OracleDbType.Varchar2);
            oraPrm[14].Value = job.Scheme_Type;
            oraPrm[15] = new OracleParameter("v_runningno", OracleDbType.Varchar2);
            oraPrm[15].Value = year_counter;
            oraPrm[16] = new OracleParameter("v_year", OracleDbType.Varchar2);
            oraPrm[16].Value = year;
            oraPrm[17] = new OracleParameter("v_schemename", OracleDbType.Varchar2);
            oraPrm[17].Value = scheme_name.ToUpper();
            oraPrm[18] = new OracleParameter("v_DESC_2", OracleDbType.Varchar2);
            oraPrm[18].Value = job.G3E_DESCRIPTION_2;
            oraPrm[19] = new OracleParameter("V_PlanStartDate", OracleDbType.Date);
            oraPrm[19].Value = job.G3E_PlanStartDate;
            oraPrm[20] = new OracleParameter("V_PlanEndDate", OracleDbType.Date);
            oraPrm[20].Value = job.G3E_PlanEndDate;

            result = tool.ExecuteStored(connString, "webview.CREATE_JOB_WORKFLOW",
                CommandType.StoredProcedure, oraPrm, true);
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + result);
            string PTT = "";
             using (Entities ctxData = new Entities())
            {
                var queryUser = (from d in ctxData.WV_EXC_MAST
                                 where d.EXC_ABB.Trim() == job.EXC_ABB.Trim()
                                 select new { d.PTT_ID});
                
                foreach (var a in queryUser)
                {
                    PTT = a.PTT_ID.Trim();
                }
                var queryUser2 = (from d in ctxData.WV_USER
                                 where d.USERNAME.ToUpper() == username.ToUpper() || d.USERNAME.ToLower() == username.ToLower()
                                 select new { d.USERNAME }).Single();

                username = queryUser2.USERNAME;
            }

            string sqlCmd = "UPDATE G3E_JOB SET G3E_OWNER = '" + username + "', PTT_ID = '" + PTT + "', SEGMENT = '" + PTT +
                "' WHERE SCHEME_NAME='" + scheme_name + "'";
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                tool.ExecuteSql(ctxData, sqlCmd);
            }

            if (result.Length >= 4)
            {
                if (result.Substring(0, 4).Equals("fail")) return "fail";
            }

            return result;            
        }

        [WebMethod]
        public string AddJobISPOSP(Job job, string username)
        {
            string result = "";
            Tools tool = new Tools();

            // temporary to handle job id.
            int count;
            using (Entities ctxData = new Entities())
            {
                count = (from c in ctxData.G3E_JOB
                         select c).Count();
            }

            string JOB_IDENTIFIER = "9910" + count.ToString();

            DateTime current = DateTime.Now;
            int year = current.Year;
            int year_counter = 0;
            using (Entities ctxData = new Entities())
            {
                var query = from c in ctxData.WV_SCHEME_COUNTER
                            where c.YEAR == year
                            select new { c.COUNTER };

                if (query.Count() > 0)
                {
                    var record = query.Single();
                    year_counter = Convert.ToInt32(record.COUNTER.ToString());
                    year_counter++;

                    tool.ExecuteSql(ctxData, "UPDATE WV_SCHEME_COUNTER SET COUNTER = " + year_counter.ToString() +
                        " WHERE YEAR = " + year.ToString());
                }
                else
                {
                    WV_SCHEME_COUNTER newRecord;
                    newRecord = new WV_SCHEME_COUNTER();
                    newRecord.YEAR = year;
                    newRecord.COUNTER = 0;

                    ctxData.WV_SCHEME_COUNTER.AddObject(newRecord);

                    try
                    {
                        //ctxData.SaveChanges();
                        tool.ExecuteSql(ctxData, "INSERT INTO WV_SCHEME_COUNTER (YEAR, COUNTER) VALUES (" +
                            year + ", 0) ");
                    }
                    catch (Exception ex)
                    {
                        // Log error.
                        System.Diagnostics.Debug.WriteLine(ex.ToString());

                        return "fail";
                    }
                }
            }

            string scheme_name = job.EXC_ABB.ToUpper() + "-" + job.Scheme_Type.ToUpper() + "-" + year_counter.ToString() + "-" + year.ToString();

            string sqlStr = "exec CREATE_JOB_WORKFLOW('" + JOB_IDENTIFIER + "', 'TEST', 'TEST', '-', '-', '-', '-', '-', 'ok', '-');";

            OracleParameter[] oraPrm = new OracleParameter[21];

            oraPrm[0] = new OracleParameter("v_WO", OracleDbType.Varchar2);
            oraPrm[0].Value = JOB_IDENTIFIER;
            oraPrm[1] = new OracleParameter("v_DESC", OracleDbType.Varchar2);
            oraPrm[1].Value = job.G3E_DESCRIPTION;
            oraPrm[2] = new OracleParameter("v_title", OracleDbType.Varchar2);
            oraPrm[2].Value = "-";
            oraPrm[3] = new OracleParameter("v_location", OracleDbType.Varchar2);
            oraPrm[3].Value = "-";
            oraPrm[4] = new OracleParameter("v_plant", OracleDbType.Varchar2);
            oraPrm[4].Value = "-";
            oraPrm[5] = new OracleParameter("v_exchange", OracleDbType.Varchar2);
            oraPrm[5].Value = "-";
            oraPrm[6] = new OracleParameter("v_chargeable", OracleDbType.Varchar2);
            oraPrm[6].Value = "-";
            oraPrm[7] = new OracleParameter("v_designer", OracleDbType.Varchar2);
            oraPrm[7].Value = "-";
            oraPrm[8] = new OracleParameter("v_jobstatus", OracleDbType.Varchar2);
            oraPrm[8].Value = job.G3E_STATUS;
            oraPrm[9] = new OracleParameter("v_planner", OracleDbType.Varchar2);
            oraPrm[9].Value = "-";
            oraPrm[10] = new OracleParameter("v_webview", OracleDbType.Int32);
            oraPrm[10].Value = 1;
            oraPrm[11] = new OracleParameter("v_webviewname", OracleDbType.Varchar2);
            oraPrm[11].Value = job.WebViewName;
            oraPrm[12] = new OracleParameter("v_state", OracleDbType.Varchar2);
            oraPrm[12].Value = job.G3E_STATE;
            oraPrm[13] = new OracleParameter("v_excabb", OracleDbType.Varchar2);
            oraPrm[13].Value = job.EXC_ABB;
            oraPrm[14] = new OracleParameter("v_schemetype", OracleDbType.Varchar2);
            oraPrm[14].Value = job.Scheme_Type;
            oraPrm[15] = new OracleParameter("v_runningno", OracleDbType.Varchar2);
            oraPrm[15].Value = year_counter;
            oraPrm[16] = new OracleParameter("v_year", OracleDbType.Varchar2);
            oraPrm[16].Value = year;
            oraPrm[17] = new OracleParameter("v_schemename", OracleDbType.Varchar2);
            oraPrm[17].Value = scheme_name.ToUpper();
            oraPrm[18] = new OracleParameter("v_DESC_2", OracleDbType.Varchar2);
            oraPrm[18].Value = job.G3E_DESCRIPTION_2;
            oraPrm[19] = new OracleParameter("V_PlanStartDate", OracleDbType.Date);
            oraPrm[19].Value = job.G3E_PlanStartDate;
            oraPrm[20] = new OracleParameter("V_PlanEndDate", OracleDbType.Date);
            oraPrm[20].Value = job.G3E_PlanEndDate;

            result = tool.ExecuteStored(connString, "webview_isposp.CREATE_ISPOSP_JOB_WORKFLOW",
                CommandType.StoredProcedure, oraPrm, true);

            System.Diagnostics.Debug.WriteLine("SQL Statement OSP :" + result);
            string PTT = "";
            using (Entities ctxData = new Entities())
            {
                var queryUser = (from d in ctxData.WV_EXC_MAST
                                 where d.EXC_ABB.Trim() == job.EXC_ABB.Trim()
                                 select new { d.PTT_ID });

                foreach (var a in queryUser)
                {
                    PTT = a.PTT_ID.Trim();
                }

                var queryUser2 = (from d in ctxData.WV_USER
                                  where d.USERNAME.ToUpper() == username.ToUpper() || d.USERNAME.ToLower() == username.ToLower()
                                  select new { d.USERNAME }).Single();

                username = queryUser2.USERNAME;
            }

            string sqlCmd = "UPDATE G3E_JOB SET G3E_OWNER = '" + username + "', PTT_ID = '" + PTT + "', SEGMENT = '" + PTT +
                "' WHERE SCHEME_NAME='" + scheme_name + "'";

            string sqlCmd2 = "UPDATE WV_ISP_JOB SET G3E_OWNER = '" + username + "', PTT_ID = '" + PTT + "', SEGMENT = '" + PTT +
                "' WHERE SCHEME_NAME='" + scheme_name + "'"; 

            System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                tool.ExecuteSql(ctxData, sqlCmd);
            }
            using (Entities ctxData = new Entities())
            {
                tool.ExecuteSql(ctxData, sqlCmd2);

            }

            if (result.Length >= 4)
            {
                if (result.Substring(0, 4).Equals("fail")) return "fail";
            }

            return result;
        }

        [WebMethod]
        public string AddJobISP(Job job, string username)
        {
            string result = "";
            Tools tool = new Tools();

            // temporary to handle job id.
            int count;
            using (Entities ctxData = new Entities())
            {
                count = (from c in ctxData.G3E_JOB
                         select c).Count();
            }

            string JOB_IDENTIFIER = "9910" + count.ToString();

            DateTime current = DateTime.Now;
            int year = current.Year;
            int year_counter = 0;
            using (Entities ctxData = new Entities())
            {
                var query = from c in ctxData.WV_SCHEME_COUNTER
                            where c.YEAR == year
                            select new { c.COUNTER };

                if (query.Count() > 0)
                {
                    var record = query.Single();
                    year_counter = Convert.ToInt32(record.COUNTER.ToString());
                    year_counter++;

                    tool.ExecuteSql(ctxData, "UPDATE WV_SCHEME_COUNTER SET COUNTER = " + year_counter.ToString() +
                        " WHERE YEAR = " + year.ToString());
                }
                else
                {
                    WV_SCHEME_COUNTER newRecord;
                    newRecord = new WV_SCHEME_COUNTER();
                    //year++;
                    newRecord.YEAR = year;
                    newRecord.COUNTER = 0;

                    ctxData.WV_SCHEME_COUNTER.AddObject(newRecord);

                    try
                    {
                        //ctxData.SaveChanges();
                        tool.ExecuteSql(ctxData, "INSERT INTO WV_SCHEME_COUNTER (YEAR, COUNTER) VALUES (" +
                            year + ", 0) ");
                    }
                    catch (Exception ex)
                    {
                        // Log error.
                        System.Diagnostics.Debug.WriteLine(ex.ToString());

                        return "fail";
                    }
                }
            }

            string scheme_name = job.EXC_ABB.ToUpper() + "-" + job.Scheme_Type.ToUpper() + "-" + year_counter.ToString() + "-" + year.ToString();
            string sqlStr = "exec CREATE_JOB_WORKFLOW('" + JOB_IDENTIFIER + "', 'TEST', 'TEST', '-', '-', '-', '-', '-', 'ok', '-');";

            OracleParameter[] oraPrm = new OracleParameter[21];

            oraPrm[0] = new OracleParameter("v_WO", OracleDbType.Varchar2);
            oraPrm[0].Value = JOB_IDENTIFIER;
            oraPrm[1] = new OracleParameter("v_DESC", OracleDbType.Varchar2);
            oraPrm[1].Value = job.G3E_DESCRIPTION;
            oraPrm[2] = new OracleParameter("v_title", OracleDbType.Varchar2);
            oraPrm[2].Value = "-";
            oraPrm[3] = new OracleParameter("v_location", OracleDbType.Varchar2);
            oraPrm[3].Value = "-";
            oraPrm[4] = new OracleParameter("v_plant", OracleDbType.Varchar2);
            oraPrm[4].Value = "-";
            oraPrm[5] = new OracleParameter("v_exchange", OracleDbType.Varchar2);
            oraPrm[5].Value = "-";
            oraPrm[6] = new OracleParameter("v_chargeable", OracleDbType.Varchar2);
            oraPrm[6].Value = "-";
            oraPrm[7] = new OracleParameter("v_designer", OracleDbType.Varchar2);
            oraPrm[7].Value = "-";
            oraPrm[8] = new OracleParameter("v_jobstatus", OracleDbType.Varchar2);
            oraPrm[8].Value = job.G3E_STATUS;
            oraPrm[9] = new OracleParameter("v_planner", OracleDbType.Varchar2);
            oraPrm[9].Value = "-";
            oraPrm[10] = new OracleParameter("v_webview", OracleDbType.Int32);
            oraPrm[10].Value = 1;
            oraPrm[11] = new OracleParameter("v_webviewname", OracleDbType.Varchar2);
            oraPrm[11].Value = job.WebViewName;
            oraPrm[12] = new OracleParameter("v_state", OracleDbType.Varchar2);
            oraPrm[12].Value = job.G3E_STATE;
            oraPrm[13] = new OracleParameter("v_excabb", OracleDbType.Varchar2);
            oraPrm[13].Value = job.EXC_ABB;
            oraPrm[14] = new OracleParameter("v_schemetype", OracleDbType.Varchar2);
            oraPrm[14].Value = job.Scheme_Type;
            oraPrm[15] = new OracleParameter("v_runningno", OracleDbType.Varchar2);
            oraPrm[15].Value = year_counter;
            oraPrm[16] = new OracleParameter("v_year", OracleDbType.Varchar2);
            oraPrm[16].Value = year;
            oraPrm[17] = new OracleParameter("v_schemename", OracleDbType.Varchar2);
            oraPrm[17].Value = scheme_name.ToUpper();
            oraPrm[18] = new OracleParameter("v_DESC_2", OracleDbType.Varchar2);
            oraPrm[18].Value = job.G3E_DESCRIPTION_2;
            oraPrm[19] = new OracleParameter("V_PlanStartDate", OracleDbType.Date);
            oraPrm[19].Value = job.G3E_PlanStartDate;
            oraPrm[20] = new OracleParameter("V_PlanEndDate", OracleDbType.Date);
            oraPrm[20].Value = job.G3E_PlanEndDate;

            result = tool.ExecuteStored(connString, "webview_isp.CREATE_ISP_JOB_WORKFLOW",
                CommandType.StoredProcedure, oraPrm, true);
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + result);
            //result = "ok";
            string PTT = "";
            using (Entities ctxData = new Entities())
            {
                var queryUser = (from d in ctxData.WV_EXC_MAST
                                 where d.EXC_ABB.Trim() == job.EXC_ABB.Trim()
                                 select new { d.PTT_ID });

                foreach (var a in queryUser)
                {
                    PTT = a.PTT_ID.Trim();
                }

                var queryUser2 = (from d in ctxData.WV_USER
                                  where d.USERNAME.ToUpper() == username.ToUpper() || d.USERNAME.ToLower() == username.ToLower()
                                  select new { d.USERNAME }).Single();

                username = queryUser2.USERNAME;
            }

            string sqlCmd = "UPDATE WV_ISP_JOB SET G3E_OWNER = '" + username + "', PTT_ID = '" + PTT + "', SEGMENT = '" + PTT +
                "' WHERE G3E_IDENTIFIER='" + result + "'";
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                tool.ExecuteSql(ctxData, sqlCmd);
            }

            //if(!result.Equals("ok")) return "fail";
            if (result.Length >= 4)
            {
                if (result.Substring(0, 4).Equals("fail")) return "fail";
            }

            //result = JOB_IDENTIFIER;

            return result;
        }

        [WebMethod]
        public string AddJobRNO(Job job, string username)
        {
            string result = "";
            Tools tool = new Tools();

            // temporary to handle job id.
            int count;
            using (Entities ctxData = new Entities())
            {
                count = (from c in ctxData.G3E_JOB
                         select c).Count();
            }

            string JOB_IDENTIFIER = "9910" + count.ToString();

            DateTime current = DateTime.Now;
            int year = current.Year;
            int year_counter = 0;
            using (Entities ctxData = new Entities())
            {
                var query = from c in ctxData.WV_SCHEME_COUNTER
                            where c.YEAR == year
                            select new { c.COUNTER };

                if (query.Count() > 0)
                {
                    var record = query.Single();
                    year_counter = Convert.ToInt32(record.COUNTER.ToString());
                    year_counter++;

                    tool.ExecuteSql(ctxData, "UPDATE WV_SCHEME_COUNTER SET COUNTER = " + year_counter.ToString() +
                        " WHERE YEAR = " + year.ToString());
                }
                else
                {
                    WV_SCHEME_COUNTER newRecord;
                    newRecord = new WV_SCHEME_COUNTER();
                    //year++;
                    newRecord.YEAR = year;
                    newRecord.COUNTER = 0;

                    ctxData.WV_SCHEME_COUNTER.AddObject(newRecord);

                    try
                    {
                        //ctxData.SaveChanges();
                        tool.ExecuteSql(ctxData, "INSERT INTO WV_SCHEME_COUNTER (YEAR, COUNTER) VALUES (" +
                            year + ", 0) ");
                    }
                    catch (Exception ex)
                    {
                        // Log error.
                        System.Diagnostics.Debug.WriteLine(ex.ToString());

                        return "fail";
                    }
                }
            }
            DateTime thisDay = DateTime.Now;
            string scheme_name = job.EXC_ABB + "-" + job.G3E_WORK_ORDER_ID + "-" + job.Scheme_Type + "-" + year_counter.ToString() + "-" + year.ToString() + thisDay.ToString("MMdd");

            System.Diagnostics.Debug.WriteLine(scheme_name);
            string sqlStr = "exec CREATE_JOB_WORKFLOW('" + JOB_IDENTIFIER + "', 'TEST', 'TEST', '-', '-', '-', '-', '-', 'ok', '-');";

            OracleParameter[] oraPrm = new OracleParameter[18];

            oraPrm[0] = new OracleParameter("v_WO", OracleDbType.Varchar2);
            oraPrm[0].Value = JOB_IDENTIFIER;
            oraPrm[1] = new OracleParameter("v_DESC", OracleDbType.Varchar2);
            oraPrm[1].Value = job.G3E_DESCRIPTION;
            oraPrm[2] = new OracleParameter("v_title", OracleDbType.Varchar2);
            oraPrm[2].Value = "-";
            oraPrm[3] = new OracleParameter("v_location", OracleDbType.Varchar2);
            oraPrm[3].Value = "-";
            oraPrm[4] = new OracleParameter("v_plant", OracleDbType.Varchar2);
            oraPrm[4].Value = "-";
            oraPrm[5] = new OracleParameter("v_exchange", OracleDbType.Varchar2);
            oraPrm[5].Value = "-";
            oraPrm[6] = new OracleParameter("v_chargeable", OracleDbType.Varchar2);
            oraPrm[6].Value = "-";
            oraPrm[7] = new OracleParameter("v_designer", OracleDbType.Varchar2);
            oraPrm[7].Value = "-";
            oraPrm[8] = new OracleParameter("v_jobstatus", OracleDbType.Varchar2);
            oraPrm[8].Value = job.G3E_STATUS;
            oraPrm[9] = new OracleParameter("v_planner", OracleDbType.Varchar2);
            oraPrm[9].Value = "-";
            oraPrm[10] = new OracleParameter("v_webview", OracleDbType.Int32);
            oraPrm[10].Value = 1;
            oraPrm[11] = new OracleParameter("v_webviewname", OracleDbType.Varchar2);
            oraPrm[11].Value = job.WebViewName;
            oraPrm[12] = new OracleParameter("v_state", OracleDbType.Varchar2);
            oraPrm[12].Value = job.G3E_STATE;
            oraPrm[13] = new OracleParameter("v_excabb", OracleDbType.Varchar2);
            oraPrm[13].Value = job.EXC_ABB;
            oraPrm[14] = new OracleParameter("v_schemetype", OracleDbType.Varchar2);
            oraPrm[14].Value = job.Scheme_Type;
            oraPrm[15] = new OracleParameter("v_runningno", OracleDbType.Varchar2);
            oraPrm[15].Value = year_counter;
            oraPrm[16] = new OracleParameter("v_year", OracleDbType.Varchar2);
            oraPrm[16].Value = year;
            oraPrm[17] = new OracleParameter("v_schemename", OracleDbType.Varchar2);
            oraPrm[17].Value = scheme_name;

            result = tool.ExecuteStored(connString, "webview_rno.CREATE_RNO_JOB_WORKFLOW",
                CommandType.StoredProcedure, oraPrm, true);
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + result);

            string PTT = "";
            using (Entities ctxData = new Entities())
            {
                var queryUser = (from d in ctxData.WV_EXC_MAST
                                 where d.EXC_ABB == job.EXC_ABB
                                 select new { d.PTT_ID });

                foreach (var a in queryUser)
                {
                    PTT = a.PTT_ID.Trim();
                }

                var queryUser2 = (from d in ctxData.WV_USER
                                  where d.USERNAME.ToUpper() == username.ToUpper() || d.USERNAME.ToLower() == username.ToLower()
                                  select new { d.USERNAME }).Single();

                username = queryUser2.USERNAME;
            }

            string sqlCmd = "UPDATE WV_NONNETWORK_JOB SET G3E_OWNER = '" + username + "', PTT_ID = '" + PTT +
                "' WHERE G3E_IDENTIFIER='" + result + "'";
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                tool.ExecuteSql(ctxData, sqlCmd);
            }

            //if(!result.Equals("ok")) return "fail";
            if (result.Length >= 4)
            {
                if (result.Substring(0, 4).Equals("fail")) return "fail";
            }

            //result = JOB_IDENTIFIER;

            return result;
        }

        [WebMethod]
        public string UpdateStatusRedmark(string id, string status, string description, string remarks)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            string result = "";

            sqlCmd = "UPDATE WV_NONNETWORK_JOB SET G3E_STATUS = '" + status + "', JOB_STATE = '" + status + "', G3E_DESCRIPTION = '" + description + "', SCH_DESC1 = '" + remarks + "' WHERE G3E_IDENTIFIER = '" + id + "'";
            System.Diagnostics.Debug.WriteLine("SQL Statement :" + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return result;
        } 

        [WebMethod]
        public string GetUserList(string userRole, string user)
        {
            System.Diagnostics.Debug.WriteLine("USERROLE : "+userRole + "!! USER : "+ user);
            using (Entities ctxData = new Entities())
            {
                var queryUser = (from a in ctxData.WV_USER
                            where a.USERNAME.ToUpper() == user.ToUpper() || a.USERNAME.ToLower() == user.ToLower()
                            select new { a.PTT_STATE, a.GROUPID});
                string ptt = "";
                string groupid = "";
                foreach (var qU in queryUser)
                {
                    ptt = qU.PTT_STATE;
                    groupid = qU.GROUPID;
                }
                System.Diagnostics.Debug.WriteLine("PTT : " + ptt + "!! GRPID : " + groupid);
                var query = (from a in ctxData.WV_USER
                            where a.USER_ROLES == userRole && a.GROUPID == groupid && a.PTT_STATE == ptt
                            select new { a.USERNAME});
                System.Diagnostics.Debug.WriteLine("count : " + query.Count());
                if (query.Count() > 0)
                {
                    string output = "";
                    //var d = query.Single();
                    int counter = 0;
                    foreach (var lp in query)
                    {
                        counter++;
                        System.Diagnostics.Debug.WriteLine(counter);

                        output += lp.USERNAME;

                        output += "!";
                    }

                    return output;
                }
                else
                {
                    return "no";
                }
            }
        }

        [WebMethod]
        public string GetProject(string projectNo)
        {
            DateTime MyDateTime1;
            DateTime MyDateTime2;

            using (Entities ctxData = new Entities())
            {
                var query = (projectNo == "*" ?
                    from a in ctxData.WV_GEM_PROJNO
                    join fx in ctxData.G3E_JOB on a.PROJECT_NO equals fx.PROJECT_NO orderby a.PROJECT_NO
                    select new { a.PROJECT_NO, a.START_DATE, a.END_DATE, a.PROJ_DESC, a.AMOUNT } :
                    from a in ctxData.WV_GEM_PROJNO
                    join fx in ctxData.G3E_JOB on a.PROJECT_NO equals fx.PROJECT_NO
                    where a.PROJECT_NO.Contains(projectNo.ToUpper()) || a.PROJECT_NO.Contains(projectNo.ToLower())
                    orderby a.PROJECT_NO
                    select new { a.PROJECT_NO, a.START_DATE, a.END_DATE, a.PROJ_DESC, a.AMOUNT });

                if (query.Count() > 0)
                {
                    string output = "";
                    //var d = query.Single();
                    int counter = 0;
                    foreach (var lp in query)
                    {
                        counter++;
                        System.Diagnostics.Debug.WriteLine(counter);
                        MyDateTime1 = new DateTime();
                        MyDateTime2 = new DateTime();

                        MyDateTime1 = DateTime.Parse(lp.START_DATE.ToString());
                        MyDateTime2 = DateTime.Parse(lp.END_DATE.ToString());

                        string carry = "";
                        output += lp.PROJECT_NO + "|" + lp.PROJ_DESC + "|" + MyDateTime1.ToString("dd-MM-yyyy") +
                            "|" + MyDateTime2.ToString("dd-MM-yyyy") + "|" + lp.AMOUNT;

                        output += "!";
                    }

                    return output;
                }
                else
                {
                    return "no";
                }
            }
        }

        [WebMethod]
        public string ChooseProject(string jobNo, string projectNo, string targetWBS)
        {
            System.Diagnostics.Debug.WriteLine(jobNo);
            System.Diagnostics.Debug.WriteLine(projectNo);
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE G3E_JOB SET PROJECT_NO = '" + projectNo + "', WBS_NUM = '" + targetWBS +
                "' WHERE G3E_IDENTIFIER='" + jobNo + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            if (success)
                return "ok";
            else
                return "fail";
        }

        [WebMethod]
        public string NRMChooseProject(string jobNo, string projectNo)
        {
            System.Diagnostics.Debug.WriteLine(jobNo);
            System.Diagnostics.Debug.WriteLine(projectNo);
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "SELECT ID FROM VFDITEM WHERE userdisplayname='SBS' and DTYPE='Plan'";
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            if (success)
                return "ok";
            else
                return "fail";
        }

        [WebMethod]
        public string ISPChooseProject(string jobNo, string projectNo, string targetWBS)
        {
            System.Diagnostics.Debug.WriteLine(jobNo);
            System.Diagnostics.Debug.WriteLine(projectNo);
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_ISP_JOB SET PROJECT_NO = '" + projectNo + "', WBS_NUM = '" + targetWBS +
                "' WHERE SCHEME_NAME='" + jobNo + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            if (success)
                return "ok";
            else
                return "fail";
        }

        [WebMethod]
        public int CountNETELEM(string jobId)
        {
            Tools tool = new Tools();
            string dataSQL;
            int result;
            try
            {
                OracleParameter[] oraPrm = new OracleParameter[1];

                oraPrm[0] = new OracleParameter("schemeName", OracleDbType.Varchar2);
                oraPrm[0].Value = jobId;

                dataSQL = tool.ExecuteStored(connString, "COUNTNETELEM", CommandType.StoredProcedure, oraPrm, true);
                result = Convert.ToInt32(dataSQL);
                System.Diagnostics.Debug.WriteLine("Result :" + result);
                return result;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return 1;
            }
        }

        [WebMethod]
        public bool CallProcedureGRN(string jobId)
        {
            Tools tool = new Tools();
            bool success = true;
            string result;
            try
            {
                OracleParameter[] oraPrm = new OracleParameter[1];

                oraPrm[0] = new OracleParameter("schemeName", OracleDbType.Varchar2);
                oraPrm[0].Value = jobId;

                result = tool.ExecuteStored(connString, "GRN_LOADSERVICEBOUNDARY", CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine("Result :" + result);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        public string AutoApproval(string jobId)
        {
            System.Diagnostics.Debug.WriteLine(jobId);
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            //sqlCmd = "UPDATE G3E_JOB SET JOB_STATE = 'COMMISSIONED', HANDOVER_STATUS = 'COMPLETED' WHERE G3E_IDENTIFIER='" + jobId + "'";
            sqlCmd = "UPDATE G3E_JOB SET HANDOVER_STATUS = 'COMPLETED' WHERE G3E_IDENTIFIER='" + jobId + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            if (success)
                return "ok";
            else
                return "fail";
        }

        [WebMethod]
        public string ResendApproval(string jobId, string description)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            string sqlCmd2 = "";
            string sqlCmd3 = "";
            using (Entities ctxData = new Entities())
            {
                var CariOSP = (from p in ctxData.G3E_JOB
                               where p.G3E_IDENTIFIER == jobId
                               select p).Count();

                var CariISP = (from p in ctxData.WV_ISP_JOB
                               where p.SCHEME_NAME == jobId
                               select p).Count();
                if (CariOSP > 0)
                {
                    sqlCmd = "UPDATE G3E_JOB SET JOB_STATE = 'PENDING APP', G3E_DESCRIPTION_2='" + description + "', HANDOVER_STATUS = 'COMPLETED' WHERE G3E_IDENTIFIER='" + jobId + "'";
                }
                if (CariISP > 0)
                {

                    sqlCmd2 = "UPDATE WV_ISP_JOB SET JOB_STATE = 'PENDING APP', G3E_DESCRIPTION_2='" + description + "', HANDOVER_STATUS = 'COMPLETED' WHERE G3E_IDENTIFIER='" + jobId + "'"; 
                }

                sqlCmd3 = "UPDATE WV_USER_APPROVE SET STATUS = 'PENDING APP', REMARKS = 'RE-SENT FOR APPROVAL (" + description + ")' WHERE JOB_ID='" + jobId + "'"; 

                tool.ExecuteSql(ctxData, sqlCmd);
                tool.ExecuteSql(ctxData, sqlCmd2);
                success = tool.ExecuteSql(ctxData, sqlCmd3);
            }

            if (success)
                return "ok";
            else
                return "fail";
        }

        [WebMethod]
        public string ISPAutoApproval(string jobId)
        {
            System.Diagnostics.Debug.WriteLine(jobId);
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_ISP_JOB SET HANDOVER_STATUS = 'COMPLETED' WHERE G3E_IDENTIFIER='" + jobId + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            if (success)
            {
                return "ok";
            }
            else
            {
                return "fail";
            }
        }

        public bool AddApproval(string schemeName, string username, string jobId)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();
                int count;
                using (Entities ctxData = new Entities())
                {
                    count = (from c in ctxData.WV_APPROVAL
                             select c).Count();

                    var queryUser2 = (from d in ctxData.WV_USER
                                      where d.USERNAME.ToUpper() == username.ToUpper() || d.USERNAME.ToLower() == username.ToLower()
                                      select new { d.USERNAME }).Single();

                    username = queryUser2.USERNAME;
                }

                int approvalid = 1000 + count;


                string sqlStr = "insert into WV_APPROVAL (APPROVAL_ID,SCHEME_NAME,USERNAME,APPROVAL_STATUS,JOB_STATUS";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[11];

                oraPrm[0] = new OracleParameter("V_APPROVALID", OracleDbType.Varchar2);
                oraPrm[0].Value = approvalid;
                oraPrm[1] = new OracleParameter("v_SCHEME_NAME", OracleDbType.Varchar2);
                oraPrm[1].Value = schemeName;
                oraPrm[2] = new OracleParameter("v_USERNAME", OracleDbType.Varchar2);
                oraPrm[2].Value = username;
                oraPrm[3] = new OracleParameter("v_APPROVAL_STATUS", OracleDbType.Varchar2);
                oraPrm[3].Value = "WAITING";
                oraPrm[4] = new OracleParameter("v_JOB_STATUS", OracleDbType.Varchar2);
                oraPrm[4].Value = "ACTIVE";
                

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);

                string sqlCmd = "";

                sqlCmd = "UPDATE G3E_JOB SET JOB_STATE = 'UN_CONSTRUCT', HANDOVER_STATUS = 'WAITING' WHERE G3E_IDENTIFIER='" + jobId + "'";

                using (Entities ctxData = new Entities())
                {
                    success = tool.ExecuteSql(ctxData, sqlCmd);
                }

                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

        [WebMethod]
        public string GetOwnerList(string ptt, string groupid)
        {
            using (Entities ctxData = new Entities())
            {
                var query = from a in ctxData.WV_USER
                            where a.PTT_STATE== ptt && a.GROUPID == groupid
                            select new { a.USERNAME };

                if (query.Count() > 0)
                {
                    string output = "";
                    //var d = query.Single();
                    int counter = 0;
                    foreach (var lp in query)
                    {
                        counter++;
                        System.Diagnostics.Debug.WriteLine(counter);

                        string carry = "";
                        output += lp.USERNAME;

                        output += "!";
                    }

                    return output;
                }
                else
                {
                    return "no";
                }
            }
        }

        //public bool linkIOSP(string job ,string gtech)
        //{ 
        //  //string str = "";
        //    Int64 ID = 0;

        //    try
        //    {
        //        using (Entities_NRM ctxNRM = new Entities_NRM())
        //        {
        //            var query = (from a in ctxNRM.PROJECTs
        //                         where a.NAME.Contains(job)
        //                         select new {a.NAME,a.ID});
        //            foreach (var a in query)
        //            {
        //                ID = a.ID;
        //            }

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        System.Diagnostics.Debug.WriteLine(ex);
        //    }
        
        //        return true;
        //}
        

        //public class User
        //{
        //    public string Username;
        //    public string PTT;
        //    public string GroupId;
        //}

        //[WebMethod]
        //public User GetOwnerListByPTT(string ptt, string groupId)
        //{

        //    User OwnerList = new User();
        //    using (Entities ctxData = new Entities())
        //    {
        //        System.Diagnostics.Debug.WriteLine("PTT : " + ptt + " GROUPID :"+groupId);
        //        //int req = Convert.ToInt16(id);
        //        var query = (from d in ctxData.WV_USER
        //                     where d.PTT_STATE == ptt && d.GROUPID == groupId
        //                     select new { d.USERNAME });

        //        foreach (var a in query)
        //        {
        //            OwnerList.Username = a.USERNAME;
        //        }
        //    }

        //    return OwnerList;
        //}

        //Maintenance table
        ///////// MILEAGE RATES ////////////

        public class MileageRates
        {
            public string GRADE;
            public string GRADE_DESC;
            public string KM_LLEV1;
            public string KM_LLEV2;
            public string KM_LLEV3;
            public string KM_HLEV1;
            public string KM_HLEV2;
            public string KM_HLEV3;
            public string KM_RATE1;
            public string KM_RATE2;
            public string KM_RATE3;
        }

        public class OSPMRates
        {
            public int max;
            public List<MileageRates> MileageRatesList = new List<MileageRates>();
        }

        [WebMethod]
        public OSPMRates GetOSPMileageRates(int start, int size)
        {
            OSPMRates osp = new OSPMRates();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_MILEAGE_RATES
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;

                var query = (from d in ctxData.WV_MILEAGE_RATES
                             orderby d.GRADE
                             select new { d.GRADE, d.GRADE_DESC, d.KM_HLEV1, d.KM_HLEV2, d.KM_HLEV3, d.KM_LLEV1, d.KM_LLEV2, d.KM_LLEV3, d.KM_RATE1, d.KM_RATE2, d.KM_RATE3 }).Skip(start).Take(size);

                foreach (var a in query)
                {
                    MileageRates mileageRates = new MileageRates();

                    mileageRates.GRADE = a.GRADE;
                    mileageRates.GRADE_DESC = a.GRADE_DESC;
                    mileageRates.KM_HLEV1 = a.KM_HLEV1.ToString();
                    mileageRates.KM_LLEV1 = a.KM_LLEV1.ToString();
                    mileageRates.KM_RATE1 = a.KM_RATE1.ToString();
                    osp.MileageRatesList.Add(mileageRates);

                    System.Diagnostics.Debug.WriteLine(a.GRADE + " : " + a.GRADE_DESC);
                }
            }

            return osp;
        }

        public bool DeleteMRates(string grade)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_MILEAGE_RATES WHERE GRADE = '" + grade + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool UpdateMRates(MileageRates rates, string grade)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_MILEAGE_RATES SET GRADE_DESC = '" + rates.GRADE_DESC +
                "', KM_LLEV1 = '" + rates.KM_LLEV1 +
                "', KM_LLEV2 = '" + rates.KM_LLEV2 +
                "', KM_LLEV3 = '" + rates.KM_LLEV3 +
                "', KM_HLEV1 = '" + rates.KM_HLEV1 +
                "', KM_HLEV2 = '" + rates.KM_HLEV2 +
                "', KM_HLEV3 = '" + rates.KM_HLEV3 +
                "', KM_RATE1 = '" + rates.KM_RATE1 +
                "', KM_RATE2 = '" + rates.KM_RATE2 +
                "', KM_RATE3 = '" + rates.KM_RATE3 +
                "' WHERE grade='" + grade + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddMRates(MileageRates rates)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_MILEAGE_RATES (GRADE,GRADE_DESC,KM_LLEV1,KM_LLEV2,KM_LLEV3,KM_HLEV1,KM_HLEV2,KM_HLEV3,KM_RATE1,KM_RATE2,KM_RATE3";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[11];

                oraPrm[0] = new OracleParameter("v_grade", OracleDbType.Varchar2);
                oraPrm[0].Value = rates.GRADE;
                oraPrm[1] = new OracleParameter("v_DESC", OracleDbType.Varchar2);
                oraPrm[1].Value = rates.GRADE_DESC;
                oraPrm[2] = new OracleParameter("v_llev1", OracleDbType.Varchar2);
                oraPrm[2].Value = rates.KM_LLEV1;
                oraPrm[3] = new OracleParameter("v_llev2", OracleDbType.Varchar2);
                oraPrm[3].Value = rates.KM_LLEV2;
                oraPrm[4] = new OracleParameter("v_llev3", OracleDbType.Varchar2);
                oraPrm[4].Value = rates.KM_LLEV3;
                oraPrm[5] = new OracleParameter("v_hlev1", OracleDbType.Varchar2);
                oraPrm[5].Value = rates.KM_HLEV1;
                oraPrm[6] = new OracleParameter("v_hlev2", OracleDbType.Varchar2);
                oraPrm[6].Value = rates.KM_HLEV2;
                oraPrm[7] = new OracleParameter("v_hlev3", OracleDbType.Varchar2);
                oraPrm[7].Value = rates.KM_HLEV3;
                oraPrm[8] = new OracleParameter("v_rate1", OracleDbType.Decimal);
                oraPrm[8].Value = rates.KM_RATE1;
                oraPrm[9] = new OracleParameter("v_rate2", OracleDbType.Decimal);
                oraPrm[9].Value = rates.KM_RATE2;
                oraPrm[10] = new OracleParameter("v_rate3", OracleDbType.Decimal);
                oraPrm[10].Value = rates.KM_RATE3;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }
        //////////// FEATURE MASTER MAINTENANCE ////////////
        public class FeatureMaintenance
        {
            public string FEATURE_STATE;
            public string FEATURE_TYPE;
            public string LOOKUP_TABLE;
            public string MIN_MATERIAL;
            public string DAY;
            public string NIGHT;
            public string WEEKEND;
            public string HOLIDAY;
            public string CONTRACT_NO;
            public string ITEM_NO;
            public string FEAT_MAST_NO;
            public string FEAT_MAST_CONTRACT_NO;
        }

        public class OSPFeatureMaintenance
        {
            public int max;
            public List<FeatureMaintenance> FeatureMaintenanceList = new List<FeatureMaintenance>();
        }

        [WebMethod]
        public OSPFeatureMaintenance GetOSPFeatureMaintenanceJKH(int start, int size, string searchKey)
        {
            OSPFeatureMaintenance osp = new OSPFeatureMaintenance();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null)
                {
                    int count = (from c in ctxData.WV_FEAT_MAST
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_FEAT_MAST
                                 orderby d.MIN_MATERIAL
                                 select new { d.FEAT_MAST_NO,d.MIN_MATERIAL, d.FEATURE_STATE, d.LOOKUP_TABLE, d.DAY, d.NIGHT, d.WEEKEND, d.HOLIDAY }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        int countQ = (from b in ctxData.WV_LOOKUPTABLE 
                                              where b.LOOKUP_TABLE == a.LOOKUP_TABLE
                                              select b.FEATURE_TYPE).Count();
                        string featureType = "";
                        if (countQ != 0)
                        {
                            featureType = (from b in ctxData.WV_LOOKUPTABLE
                                                  where b.LOOKUP_TABLE == a.LOOKUP_TABLE
                                                  select b.FEATURE_TYPE).Single();
                        }
                       

                        FeatureMaintenance FeatureMaintenance = new FeatureMaintenance();
                        FeatureMaintenance.MIN_MATERIAL = a.MIN_MATERIAL;
                        FeatureMaintenance.FEATURE_STATE = a.FEATURE_STATE;
                        FeatureMaintenance.FEATURE_TYPE = featureType;
                        FeatureMaintenance.DAY = a.DAY.ToString();
                        FeatureMaintenance.NIGHT = a.NIGHT.ToString();
                        FeatureMaintenance.HOLIDAY = a.HOLIDAY.ToString();
                        FeatureMaintenance.WEEKEND = a.WEEKEND.ToString();
                        FeatureMaintenance.FEAT_MAST_NO = a.FEAT_MAST_NO.ToString();
                        osp.FeatureMaintenanceList.Add(FeatureMaintenance);

                        System.Diagnostics.Debug.WriteLine(a.MIN_MATERIAL + " : " + a.DAY.ToString());
                    }
                }
                else
                {
                    int count = (from c in ctxData.WV_FEAT_MAST
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_FEAT_MAST join s in ctxData.WV_LOOKUPTABLE on d.LOOKUP_TABLE equals s.LOOKUP_TABLE
                                 where d.MIN_MATERIAL.Contains(searchKey) || s.FEATURE_TYPE.Contains(searchKey)
                                 orderby d.MIN_MATERIAL
                                 select new { d.FEAT_MAST_NO,d.MIN_MATERIAL, d.FEATURE_STATE, d.LOOKUP_TABLE, d.DAY, d.NIGHT, d.WEEKEND, d.HOLIDAY }).Skip(start).Take(size);
                    
                   
                        foreach (var a in query)
                        {
                            System.Diagnostics.Debug.WriteLine(a.LOOKUP_TABLE);
                            string featureType = (from b in ctxData.WV_LOOKUPTABLE
                                                  where b.LOOKUP_TABLE == a.LOOKUP_TABLE
                                                  select b.FEATURE_TYPE).Single();
                            FeatureMaintenance FeatureMaintenance = new FeatureMaintenance();
                            FeatureMaintenance.MIN_MATERIAL = a.MIN_MATERIAL;
                            FeatureMaintenance.FEATURE_STATE = a.FEATURE_STATE;
                            FeatureMaintenance.FEATURE_TYPE = featureType;
                            FeatureMaintenance.DAY = a.DAY.ToString();
                            FeatureMaintenance.NIGHT = a.NIGHT.ToString();
                            FeatureMaintenance.HOLIDAY = a.HOLIDAY.ToString();
                            FeatureMaintenance.WEEKEND = a.WEEKEND.ToString();
                            FeatureMaintenance.FEAT_MAST_NO = a.FEAT_MAST_NO.ToString();
                            osp.FeatureMaintenanceList.Add(FeatureMaintenance);

                            System.Diagnostics.Debug.WriteLine(a.MIN_MATERIAL + " : " + a.DAY.ToString());
                        }
                    
                }
            }

            return osp;
        }

        public bool DeleteFeatureMaintenanceJKH(string txtFeatMastNo)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_FEAT_MAST WHERE FEAT_MAST_NO= '" + txtFeatMastNo + "'"; 
            
            System.Diagnostics.Debug.WriteLine(sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool ValidateNewFeatureMastMaintenance(string minMat, string puid, string col)
        {
             int count = 0;
            using (Entities ctxData = new Entities())
            {
               
                if (col == "DAY")
                {
                    if (puid != "")
                    {
                        int puidNum = Convert.ToInt32(puid);
                        count = (from a in ctxData.WV_FEAT_MAST
                                 where a.MIN_MATERIAL == minMat && a.DAY == puidNum
                                 select a).Count();
                    }
                }
                else if (col == "NIGHT")
                {
                    if (puid != "")
                    {
                        int puidNum = Convert.ToInt32(puid);
                        count = (from a in ctxData.WV_FEAT_MAST
                                 where a.MIN_MATERIAL == minMat && a.NIGHT == puidNum
                                 select a).Count();
                    }
                }
                else if (col == "WEEKEND")
                {
                    if (puid != "")
                    {
                        int puidNum = Convert.ToInt32(puid);
                        count = (from a in ctxData.WV_FEAT_MAST
                                 where a.MIN_MATERIAL == minMat && a.WEEKEND == puidNum
                                 select a).Count();
                    }
                }
                else if (col == "HOLIDAY")
                {
                    if (puid != "")
                    {
                        int puidNum = Convert.ToInt32(puid);
                        count = (from a in ctxData.WV_FEAT_MAST
                                 where a.MIN_MATERIAL == minMat && a.HOLIDAY == puidNum
                                 select a).Count();
                    }
                }
            }
            if (count == 0)
                return true;
            else
                return false;
           
        }

        public bool AddFeatureTable(string strSent)
        {
            bool success = true ;
            
            try
            {
                 Tools tool = new Tools();    
                 int NumberOfTab = 0;
                 char s = (';');
                 string[] MyArrayTab = strSent.Split(s);
                 //string Suuu;
                 NumberOfTab = Convert.ToInt16(MyArrayTab[0]);
                 string result="";
                 switch (NumberOfTab)
                 {
                     case 0://innerduct
                         //data da boleh insert
                         //System.Diagnostics.Debug.WriteLine("MyArrayTab[0] : |" + MyArrayTab[0] + "| MyArrayTab[1] : |" + MyArrayTab[1] + " | MyArrayTab[2] : |" + MyArrayTab[2] + " | MyArrayTab[3] : |" + MyArrayTab[3]);
                         string sqlStr = "insert into REF_CIV_INNERDUCT (MIN_MATERIAL,INNERDUCT_NUM,OUTER_DIAMETER";
                                          sqlStr += ") values ";
                                          
                                          OracleParameter[] oraPrm = new OracleParameter[3];
                                          
                                          oraPrm[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                                          oraPrm[0].Value = MyArrayTab[1];
                                          oraPrm[1] = new OracleParameter("v_INNERDUCT_NUM", OracleDbType.Int16);
                                          oraPrm[1].Value = MyArrayTab[2];
                                          oraPrm[2] = new OracleParameter("v_OUTER_DIAMETER", OracleDbType.Varchar2);
                                          oraPrm[2].Value = MyArrayTab[3];

                                         System.Diagnostics.Debug.WriteLine("MIN_MATERIAL : |" + MyArrayTab[1] + "| INNERDUCT_NUM : |" + MyArrayTab[2] + "| OUTER_DIAMETER : " + MyArrayTab[3]);
                                         result = tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);

                                         if (result == "ok")
                                         { success = true; }
                                         else
                                         {
                                             success = false;
                                         }    
                            break;

                     case 1://Manhole
                            //data da boleh insert
                            //System.Diagnostics.Debug.WriteLine("v_FEATURE_TYPE_ENG : |" + MyArrayTab[1] + "| v_LENGTH : |" + MyArrayTab[2] + "| v_LENGTH_DESC : " + MyArrayTab[3] + "| v_WIDTH : |" + MyArrayTab[4] + "| v_WIDTH_DESC : " + MyArrayTab[5] + "| v_HEIGHT : |" + MyArrayTab[6] + "| v_HEIGHT_DESC : " + MyArrayTab[7] + "| v_DESCRIPTION_ENG : |" + MyArrayTab[8] + "| v_MIN_MATERIAL : " + MyArrayTab[9] + "| v_MIN_MATERIAL_ENG_DESC : |" + MyArrayTab[10] + "| v_ASSET_CATEGORY : " + MyArrayTab[11] + "| v_TECHNOLOGY : |" + MyArrayTab[12] + "| v_MATERIAL_TYPE : " + MyArrayTab[13] + "| v_DELETE_FLAG : |" + MyArrayTab[14] + "| v_ENGRG_ENG_DESC : " + MyArrayTab[15] + "| v_ENGRG_PART_NO : |" + MyArrayTab[16] + "| v_TRACKABLE : " + MyArrayTab[17] + "| v_MAJOR : " + MyArrayTab[18]);

                            string sqlStrManHl = "insert into REF_MANHL (FEATURE_TYPE_ENG,LENGTH,LENGTH_DESC,WIDTH,WIDTH_DESC,HEIGHT,HEIGHT_DESC,DESCRIPTION_ENG,MIN_MATERIAL,MIN_MATERIAL_ENG_DESC,ASSET_CATEGORY,TECHNOLOGY, MATERIAL_TYPE,DELETE_FLAG,ENGRG_ENG_DESC,ENGRG_PART_NO,TRACKABLE,MAJOR";
                            sqlStrManHl += ") values ";
                            
                            OracleParameter[] oraPrm1 = new OracleParameter[18];

                            oraPrm1[0] = new OracleParameter("v_FEATURE_TYPE_ENG", OracleDbType.Varchar2);
                            oraPrm1[0].Value = MyArrayTab[1];
                            oraPrm1[1] = new OracleParameter("v_LENGTH", OracleDbType.Int16);
                            oraPrm1[1].Value = MyArrayTab[2];
                            oraPrm1[2] = new OracleParameter("v_LENGTH_DESC", OracleDbType.Varchar2);
                            oraPrm1[2].Value = MyArrayTab[3];
                            oraPrm1[3] = new OracleParameter("v_WIDTH", OracleDbType.Int16);
                            oraPrm1[3].Value = MyArrayTab[4];
                            oraPrm1[4] = new OracleParameter("v_WIDTH_DESC", OracleDbType.Varchar2);
                            oraPrm1[4].Value = MyArrayTab[5];
                            oraPrm1[5] = new OracleParameter("v_HEIGHT", OracleDbType.Int16);
                            oraPrm1[5].Value = MyArrayTab[6];
                            oraPrm1[6] = new OracleParameter("v_HEIGHT_DESC", OracleDbType.Varchar2);
                            oraPrm1[6].Value = MyArrayTab[7];
                            oraPrm1[7] = new OracleParameter("v_DESCRIPTION_ENG", OracleDbType.Varchar2);
                            oraPrm1[7].Value = MyArrayTab[8];
                            oraPrm1[8] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm1[8].Value = MyArrayTab[9];
                            oraPrm1[9] = new OracleParameter("v_MIN_MATERIAL_ENG_DESC", OracleDbType.Varchar2);
                            oraPrm1[9].Value = MyArrayTab[10];
                            oraPrm1[10] = new OracleParameter("v_ASSET_CATEGORY", OracleDbType.Varchar2);
                            oraPrm1[10].Value = MyArrayTab[11];
                            oraPrm1[11] = new OracleParameter("v_TECHNOLOGY", OracleDbType.Varchar2);
                            oraPrm1[11].Value = MyArrayTab[12];
                            oraPrm1[12] = new OracleParameter("v_MATERIAL_TYPE", OracleDbType.Varchar2);
                            oraPrm1[12].Value = MyArrayTab[13];
                            oraPrm1[13] = new OracleParameter("v_DELETE_FLAG", OracleDbType.Varchar2);
                            oraPrm1[13].Value = MyArrayTab[14];
                            oraPrm1[14] = new OracleParameter("v_ENGRG_ENG_DESC", OracleDbType.Varchar2);
                            oraPrm1[14].Value = MyArrayTab[15];
                            oraPrm1[15] = new OracleParameter("v_ENGRG_PART_NO", OracleDbType.Varchar2);
                            oraPrm1[15].Value = MyArrayTab[16];
                            oraPrm1[16] = new OracleParameter("v_TRACKABLE", OracleDbType.Varchar2);
                            oraPrm1[16].Value = MyArrayTab[17];
                            oraPrm1[17] = new OracleParameter("v_MAJOR", OracleDbType.Varchar2);
                            oraPrm1[17].Value = MyArrayTab[18];
                            if (result == "ok")
                            { success = true; }
                            else
                            {
                                success = false;
                            }
                            //System.Diagnostics.Debug.WriteLine("v_FEATURE_TYPE_ENG : |" + MyArrayTab[1] + "| v_LENGTH : |" + MyArrayTab[2] + "| v_LENGTH_DESC : " + MyArrayTab[3] + "| v_WIDTH : |" + MyArrayTab[4] + "| v_WIDTH_DESC : " + MyArrayTab[5] + "| v_HEIGHT : |" + MyArrayTab[6] + "| v_HEIGHT_DESC : " + MyArrayTab[7] + "| v_DESCRIPTION_ENG : |" + MyArrayTab[8] + "| v_MIN_MATERIAL : " + MyArrayTab[9] + "| v_MIN_MATERIAL_ENG_DESC : |" + MyArrayTab[10] + "| v_ASSET_CATEGORY : " + MyArrayTab[11] + "| v_TECHNOLOGY : |" + MyArrayTab[12] + "| v_MATERIAL_TYPE : " + MyArrayTab[13] + "| v_DELETE_FLAG : |" + MyArrayTab[14] + "| v_ENGRG_ENG_DESC : " + MyArrayTab[15] + "| v_ENGRG_PART_NO : |" + MyArrayTab[16] + "| v_TRACKABLE : " + MyArrayTab[17] + "| v_MAJOR : " + MyArrayTab[18]);
                            result = tool.ExecuteStored(connString, sqlStrManHl, CommandType.StoredProcedure, oraPrm1, false);
                            //System.Diagnostics.Debug.WriteLine(Suuu + "ManholeSuccess");
                           
                            break;

                     case 2://ductpath
                         //data da boleh insert
                            string sqlStrDuctPath = "insert into REF_CIV_DUCTPATH (MIN_MATERIAL,DT_S_TYPE,DT_S_WAYS,DT_S_PLACMNT,DT_S_ENCASE,DT_S_BACKFILL,DT_S_DIAMETER";
                            sqlStrDuctPath += ") values ";
                            
                            OracleParameter[] oraPrm2 = new OracleParameter[7];

                            oraPrm2[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm2[0].Value = MyArrayTab[1];
                            oraPrm2[1] = new OracleParameter("v_DT_S_TYPE", OracleDbType.Varchar2);
                            oraPrm2[1].Value = MyArrayTab[2];
                            oraPrm2[2] = new OracleParameter("v_DT_S_WAYS", OracleDbType.Varchar2);
                            oraPrm2[2].Value = MyArrayTab[3];
                            oraPrm2[3] = new OracleParameter("v_DT_S_PLACMNT", OracleDbType.Varchar2);
                            oraPrm2[3].Value = MyArrayTab[4];
                            oraPrm2[4] = new OracleParameter("v_DT_S_ENCASE", OracleDbType.Varchar2);
                            oraPrm2[4].Value = MyArrayTab[5];
                            oraPrm2[5] = new OracleParameter("v_DT_S_BACKFILL", OracleDbType.Varchar2);
                            oraPrm2[5].Value = MyArrayTab[6];
                            oraPrm2[6] = new OracleParameter("v_DT_S_DIAMETER", OracleDbType.Varchar2);
                            oraPrm2[6].Value = MyArrayTab[7];

                            //System.Diagnostics.Debug.WriteLine("MIN_MATERIAL : |" + MyArrayTab[1] + "| INNERDUCT_NUM : |" + MyArrayTab[2] + "| OUTER_DIAMETER : " + MyArrayTab[3]);
                            result = tool.ExecuteStored(connString, sqlStrDuctPath, CommandType.StoredProcedure, oraPrm2, false);
                            if (result == "ok")
                            { success = true; }
                            else
                            {
                                success = false;
                            }
                            break;

                     case 3://duck
                            //data da boleh insert
                            string sqlStrDuct = "insert into REF_DUCT (FEATURE_TYPE_ENG,MATERIAL_ENG,DUCT_SIZE,BEND_DEGREE,BEND_RADIUS,SOLID_ENG,MIN_MATERIAL,MIN_MATERIAL_ENG_DESC,ASSET_CATEGORY,TECHNOLOGY,MATERIAL_TYPE,DELETE_FLAG,ENGRG_ENG_DESC,ENGRG_PART_NO,TRACKABLE,MAJOR";
                            sqlStrDuct += ") values ";

                            OracleParameter[] oraPrm3 = new OracleParameter[16];
                          

                            oraPrm3[0] = new OracleParameter("v_FEATURE_TYPE_ENG", OracleDbType.Varchar2);
                            oraPrm3[0].Value = MyArrayTab[1];
                            oraPrm3[1] = new OracleParameter("v_MATERIAL_ENG", OracleDbType.Varchar2);
                            oraPrm3[1].Value = MyArrayTab[2];
                            oraPrm3[2] = new OracleParameter("v_DUCT_SIZE", OracleDbType.Int16);
                            oraPrm3[2].Value = MyArrayTab[3];
                            oraPrm3[3] = new OracleParameter("v_BEND_DEGREE", OracleDbType.Int16);
                            oraPrm3[3].Value = MyArrayTab[4];
                            oraPrm3[4] = new OracleParameter("v_BEND_RADIUS", OracleDbType.Int16);
                            oraPrm3[4].Value = MyArrayTab[5];
                            oraPrm3[5] = new OracleParameter("v_SOLID_ENG", OracleDbType.Varchar2);
                            oraPrm3[5].Value = MyArrayTab[6];
                            oraPrm3[6] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm3[6].Value = MyArrayTab[7];
                            oraPrm3[7] = new OracleParameter("v_MIN_MATERIAL_ENG_DESC", OracleDbType.Varchar2);
                            oraPrm3[7].Value = MyArrayTab[8];
                            oraPrm3[8] = new OracleParameter("v_ASSET_CATEGORY", OracleDbType.Varchar2);
                            oraPrm3[8].Value = MyArrayTab[9];
                            oraPrm3[9] = new OracleParameter("v_TECHNOLOGY", OracleDbType.Varchar2);
                            oraPrm3[9].Value = MyArrayTab[10];
                            oraPrm3[10] = new OracleParameter("v_MATERIAL_TYPE", OracleDbType.Varchar2);
                            oraPrm3[10].Value = MyArrayTab[11];
                            oraPrm3[11] = new OracleParameter("v_DELETE_FLAG", OracleDbType.Char);
                            oraPrm3[11].Value = MyArrayTab[12];
                            oraPrm3[12] = new OracleParameter("v_ENGRG_ENG_DESC", OracleDbType.Varchar2);
                            oraPrm3[12].Value = MyArrayTab[13];
                            oraPrm3[13] = new OracleParameter("v_ENGRG_PART_NO", OracleDbType.Varchar2);
                            oraPrm3[13].Value = MyArrayTab[14];
                            oraPrm3[14] = new OracleParameter("v_TRACKABLE", OracleDbType.Char);
                            oraPrm3[14].Value = MyArrayTab[15];
                            oraPrm3[15] = new OracleParameter("v_MAJOR", OracleDbType.Char);
                            oraPrm3[15].Value = MyArrayTab[16];
                  

                            //System.Diagnostics.Debug.WriteLine("MIN_MATERIAL : |" + MyArrayTab[1] + "| INNERDUCT_NUM : |" + MyArrayTab[2] + "| OUTER_DIAMETER : " + MyArrayTab[3]);
                            result = tool.ExecuteStored(connString, sqlStrDuct, CommandType.StoredProcedure, oraPrm3, false);
                            if(result =="ok")
                            { success = true; }
                            else{
                            success = false;}
                            System.Diagnostics.Debug.WriteLine(result);
                            break;
                 
                case 4://pole
                            //data da boleh insert
                            string sqlStrPole = "insert into REF_POLE (FEATURE_TYPE_ENG,MATERIAL_ENG,CLASS,HEIGHT,TREATMENT_ENG,MIN_MATERIAL,MIN_MATERIAL_ENG_DESC,ASSET_CATEGORY,TECHNOLOGY,MATERIAL_TYPE,DELETE_FLAG,ENGRG_ENG_DESC,ENGRG_PART_NO,TRACKABLE,MAJOR";
                            sqlStrPole += ") values ";
                             

                            OracleParameter[] oraPrm4 = new OracleParameter[15];
     

                            oraPrm4[0] = new OracleParameter("v_FEATURE_TYPE_ENG ", OracleDbType.Varchar2);
                            oraPrm4[0].Value = MyArrayTab[1];
                            oraPrm4[1] = new OracleParameter("v_MATERIAL_ENG", OracleDbType.Varchar2);
                            oraPrm4[1].Value = MyArrayTab[2];
                            oraPrm4[2] = new OracleParameter("v_CLASS", OracleDbType.Varchar2);
                            oraPrm4[2].Value = MyArrayTab[3];
                            oraPrm4[3] = new OracleParameter("v_HEIGHT", OracleDbType.Varchar2);
                            oraPrm4[3].Value = MyArrayTab[4];
                            oraPrm4[4] = new OracleParameter("v_TREATMENT_ENG", OracleDbType.Varchar2);
                            oraPrm4[4].Value = MyArrayTab[5];
                            oraPrm4[5] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm4[5].Value = MyArrayTab[6];
                            oraPrm4[6] = new OracleParameter("v_MIN_MATERIAL_ENG_DESC", OracleDbType.Varchar2);
                            oraPrm4[6].Value = MyArrayTab[7];
                            oraPrm4[7] = new OracleParameter("v_ASSET_CATEGORY", OracleDbType.Varchar2);
                            oraPrm4[7].Value = MyArrayTab[8];
                            oraPrm4[8] = new OracleParameter("v_TECHNOLOGY", OracleDbType.Varchar2);
                            oraPrm4[8].Value = MyArrayTab[9];
                            oraPrm4[9] = new OracleParameter("v_MATERIAL_TYPE", OracleDbType.Varchar2);
                            oraPrm4[9].Value = MyArrayTab[10];
                            oraPrm4[10] = new OracleParameter("v_DELETE_FLAG", OracleDbType.Varchar2);
                            oraPrm4[10].Value = MyArrayTab[11];
                            oraPrm4[11] = new OracleParameter("v_ENGRG_ENG_DESC", OracleDbType.Varchar2);
                            oraPrm4[11].Value = MyArrayTab[12];
                            oraPrm4[12] = new OracleParameter("v_ENGRG_PART_NO", OracleDbType.Varchar2);
                            oraPrm4[12].Value = MyArrayTab[13];
                            oraPrm4[13] = new OracleParameter("v_TRACKABLE", OracleDbType.Varchar2);
                            oraPrm4[13].Value = MyArrayTab[14];
                            oraPrm4[14] = new OracleParameter("v_MAJOR", OracleDbType.Varchar2);
                            oraPrm4[14].Value = MyArrayTab[15];


                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrPole, CommandType.StoredProcedure, oraPrm4, false);
                            if(result == "ok")
                            { success = true; }
                            else{
                            success = false;}

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 5://pier cross
                            //data da boleh insert
                            string sqlStrPierCross = "insert into REF_CIV_PIERCROSS (MIN_MATERIAL,PR_LENGTH";
                            sqlStrPierCross += ") values ";

                            OracleParameter[] oraPrm5 = new OracleParameter[2];

                            oraPrm5[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm5[0].Value = MyArrayTab[1];
                            oraPrm5[1] = new OracleParameter("v_PR_LENGTH", OracleDbType.Int16);
                            oraPrm5[1].Value = MyArrayTab[2];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrPierCross, CommandType.StoredProcedure, oraPrm5, false);
                            if (result == "ok")
                            { success = true; }
                            else
                            {
                                success = false;
                            }
                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 6://Contactor Gauge
                            //data da boleh insert
                            string sqlStrCGauge = "insert into REF_COP_CGAUGE(PL_NUM,PL_VALUE";
                            sqlStrCGauge += ") values ";

                            OracleParameter[] oraPrm6 = new OracleParameter[2];

                            oraPrm6[0] = new OracleParameter("v_PL_NUM", OracleDbType.Int16);
                            oraPrm6[0].Value = MyArrayTab[1];
                            oraPrm6[1] = new OracleParameter("v_PL_VALUE", OracleDbType.Varchar2);
                            oraPrm6[1].Value = MyArrayTab[2];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrCGauge, CommandType.StoredProcedure, oraPrm6, false);
                            if (result == "ok")
                            { success = true; }
                            else
                            {
                                success = false;
                            }
                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 7://Alarm
                            //ta boley insert data
                            string sqlStrConAlarm = "insert into REF_COP_PU_CONALARM(PLANT_UNIT,PU_ID,PU_DESC,G3E_FNO,FEATURE_TYPE,FEATURE_STATE,QTY_IND,MUL_FAC,CA_TYPE,BILL_RATE";
                            sqlStrConAlarm += ") values ";
                       
                            OracleParameter[] oraPrm7 = new OracleParameter[10];

                            oraPrm7[0] = new OracleParameter("v_PLANT_UNIT ", OracleDbType.Varchar2);
                            oraPrm7[0].Value = MyArrayTab[1];
                            oraPrm7[1] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                            oraPrm7[1].Value = MyArrayTab[2];
                            oraPrm7[2] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                            oraPrm7[2].Value = MyArrayTab[3];
                            oraPrm7[3] = new OracleParameter("v_G3E_FNO", OracleDbType.Int16);
                            oraPrm7[3].Value = MyArrayTab[4];
                            oraPrm7[4] = new OracleParameter("v_FEATURE_TYPE", OracleDbType.Varchar2);
                            oraPrm7[4].Value = MyArrayTab[5];
                            oraPrm7[5] = new OracleParameter("v_FEATURE_STATE", OracleDbType.Varchar2);
                            oraPrm7[5].Value = MyArrayTab[6];
                            oraPrm7[6] = new OracleParameter("v_QTY_IND", OracleDbType.Varchar2);
                            oraPrm7[6].Value = MyArrayTab[7];
                            oraPrm7[7] = new OracleParameter("v_MUL_FAC", OracleDbType.Int16);
                            oraPrm7[7].Value = MyArrayTab[8];
                            oraPrm7[8] = new OracleParameter("v_CA_TYPE", OracleDbType.Varchar2);
                            oraPrm7[8].Value = MyArrayTab[9];
                            oraPrm7[9] = new OracleParameter("v_BILL_RATE", OracleDbType.Varchar2);
                            oraPrm7[9].Value = MyArrayTab[10];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrConAlarm, CommandType.StoredProcedure, oraPrm7, false);
                            if (result == "ok")
                            { success = true; }
                            else{ success = false;}

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 8://Gas Seal
                            //ta boley insert data
                            string sqlStrGasSeal = "insert into REF_COP_PU_GASSEAL(PLANT_UNIT,PU_ID,PU_DESC,G3E_FNO,FEATURE_TYPE,FEATURE_STATE,QTY_IND,MUL_FAC,CTYPE,TOTAL_SIZE,GAUGE,PLACEMENT,BILL_RATE";
                            sqlStrGasSeal += ") values ";

                            OracleParameter[] oraPrm8 = new OracleParameter[13];

                            oraPrm8[0] = new OracleParameter("v_PLANT_UNIT", OracleDbType.Varchar2);
                            oraPrm8[0].Value = MyArrayTab[1];
                            oraPrm8[1] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                            oraPrm8[1].Value = MyArrayTab[2];
                            oraPrm8[2] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                            oraPrm8[2].Value = MyArrayTab[3];
                            oraPrm8[3] = new OracleParameter("v_G3E_FNO", OracleDbType.Int16);
                            oraPrm8[3].Value = MyArrayTab[4];
                            oraPrm8[4] = new OracleParameter("v_FEATURE_TYPE", OracleDbType.Varchar2);
                            oraPrm8[4].Value = MyArrayTab[5];
                            oraPrm8[5] = new OracleParameter("v_FEATURE_STATE", OracleDbType.Varchar2);
                            oraPrm8[5].Value = MyArrayTab[6];
                            oraPrm8[6] = new OracleParameter("v_QTY_IND", OracleDbType.Varchar2);
                            oraPrm8[6].Value = MyArrayTab[7];
                            oraPrm8[7] = new OracleParameter("v_MUL_FAC", OracleDbType.Int16);
                            oraPrm8[7].Value = MyArrayTab[8];
                            oraPrm8[8] = new OracleParameter("v_CTYPE", OracleDbType.Varchar2);
                            oraPrm8[8].Value = MyArrayTab[9];
                            oraPrm8[9] = new OracleParameter("v_TOTAL_SIZE", OracleDbType.Int16);
                            oraPrm8[9].Value = MyArrayTab[10];
                            oraPrm8[10] = new OracleParameter("v_GAUGE", OracleDbType.Int16);
                            oraPrm8[10].Value = MyArrayTab[11];
                            oraPrm8[11] = new OracleParameter("v_PLACEMENT", OracleDbType.Varchar2);
                            oraPrm8[11].Value = MyArrayTab[12];
                            oraPrm8[12] = new OracleParameter("v_BILL_RATE", OracleDbType.Varchar2);
                            oraPrm8[12].Value = MyArrayTab[13];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrGasSeal, CommandType.StoredProcedure, oraPrm8, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 9://Test Point
                            //ta boley insert data
                            string sqlStrTestPoint = "insert into REF_COP_PU_TESTPNT(PLANT_UNIT,PU_ID,PU_DESC,G3E_FNO,FEATURE_TYPE,FEATURE_STATE,QTY_IND,MUL_FAC,CTYPE,BILL_RATE";
                            sqlStrTestPoint += ") values ";

                            OracleParameter[] oraPrm9 = new OracleParameter[10];

                            oraPrm9[0] = new OracleParameter("v_PLANT_UNIT", OracleDbType.Varchar2);
                            oraPrm9[0].Value = MyArrayTab[1];
                            oraPrm9[1] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                            oraPrm9[1].Value = MyArrayTab[2];
                            oraPrm9[2] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                            oraPrm9[2].Value = MyArrayTab[3];
                            oraPrm9[3] = new OracleParameter("v_G3E_FNO", OracleDbType.Int16);
                            oraPrm9[3].Value = MyArrayTab[4];
                            oraPrm9[4] = new OracleParameter("v_FEATURE_TYPE", OracleDbType.Varchar2);
                            oraPrm9[4].Value = MyArrayTab[5];
                            oraPrm9[5] = new OracleParameter("v_FEATURE_STATE", OracleDbType.Varchar2);
                            oraPrm9[5].Value = MyArrayTab[6];
                            oraPrm9[6] = new OracleParameter("v_QTY_IND", OracleDbType.Varchar2);
                            oraPrm9[6].Value = MyArrayTab[7];
                            oraPrm9[7] = new OracleParameter("v_MUL_FAC", OracleDbType.Int16);
                            oraPrm9[7].Value = MyArrayTab[8];
                            oraPrm9[8] = new OracleParameter("v_CTYPE", OracleDbType.Varchar2);
                            oraPrm9[8].Value = MyArrayTab[9];
                            oraPrm9[9] = new OracleParameter("v_BILL_RATE", OracleDbType.Varchar2);
                            oraPrm9[9].Value = MyArrayTab[10];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrTestPoint, CommandType.StoredProcedure, oraPrm9, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 10://Transducer
                            //ta boley insert data
                            string sqlStrTransducer = "insert into REF_COP_PU_TRANSDCR(PLANT_UNIT,PU_ID,PU_DESC,G3E_FNO,FEATURE_TYPE,FEATURE_STATE,QTY_IND,MUL_FAC,BILL_RATE";
                            sqlStrTransducer += ") values ";

                            OracleParameter[] oraPrm10 = new OracleParameter[9];
                         
                            oraPrm10[0] = new OracleParameter("v_PLANT_UNIT", OracleDbType.Varchar2);
                            oraPrm10[0].Value = MyArrayTab[1];
                            oraPrm10[1] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                            oraPrm10[1].Value = MyArrayTab[2];
                            oraPrm10[2] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                            oraPrm10[2].Value = MyArrayTab[3];
                            oraPrm10[3] = new OracleParameter("v_G3E_FNO", OracleDbType.Int16);
                            oraPrm10[3].Value = MyArrayTab[4];
                            oraPrm10[4] = new OracleParameter("v_FEATURE_TYPE", OracleDbType.Varchar2);
                            oraPrm10[4].Value = MyArrayTab[5];
                            oraPrm10[5] = new OracleParameter("v_FEATURE_STATE", OracleDbType.Varchar2);
                            oraPrm10[5].Value = MyArrayTab[6];
                            oraPrm10[6] = new OracleParameter("v_QTY_IND", OracleDbType.Varchar2);
                            oraPrm10[6].Value = MyArrayTab[7];
                            oraPrm10[7] = new OracleParameter("v_MUL_FAC", OracleDbType.Int16);
                            oraPrm10[7].Value = MyArrayTab[8];
                            oraPrm10[8] = new OracleParameter("v_BILL_RATE", OracleDbType.Varchar2);
                            oraPrm10[8].Value = MyArrayTab[9];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrTransducer, CommandType.StoredProcedure, oraPrm10, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 11://IDF
                            //ta boley insert data
                            string sqlStrIDF = "insert into REF_COP_PU_IDF(PLANT_UNIT,PU_ID,PU_DESC,G3E_FNO,FEATURE_TYPE,FEATURE_STATE,QTY_IND,MUL_FAC,CON_TYPE,IDF_SIZE,IDF_CAPACITY,IDF_TYPE,INSTALL_LOC,EARTH_ROD,TERM_TYPE,BILL_RATE";
                            sqlStrIDF += ") values ";

                            OracleParameter[] oraPrm11 = new OracleParameter[16];

                            oraPrm11[0] = new OracleParameter("v_PLANT_UNIT", OracleDbType.Varchar2);
                            oraPrm11[0].Value = MyArrayTab[1]; 
                            oraPrm11[1] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                            oraPrm11[1].Value = MyArrayTab[2]; 
                            oraPrm11[2] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                            oraPrm11[2].Value = MyArrayTab[3]; 
                            oraPrm11[3] = new OracleParameter("v_G3E_FNO", OracleDbType.Int16);
                            oraPrm11[3].Value = MyArrayTab[4]; 
                            oraPrm11[4] = new OracleParameter("v_FEATURE_TYPE", OracleDbType.Varchar2);
                            oraPrm11[4].Value = MyArrayTab[5]; 
                            oraPrm11[5] = new OracleParameter("v_FEATURE_STATE", OracleDbType.Varchar2);
                            oraPrm11[5].Value = MyArrayTab[6]; 
                            oraPrm11[6] = new OracleParameter("v_QTY_IND", OracleDbType.Varchar2);
                            oraPrm11[6].Value = MyArrayTab[7]; 
                            oraPrm11[7] = new OracleParameter("v_MUL_FAC", OracleDbType.Int16);
                            oraPrm11[7].Value = MyArrayTab[8]; 
                            oraPrm11[8] = new OracleParameter("v_CON_TYPE", OracleDbType.Varchar2);
                            oraPrm11[8].Value = MyArrayTab[9]; 
                            oraPrm11[9] = new OracleParameter("v_IDF_SIZE", OracleDbType.Int16);
                            oraPrm11[9].Value = MyArrayTab[10]; 
                            oraPrm11[10] = new OracleParameter("v_IDF_CAPACITY", OracleDbType.Varchar2);
                            oraPrm11[10].Value = MyArrayTab[11]; 
                            oraPrm11[11] = new OracleParameter("v_IDF_TYPE", OracleDbType.Varchar2);
                            oraPrm11[11].Value = MyArrayTab[12];
                            oraPrm11[12] = new OracleParameter("v_INSTALL_LOC", OracleDbType.Varchar2);
                            oraPrm11[12].Value = MyArrayTab[13];
                            oraPrm11[13] = new OracleParameter("v_EARTH_ROD", OracleDbType.Int16);
                            oraPrm11[13].Value = MyArrayTab[14];
                            oraPrm11[14] = new OracleParameter("v_TERM_TYPE", OracleDbType.Varchar2);
                            oraPrm11[14].Value = MyArrayTab[15];
                            oraPrm11[15] = new OracleParameter("v_BILL_RATE", OracleDbType.Varchar2);
                            oraPrm11[15].Value = MyArrayTab[16]; 

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrIDF, CommandType.StoredProcedure, oraPrm11, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 12://DSLAM
                            //ta boley insert data
                            string sqlStrDSlam = "insert into REF_COP_CON_DSLAM(PLANT_UNIT,CONTRACTOR,G3E_FNO,FEATURE_TYPE,FEATURE_STATE,QTY_IND,CAPACITY,MUL_FAC,MANUFACTURER,BILL_RATE";
                            sqlStrDSlam += ") values ";

                            OracleParameter[] oraPrm12 = new OracleParameter[10];

                            oraPrm12[0] = new OracleParameter("v_PLANT_UNIT", OracleDbType.Varchar2);
                            oraPrm12[0].Value = MyArrayTab[1];
                            oraPrm12[1] = new OracleParameter("v_CONTRACTOR", OracleDbType.Varchar2);
                            oraPrm12[1].Value = MyArrayTab[2];
                            oraPrm12[2] = new OracleParameter("v_G3E_FNO", OracleDbType.Int16);
                            oraPrm12[2].Value = MyArrayTab[3];
                            oraPrm12[3] = new OracleParameter("v_FEATURE_TYPE", OracleDbType.Varchar2);
                            oraPrm12[3].Value = MyArrayTab[4];
                            oraPrm12[4] = new OracleParameter("v_FEATURE_STATE", OracleDbType.Varchar2);
                            oraPrm12[4].Value = MyArrayTab[5];
                            oraPrm12[5] = new OracleParameter("v_QTY_IND", OracleDbType.Varchar2);
                            oraPrm12[5].Value = MyArrayTab[6];
                            oraPrm12[6] = new OracleParameter("v_CAPACITY", OracleDbType.Int16);
                            oraPrm12[6].Value = MyArrayTab[7];
                            oraPrm12[7] = new OracleParameter("v_MUL_FAC", OracleDbType.Int16);
                            oraPrm12[7].Value = MyArrayTab[8];
                            oraPrm12[8] = new OracleParameter("v_MANUFACTURER", OracleDbType.Varchar2);
                            oraPrm12[8].Value = MyArrayTab[9];
                            oraPrm12[9] = new OracleParameter("v_BILL_RATE", OracleDbType.Varchar2);
                            oraPrm12[9].Value = MyArrayTab[10];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrDSlam, CommandType.StoredProcedure, oraPrm12, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 13://FDC
                            //ta boley insert data
                            string sqlStrFDC = "insert into REF_FDC(MIN_MATERIAL,DESCRIPTION,MODEL";
                            sqlStrFDC += ") values ";

                            OracleParameter[] oraPrm13 = new OracleParameter[3];

                            oraPrm13[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm13[0].Value = MyArrayTab[1];
                            oraPrm13[1] = new OracleParameter("v_DESCRIPTION", OracleDbType.Varchar2);
                            oraPrm13[1].Value = MyArrayTab[2];
                            oraPrm13[2] = new OracleParameter("v_MODEL", OracleDbType.Varchar2);
                            oraPrm13[2].Value = MyArrayTab[3];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrFDC, CommandType.StoredProcedure, oraPrm13, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 14://FDP
                            //ta boley insert data
                            string sqlStrFDP = "insert into REF_FDP(MIN_MATERIAL,DESCRIPTION,CAPACITY,FDP_TYPE";
                            sqlStrFDP += ") values ";

                            OracleParameter[] oraPrm14 = new OracleParameter[4];

                            oraPrm14[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm14[0].Value = MyArrayTab[1];
                            oraPrm14[1] = new OracleParameter("v_DESCRIPTION", OracleDbType.Varchar2);
                            oraPrm14[1].Value = MyArrayTab[2];
                            oraPrm14[2] = new OracleParameter("v_CAPACITY", OracleDbType.Varchar2);
                            oraPrm14[2].Value = MyArrayTab[3];
                            oraPrm14[3] = new OracleParameter("v_FDP_TYPE", OracleDbType.Varchar2);
                            oraPrm14[3].Value = MyArrayTab[4];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrFDP, CommandType.StoredProcedure, oraPrm14, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 15://TieFDP
                            //data bly insert
                            string sqlStrTieFDP = "insert into REF_TIE_FDP(MIN_MATERIAL,DESCRIPTION,CAPACITY,FDP_TYPE";
                            sqlStrTieFDP += ") values ";

                            OracleParameter[] oraPrm15 = new OracleParameter[4];    

                            oraPrm15[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm15[0].Value = MyArrayTab[1];
                            oraPrm15[1] = new OracleParameter("v_DESCRIPTION", OracleDbType.Varchar2);
                            oraPrm15[1].Value = MyArrayTab[2];
                            oraPrm15[2] = new OracleParameter("v_CAPACITY", OracleDbType.Varchar2);
                            oraPrm15[2].Value = MyArrayTab[3];
                            oraPrm15[3] = new OracleParameter("v_FDP_TYPE", OracleDbType.Varchar2);
                            oraPrm15[3].Value = MyArrayTab[4];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrTieFDP, CommandType.StoredProcedure, oraPrm15, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 16://FTB
                            //data bly insert
                            string sqlStrFTB = "insert into REF_FTB(MIN_MATERIAL,DESCRIPTION,CAPACITY,FDP_TYPE";
                            sqlStrFTB += ") values ";

                            OracleParameter[] oraPrm16 = new OracleParameter[4];
       

                            oraPrm16[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm16[0].Value = MyArrayTab[1];
                            oraPrm16[1] = new OracleParameter("v_DESCRIPTION", OracleDbType.Varchar2);
                            oraPrm16[1].Value = MyArrayTab[2];
                            oraPrm16[2] = new OracleParameter("v_CAPACITY", OracleDbType.Varchar2);
                            oraPrm16[2].Value = MyArrayTab[3];
                            oraPrm16[3] = new OracleParameter("v_FDP_TYPE", OracleDbType.Varchar2);
                            oraPrm16[3].Value = MyArrayTab[4];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrFTB, CommandType.StoredProcedure, oraPrm16, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 17://IPMSAN
                            //ta boley insert data
                            string sqlStrIPMSAN = "insert into REF_IPMSAN(MIN_MATERIAL,DESCRIPTION,MODEL,MANUFACTURER,SYSTEM_CAPACITY,FRONT_IMAGE,BACK_IMAGE,TOTAL_POSITIONS,DIMENSION_DEPTH,DIMENSION_WIDTH,DIMENSION_HEIGHT";
                            sqlStrIPMSAN += ") values ";

                            OracleParameter[] oraPrm17 = new OracleParameter[11];
                     
                            oraPrm17[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm17[0].Value = MyArrayTab[1];
                            oraPrm17[1] = new OracleParameter("v_DESCRIPTION", OracleDbType.Varchar2);
                            oraPrm17[1].Value = MyArrayTab[2];
                            oraPrm17[2] = new OracleParameter("v_MODEL", OracleDbType.Varchar2);
                            oraPrm17[2].Value = MyArrayTab[3];
                            oraPrm17[3] = new OracleParameter("v_MANUFACTURER", OracleDbType.Varchar2);
                            oraPrm17[3].Value = MyArrayTab[4];
                            oraPrm17[4] = new OracleParameter("v_SYSTEM_CAPACITY", OracleDbType.Int16);
                            oraPrm17[4].Value = MyArrayTab[5];
                            oraPrm17[5] = new OracleParameter("v_FRONT_IMAGE", OracleDbType.Blob);
                            oraPrm17[5].Value = MyArrayTab[6];
                            oraPrm17[6] = new OracleParameter("v_BACK_IMAGE", OracleDbType.Blob);
                            oraPrm17[6].Value = MyArrayTab[7];
                            oraPrm17[7] = new OracleParameter("v_TOTAL_POSITIONS", OracleDbType.Int16);
                            oraPrm17[7].Value = MyArrayTab[8];
                            oraPrm17[8] = new OracleParameter("v_DIMENSION_DEPTH", OracleDbType.Int16);
                            oraPrm17[8].Value = MyArrayTab[9];
                            oraPrm17[9] = new OracleParameter("v_DIMENSION_WIDTH", OracleDbType.Int16);
                            oraPrm17[9].Value = MyArrayTab[10];
                            oraPrm17[10] = new OracleParameter("v_DIMENSION_HEIGHT", OracleDbType.Int16);
                            oraPrm17[10].Value = MyArrayTab[11];

                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrIPMSAN, CommandType.StoredProcedure, oraPrm17, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;

                case 18://DIGITAL DATA NETWORK
                            //ta boley insert data
                            string sqlStrDDN = "insert into REF_DDN(MIN_MATERIAL,DESCRIPTION,MODEL,MANUFACTURER,SYSTEM_CAPACITY,FRONT_IMAGE,BACK_IMAGE,TOTAL_POSITIONS,DIMENSION_DEPTH,DIMENSION_WIDTH,DIMENSION_HEIGHT";
                            sqlStrDDN += ") values ";

                            OracleParameter[] oraPrm18 = new OracleParameter[11];

                            oraPrm18[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                            oraPrm18[0].Value = MyArrayTab[1];
                            oraPrm18[1] = new OracleParameter("v_DESCRIPTION", OracleDbType.Varchar2);
                            oraPrm18[1].Value = MyArrayTab[2];
                            oraPrm18[2] = new OracleParameter("v_MODEL", OracleDbType.Varchar2);
                            oraPrm18[2].Value = MyArrayTab[3];
                            oraPrm18[3] = new OracleParameter("v_MANUFACTURER", OracleDbType.Varchar2);
                            oraPrm18[3].Value = MyArrayTab[4];
                            oraPrm18[4] = new OracleParameter("v_SYSTEM_CAPACITY", OracleDbType.Int16);
                            oraPrm18[4].Value = MyArrayTab[5];
                            oraPrm18[5] = new OracleParameter("v_FRONT_IMAGE", OracleDbType.Blob);
                            oraPrm18[5].Value = MyArrayTab[6];
                            oraPrm18[6] = new OracleParameter("v_BACK_IMAGE", OracleDbType.Blob);
                            oraPrm18[6].Value = MyArrayTab[7];
                            oraPrm18[7] = new OracleParameter("v_TOTAL_POSITIONS", OracleDbType.Int16);
                            oraPrm18[7].Value = MyArrayTab[8];
                            oraPrm18[8] = new OracleParameter("v_DIMENSION_DEPTH", OracleDbType.Int16);
                            oraPrm18[8].Value = MyArrayTab[9];
                            oraPrm18[9] = new OracleParameter("v_DIMENSION_WIDTH", OracleDbType.Int16);
                            oraPrm18[9].Value = MyArrayTab[10];
                            oraPrm18[10] = new OracleParameter("v_DIMENSION_HEIGHT", OracleDbType.Int16);
                            oraPrm18[10].Value = MyArrayTab[11];
                            
                            //System.Diagnostics.Debug.WriteLine(MyArrayTab[1] + ":1" + MyArrayTab[2] + ":2" + MyArrayTab[3] + ":3" + MyArrayTab[4] + ":4" + MyArrayTab[5] + ":5" + MyArrayTab[6] + ":6" + MyArrayTab[7] + ":7" + MyArrayTab[8] + ":8" + MyArrayTab[9] + ":9" + MyArrayTab[10] + ":10" + MyArrayTab[11] + ":11" + MyArrayTab[12] + ":12" + MyArrayTab [13]+ ":13" + MyArrayTab[14] + ":14" + MyArrayTab[15] + ":15");
                            result = tool.ExecuteStored(connString, sqlStrDDN, CommandType.StoredProcedure, oraPrm18, false);
                            if (result == "ok")
                            { success = true; }
                            else { success = false; }

                            System.Diagnostics.Debug.WriteLine(result);
                            break;


                    
                 }
                
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                
            }
            return success;
        }

        public bool AddFeatureMastMaintenance(FeatureMaintenance featMain)
        {
            
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string lookuptable = "";
                using (Entities ctxData = new Entities())
                {
                    lookuptable = (from a in ctxData.WV_LOOKUPTABLE
                                    where a.FEATURE_TYPE == featMain.FEATURE_TYPE
                                    select a.LOOKUP_TABLE).Single();
                }

                int checkDataCount = 0;
                using (Entities ctxdata = new Entities())
                {
                    checkDataCount = (from a in ctxdata.WV_FEAT_MAST
                                      select a).Count();
                }
                int countNo = 0;
                if (checkDataCount == 0)
                {
                    countNo++;
                }
                else
                {
                    using (Entities ctxData = new Entities())
                    {
                        countNo = (from a in ctxData.WV_FEAT_MAST
                                   select a.FEAT_MAST_NO).Max().Value;
                    }
                    countNo++;
                }
                System.Diagnostics.Debug.WriteLine("count : " + countNo);

                string sqlStr = "insert into WV_FEAT_MAST (MIN_MATERIAL, FEATURE_STATE, DAY, NIGHT, WEEKEND, HOLIDAY, LOOKUP_TABLE, FEAT_MAST_NO";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[8];

                oraPrm[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                oraPrm[0].Value = featMain.MIN_MATERIAL;
                oraPrm[1] = new OracleParameter("v_FEATURE_STATE", OracleDbType.Varchar2);
                oraPrm[1].Value = featMain.FEATURE_STATE;
                oraPrm[2] = new OracleParameter("v_DAY", OracleDbType.Varchar2);
                oraPrm[2].Value = featMain.DAY;
                oraPrm[3] = new OracleParameter("v_NIGHT", OracleDbType.Varchar2);
                oraPrm[3].Value = featMain.NIGHT;
                oraPrm[4] = new OracleParameter("v_WEEKEND", OracleDbType.Varchar2);
                oraPrm[4].Value = featMain.WEEKEND;
                oraPrm[5] = new OracleParameter("v_HOLIDAY", OracleDbType.Varchar2);
                oraPrm[5].Value = featMain.HOLIDAY;
                oraPrm[6] = new OracleParameter("v_LOOKUP_TABLE", OracleDbType.Varchar2);
                oraPrm[6].Value = lookuptable;
                oraPrm[7] = new OracleParameter("v_FEAT_MAST_NO", OracleDbType.Varchar2);
                oraPrm[7].Value = countNo;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

        public bool UpdateFeatMast(FeatureMaintenance FeatMast)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_FEAT_MAST SET DAY = '" + FeatMast.DAY +
                "', NIGHT = '" + FeatMast.NIGHT +
                "', WEEKEND = '" + FeatMast.WEEKEND +
                "', HOLIDAY = '" + FeatMast.HOLIDAY +
                "', FEATURE_STATE = '" + FeatMast.FEATURE_STATE +
                "' WHERE FEAT_MAST_NO ='" + FeatMast.FEAT_MAST_NO + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        [WebMethod]
        public OSPFeatureMaintenance GetOSPFeatureMaintenanceContract(int start, int size, string searchKey)
        {
            OSPFeatureMaintenance osp = new OSPFeatureMaintenance();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null)
                {
                    int count = (from c in ctxData.WV_FEAT_MAST_CONTRACT
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_FEAT_MAST_CONTRACT
                                 orderby d.LOOKUP_TABLE
                                 select new { d.FEAT_MAST_CONTRACT_NO, d.MIN_MATERIAL, d.CONTRACT_NO, d.LOOKUP_TABLE, d.ITEM_NO }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        string featureType = (from b in ctxData.WV_LOOKUPTABLE
                                              where b.LOOKUP_TABLE == a.LOOKUP_TABLE
                                              select b.FEATURE_TYPE).Single();

                        FeatureMaintenance FeatureMaintenance = new FeatureMaintenance();
                        FeatureMaintenance.MIN_MATERIAL = a.MIN_MATERIAL;
                        FeatureMaintenance.CONTRACT_NO = a.CONTRACT_NO;
                        FeatureMaintenance.FEATURE_TYPE = featureType;
                        FeatureMaintenance.ITEM_NO = a.ITEM_NO.ToString();
                        FeatureMaintenance.FEAT_MAST_CONTRACT_NO = a.FEAT_MAST_CONTRACT_NO.ToString();
                        osp.FeatureMaintenanceList.Add(FeatureMaintenance);

                        System.Diagnostics.Debug.WriteLine(a.MIN_MATERIAL + " : " + a.ITEM_NO.ToString());
                    }
                }
                else
                {
                    int count = (from c in ctxData.WV_FEAT_MAST_CONTRACT
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_FEAT_MAST_CONTRACT
                                 join s in ctxData.WV_LOOKUPTABLE on d.LOOKUP_TABLE equals s.LOOKUP_TABLE
                                 where d.MIN_MATERIAL.Contains(searchKey) || s.FEATURE_TYPE.Contains(searchKey) || d.CONTRACT_NO.Contains(searchKey)
                                 orderby d.MIN_MATERIAL
                                 select new { d.FEAT_MAST_CONTRACT_NO, d.MIN_MATERIAL, d.CONTRACT_NO, d.LOOKUP_TABLE, d.ITEM_NO }).Skip(start).Take(size);


                    foreach (var a in query)
                    {
                        System.Diagnostics.Debug.WriteLine(a.LOOKUP_TABLE);
                        string featureType = (from b in ctxData.WV_LOOKUPTABLE
                                              where b.LOOKUP_TABLE == a.LOOKUP_TABLE
                                              select b.FEATURE_TYPE).Single();
                        FeatureMaintenance FeatureMaintenance = new FeatureMaintenance();
                        FeatureMaintenance.MIN_MATERIAL = a.MIN_MATERIAL;
                        FeatureMaintenance.CONTRACT_NO = a.CONTRACT_NO;
                        FeatureMaintenance.FEATURE_TYPE = featureType;
                        FeatureMaintenance.ITEM_NO = a.ITEM_NO.ToString();
                        FeatureMaintenance.FEAT_MAST_CONTRACT_NO = a.FEAT_MAST_CONTRACT_NO.ToString();
                        osp.FeatureMaintenanceList.Add(FeatureMaintenance);

                        System.Diagnostics.Debug.WriteLine(a.MIN_MATERIAL + " : " + a.CONTRACT_NO.ToString());
                    }

                }
            }

            return osp;
        }

        public bool DeleteFeatureMaintenanceContract(string txtFeatMastContractNo)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_FEAT_MAST_CONTRACT WHERE FEAT_MAST_CONTRACT_NO= '" + txtFeatMastContractNo + "'";

            System.Diagnostics.Debug.WriteLine(sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool ValidateNewFeatureMastContractMaintenance(string minMat, string contractNo, string itemNo)
        {
            int count = 0;
            using (Entities ctxData = new Entities())
            {
                    if (contractNo != "")
                    {
                        count = (from a in ctxData.WV_FEAT_MAST_CONTRACT
                                 where a.MIN_MATERIAL == minMat && a.CONTRACT_NO == contractNo && a.ITEM_NO == itemNo
                                 select a).Count();
                    }
            }
            if (count == 0)
                return true;
            else
                return false;

        }

        public bool AddFeatureMastContractMaintenance(FeatureMaintenance featMain)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string lookuptable = "";
                using (Entities ctxData = new Entities())
                {
                    lookuptable = (from a in ctxData.WV_LOOKUPTABLE
                                   where a.FEATURE_TYPE == featMain.FEATURE_TYPE
                                   select a.LOOKUP_TABLE).Single();
                }

                int checkDataCount = 0;
                using (Entities ctxdata = new Entities())
                {
                    checkDataCount = (from a in ctxdata.WV_FEAT_MAST_CONTRACT
                                      select a).Count();
                }
                int countNo = 0;
                if (checkDataCount == 0)
                {
                    countNo++;
                }
                else
                {
                    using (Entities ctxData = new Entities())
                    {
                        countNo = (from a in ctxData.WV_FEAT_MAST_CONTRACT
                                   select a.FEAT_MAST_CONTRACT_NO).Max().Value;
                    }
                    countNo++;
                }
                System.Diagnostics.Debug.WriteLine("count : " + countNo);

                string sqlStr = "insert into WV_FEAT_MAST_CONTRACT (MIN_MATERIAL, CONTRACT_NO, ITEM_NO, LOOKUP_TABLE, FEAT_MAST_CONTRACT_NO";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[5];

                oraPrm[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                oraPrm[0].Value = featMain.MIN_MATERIAL;
                oraPrm[1] = new OracleParameter("v_CONTRACT_NO", OracleDbType.Varchar2);
                oraPrm[1].Value = featMain.CONTRACT_NO;
                oraPrm[2] = new OracleParameter("v_ITEM_NO", OracleDbType.Varchar2);
                oraPrm[2].Value = featMain.ITEM_NO;
                oraPrm[3] = new OracleParameter("v_LOOKUP_TABLE", OracleDbType.Varchar2);
                oraPrm[3].Value = lookuptable;
                oraPrm[4] = new OracleParameter("v_FEAT_MAST_CONTRACT_NO", OracleDbType.Varchar2);
                oraPrm[4].Value = countNo;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

        public bool UpdateFeatMastContract(FeatureMaintenance FeatMast)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_FEAT_MAST_CONTRACT SET CONTRACT_NO = '" + FeatMast.CONTRACT_NO +
                "', ITEM_NO = '" + FeatMast.ITEM_NO +
                "' WHERE FEAT_MAST_CONTRACT_NO ='" + FeatMast.FEAT_MAST_CONTRACT_NO + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }


        //////////// NETWORK ELEMENT ////////////

        public class NetworkElement
        {
            public string MIG_NIS_CHASSIS_ID;
            public string EQUP_LOCN_TTNAME;
            public string EQUP_EQUT_ABBREVIATION;
            public string EQUP_INDEX;
            public string EQUP_STATUS;
            public string EQUP_MANR_ABBREVIATION;
            public string EQUP_EQUM_MODEL;
            public string EQUP_INSERVICE;
            public string MIG_EXCHANGE_ID;
            public string NRM_ID;
            public string ERROR_CODE;
            public string MODEL_VENDOR;
        }

        public class ISPNetworkElement
        {
            public int max;
            public List<NetworkElement> NetworkElementList = new List<NetworkElement>();
        }

        [WebMethod]
        public ISPNetworkElement GetISPNetworkElementMaintenance(int start, int size, string ptt_id, string exc_id, string equip_abb)
        {
            ISPNetworkElement osp = new ISPNetworkElement();
            string role = "";
            //string PTT = "";
            List<string> roles = new List<string>();

            using (Entities ctxData = new Entities())
            {
                var queryUser = (from p in ctxData.WV_USER
                                 where p.USERNAME == User.Identity.Name
                                 select p).Single();

                var queryUserRole = (from fx in ctxData.WV_GROUP
                                     join fxx in ctxData.WV_GRP_ROLE on fx.GRPNAME equals fxx.GRPNAME
                                     where fx.GRP_ID == queryUser.GROUPID
                                     select fxx).Single();

                role = queryUserRole.ROLENAME;

                //var queryPTT = (from d in ctxData.WV_PTT_EXC_MAST
                //             where d.PTT_ID.Trim() == ptt_id.Trim()
                //             select new { d.EXC_ABB }).Skip(start).Take(size);

                //System.Diagnostics.Debug.WriteLine("TEST " + queryPTT);
            }
            roles.Add(role);
            string passPhrase = "preAuthpassword";
            string username = User.Identity.Name;
            string url = Encryptor.GetURL(passPhrase, "10.41.61.177", "8080", username, roles);

            using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
            {
                if (ptt_id == null && exc_id == null && equip_abb == null)
                {
                    int count = (from c in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 orderby d.MIG_NIS_CHASSIS_ID
                                 select new { d.MIG_NIS_CHASSIS_ID, d.EQUP_LOCN_TTNAME, d.EQUP_EQUT_ABBREVIATION, d.EQUP_INDEX,
                                              d.EQUP_STATUS,
                                              d.EQUP_MANR_ABBREVIATION,
                                              d.EQUP_EQUM_MODEL,
                                              d.EQUP_INSERVICE,
                                              d.MIG_EXCHANGE_ID,
                                              d.NRM_ID,
                                              d.ERROR_CODE,
                                              d.MODEL_VENDOR
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_NIS_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EQUP_LOCN_TTNAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;
                        NetworkElement.MODEL_VENDOR = a.MODEL_VENDOR;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id == "Select" && equip_abb == "Select")
                {
                    int count = (from c in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE equals sp.EXC
                                 where sp.PTT.Trim() == ptt_id.Trim()
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE equals sp.EXC
                                 where sp.PTT.Trim() == ptt_id.Trim()
                                 orderby d.MIG_NIS_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_NIS_CHASSIS_ID,
                                     d.EQUP_LOCN_TTNAME,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE,
                                     d.MODEL_VENDOR
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_NIS_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EQUP_LOCN_TTNAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;
                        NetworkElement.MODEL_VENDOR = a.MODEL_VENDOR;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id != "Select" && equip_abb == "Select")
                {
                    int count = (from c in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c.EQUP_LOCN_TTNAME.Trim() == exc_id.Trim()
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where d.EQUP_LOCN_TTNAME.Trim() == exc_id.Trim()
                                 orderby d.MIG_NIS_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_NIS_CHASSIS_ID,
                                     d.EQUP_LOCN_TTNAME,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE,
                                     d.MODEL_VENDOR
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_NIS_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EQUP_LOCN_TTNAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url; 
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;
                        NetworkElement.MODEL_VENDOR = a.MODEL_VENDOR;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id == "Select" && equip_abb != "Select")
                {
                    var query = (from d in ctxData.MIG_NIS_CHASSIS
                                 join sp in ctxData.MIG_EXC_PTT on d.EQUP_LOCN_TTNAME equals sp.EXC
                                 where d.EQUP_EQUT_ABBREVIATION == equip_abb && sp.PTT.Trim() == ptt_id.Trim()
                                 orderby d.MIG_NIS_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_NIS_CHASSIS_ID,
                                     d.EQUP_LOCN_TTNAME,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE,
                                     d.MODEL_VENDOR
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_NIS_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EQUP_LOCN_TTNAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;
                        NetworkElement.MODEL_VENDOR = a.MODEL_VENDOR;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id == "Select" && exc_id == "Select" && equip_abb != "Select")
                {
                    int count = (from c in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c.EQUP_EQUT_ABBREVIATION == equip_abb
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where d.EQUP_EQUT_ABBREVIATION == equip_abb
                                 orderby d.MIG_NIS_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_NIS_CHASSIS_ID,
                                     d.EQUP_LOCN_TTNAME,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE,
                                     d.MODEL_VENDOR
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_NIS_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EQUP_LOCN_TTNAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;
                        NetworkElement.MODEL_VENDOR = a.MODEL_VENDOR;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id != "Select" && equip_abb != "Select")
                {
                    int count = (from c in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c.EQUP_LOCN_TTNAME.Trim() == exc_id.Trim() && c.EQUP_EQUT_ABBREVIATION == equip_abb
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where d.EQUP_LOCN_TTNAME.Trim() == exc_id.Trim() && d.EQUP_EQUT_ABBREVIATION == equip_abb
                                 orderby d.MIG_NIS_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_NIS_CHASSIS_ID,
                                     d.EQUP_LOCN_TTNAME,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE,
                                     d.MODEL_VENDOR
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_NIS_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EQUP_LOCN_TTNAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;
                        NetworkElement.MODEL_VENDOR = a.MODEL_VENDOR;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else
                {
                    int count = (from c in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_NIS_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 orderby d.MIG_NIS_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_NIS_CHASSIS_ID,
                                     d.EQUP_LOCN_TTNAME,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE,
                                     d.MODEL_VENDOR
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_NIS_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EQUP_LOCN_TTNAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;
                        NetworkElement.MODEL_VENDOR = a.MODEL_VENDOR;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
            }

            return osp;
        }

        [WebMethod]
        public ISPNetworkElement GetGraniteNetworkElementMaintenance(int start, int size, string ptt_id, string exc_id, string equip_abb)
        {
            ISPNetworkElement osp = new ISPNetworkElement();
            string role = "";
            List<string> roles = new List<string>();

            using (Entities ctxData = new Entities())
            {
                var queryUser = (from p in ctxData.WV_USER
                                 where p.USERNAME == User.Identity.Name
                                 select p).Single();

                var queryUserRole = (from fx in ctxData.WV_GROUP
                                     join fxx in ctxData.WV_GRP_ROLE on fx.GRPNAME equals fxx.GRPNAME
                                     where fx.GRP_ID == queryUser.GROUPID
                                     select fxx).Single();

                role = queryUserRole.ROLENAME;
            }
            roles.Add(role);
            string passPhrase = "preAuthpassword";
            string username = User.Identity.Name;
            string url = Encryptor.GetURL(passPhrase, "10.41.61.177", "8080", username, roles);

            using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
            {
                if (ptt_id == null && exc_id == null && equip_abb == null)
                {
                    int count = (from c in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 orderby d.MIG_GRT_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_GRT_CHASSIS_ID,
                                     fx.EXCHANGE,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_GRT_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EXCHANGE;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id != "Select" && equip_abb == "Select")
                {
                    int count = (from c in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c.EQUP_LOCN_TTNAME.Trim() == exc_id.Trim()
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where fx.EXCHANGE.Trim() == exc_id.Trim()
                                 orderby d.MIG_GRT_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_GRT_CHASSIS_ID,
                                     fx.EXCHANGE,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_GRT_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EXCHANGE;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id == "Select" && exc_id == "Select" && equip_abb != "Select")
                {
                    int count = (from c in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c.EQUP_EQUT_ABBREVIATION.Trim() == equip_abb.Trim()
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where d.EQUP_EQUT_ABBREVIATION.Trim() == equip_abb.Trim()
                                 orderby d.MIG_GRT_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_GRT_CHASSIS_ID,
                                     fx.EXCHANGE,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_GRT_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EXCHANGE;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id == "Select" && equip_abb != "Select")
                {
                    int count = (from c in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE equals sp.EXC
                                 where c.EQUP_EQUT_ABBREVIATION.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim()
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE equals sp.EXC
                                 where d.EQUP_EQUT_ABBREVIATION.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim()
                                 orderby d.MIG_GRT_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_GRT_CHASSIS_ID,
                                     fx.EXCHANGE,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_GRT_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EXCHANGE;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id != "Select" && equip_abb != "Select")
                {
                    int count = (from c in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where fx.EXCHANGE.Trim() == exc_id.Trim() && c.EQUP_EQUT_ABBREVIATION.Trim() == equip_abb.Trim()
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where fx.EXCHANGE.Trim() == exc_id.Trim() && d.EQUP_EQUT_ABBREVIATION.Trim() == equip_abb.Trim()
                                 orderby d.MIG_GRT_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_GRT_CHASSIS_ID,
                                     fx.EXCHANGE,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_GRT_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EXCHANGE;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id == "Select" && equip_abb == "Select")
                {
                    int count = (from c in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE equals sp.EXC
                                 where sp.PTT.Trim() == ptt_id.Trim()
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE equals sp.EXC
                                 where sp.PTT.Trim() == ptt_id.Trim()
                                 orderby d.MIG_GRT_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_GRT_CHASSIS_ID,
                                     fx.EXCHANGE,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_GRT_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EXCHANGE;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else
                {
                    int count = (from c in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on c.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.MIG_GRT_CHASSIS
                                 join fx in ctxData.MIG_EXCHANGE on d.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 orderby d.MIG_GRT_CHASSIS_ID
                                 select new
                                 {
                                     d.MIG_GRT_CHASSIS_ID,
                                     fx.EXCHANGE,
                                     d.EQUP_EQUT_ABBREVIATION,
                                     d.EQUP_INDEX,
                                     d.EQUP_STATUS,
                                     d.EQUP_MANR_ABBREVIATION,
                                     d.EQUP_EQUM_MODEL,
                                     d.EQUP_INSERVICE,
                                     d.MIG_EXCHANGE_ID,
                                     d.NRM_ID,
                                     d.ERROR_CODE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.MIG_GRT_CHASSIS_ID.ToString();
                        NetworkElement.EQUP_LOCN_TTNAME = a.EXCHANGE;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.EQUP_EQUT_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.EQUP_INDEX;
                        NetworkElement.EQUP_STATUS = a.EQUP_STATUS;
                        NetworkElement.EQUP_MANR_ABBREVIATION = a.EQUP_MANR_ABBREVIATION;
                        NetworkElement.EQUP_EQUM_MODEL = a.EQUP_EQUM_MODEL;
                        NetworkElement.EQUP_INSERVICE = a.EQUP_INSERVICE;
                        NetworkElement.MIG_EXCHANGE_ID = a.MIG_EXCHANGE_ID.ToString();
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;
                        NetworkElement.ERROR_CODE = a.ERROR_CODE;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
            }

            return osp;
        }

        [WebMethod]
        public ISPNetworkElement GetNisFrameMaintenance(int start, int size, string ptt_id, string exc_id, string equip_abb, string frau_name)
        {
            ISPNetworkElement osp = new ISPNetworkElement();
            string role = "";
            List<string> roles = new List<string>();

            using (Entities ctxData = new Entities())
            {
                var queryUser = (from p in ctxData.WV_USER
                                 where p.USERNAME == User.Identity.Name
                                 select p).Single();

                var queryUserRole = (from fx in ctxData.WV_GROUP
                                     join fxx in ctxData.WV_GRP_ROLE on fx.GRPNAME equals fxx.GRPNAME
                                     where fx.GRP_ID == queryUser.GROUPID
                                     select fxx).Single();

                role = queryUserRole.ROLENAME;
            }
            roles.Add(role);
            string passPhrase = "preAuthpassword";
            string username = User.Identity.Name;
            string url = Encryptor.GetURL(passPhrase, "10.41.61.177", "8080", username, roles);

            using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
            {
                if (ptt_id == null && exc_id == null && equip_abb == null && frau_name == null)
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   select d).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count +count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id != "Select" && equip_abb == "Select" && frau_name == "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where fx.EXCHANGE == exc_id.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where fx.EXCHANGE == exc_id.Trim()
                                   select d).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count+count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where fx.EXCHANGE == exc_id.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where fx.EXCHANGE == exc_id.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id == "Select" && exc_id == "Select" && equip_abb != "Select" && frau_name == "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
                                   select d).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count+count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id == "Select" && exc_id == "Select" && equip_abb == "Select" && frau_name != "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where d.FRAU_NAME.Trim() == frau_name.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where d.FRAU_NAME.Trim() == frau_name.Trim()
                                   select d).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count+count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where d.FRAU_NAME.Trim() == frau_name.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where d.FRAU_NAME.Trim() == frau_name.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id == "Select" && equip_abb != "Select" && frau_name == "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                 where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                   where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim()
                                   select d).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count+count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                 where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                   where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id == "Select" && equip_abb == "Select" && frau_name != "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                 where d.FRAU_NAME.Trim() == frau_name.Trim() && sp.PTT.Trim() == ptt_id.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                   where d.FRAU_NAME.Trim() == frau_name.Trim() && sp.PTT.Trim() == ptt_id.Trim()
                                   select d).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count+count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                 where d.FRAU_NAME.Trim() == frau_name.Trim() && sp.PTT.Trim() == ptt_id.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                   where d.FRAU_NAME.Trim() == frau_name.Trim() && sp.PTT.Trim() == ptt_id.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id != "Select" && equip_abb == "Select" && frau_name != "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where d.FRAU_NAME.Trim() == frau_name.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where d.FRAU_NAME.Trim() == frau_name.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
                                   select d).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count +count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where d.FRAU_NAME.Trim() == frau_name.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where d.FRAU_NAME.Trim() == frau_name.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id == "Select" && exc_id == "Select" && equip_abb != "Select" && frau_name != "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where d.FRAU_NAME.Trim() == frau_name.Trim() && c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   where d.FRAU_NAME.Trim() == frau_name.Trim() && c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   select d).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count +count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where d.FRAU_NAME.Trim() == frau_name.Trim() && c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where d.FRAU_NAME.Trim() == frau_name.Trim() && c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id != "Select" && equip_abb != "Select" && frau_name == "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
                                   select d).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count +count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id == "Select" && equip_abb != "Select" && frau_name != "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                 where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                   where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
                                   select d).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count +count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                 where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                   where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id != "Select" && equip_abb != "Select" && frau_name != "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
                                   select d).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count +count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else if (ptt_id != "Select" && exc_id == "Select" && equip_abb == "Select" && frau_name == "Select")
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                 where sp.PTT.Trim() == ptt_id.Trim()
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                   where sp.PTT.Trim() == ptt_id.Trim()
                                   select d).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count +count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                 where sp.PTT.Trim() == ptt_id.Trim()
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
                                   where sp.PTT.Trim() == ptt_id.Trim()
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
                else
                {
                    int count = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 select d).Count();

                    int count_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   select d).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count +count_1;

                    var query = (from d in ctxData.MIG_NIS_RACK
                                 join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                 join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
                                 join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
                                 join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
                                 join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                 orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                 select new
                                 {
                                     c1.FRAC_FRAN_NAME,
                                     c1.FRAC_INDEX,
                                     d.FRAU_NAME,
                                     c2.FUPT_PRODUCTNAME,
                                     c2.FUPT_MANR_ABBREVIATION,
                                     c2.FUPT_TERMINATIONTYPE,
                                     c2.PAIR_COUNT,
                                     c2.FRAU_POSITION,
                                     fx.EXCHANGE,
                                     c3.NRM_ID
                                     //d.ERROR_CODE
                                 }).Skip(start).Take(size);

                    foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }

                    var query_1 = (from d in ctxData.MIG_NIS_RACK
                                   join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
                                   join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
                                   join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
                                   orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
                                   select new
                                   {
                                       c1.FRAC_FRAN_NAME,
                                       c1.FRAC_INDEX,
                                       d.FRAU_NAME,
                                       c2.FUPT_PRODUCTNAME,
                                       c2.FUPT_MANR_ABBREVIATION,
                                       c2.FUPT_TERMINATIONTYPE,
                                       c2.PAIR_COUNT,
                                       c2.FRAU_POSITION,
                                       fx.EXCHANGE,
                                       c2.NRM_ID
                                   }).Skip(start).Take(size);

                    foreach (var a in query_1)
                    {
                        NetworkElement NetworkElement = new NetworkElement();
                        NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
                        NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
                        NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
                        NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
                        NetworkElement.EQUP_STATUS = a.EXCHANGE;
                        NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
                        NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
                        NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
                        NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

                        osp.NetworkElementList.Add(NetworkElement);
                    }
                }
            }

            return osp;
        }


        //[WebMethod]
        //public ISPNetworkElement GetAdmNetworkElement(int start, int size, string ptt_id, string exc_id, string equip_abb)
        //{
        //    ISPNetworkElement osp = new ISPNetworkElement();
            
        //    using (Entities ctxData = new Entities())
        //    {
        //        var queryUser = (from p in ctxData.WV_USER
        //                         where p.USERNAME == User.Identity.Name
        //                         select p).Single();

        //        var queryUserRole = (from fx in ctxData.WV_GROUP
        //                             join fxx in ctxData.WV_GRP_ROLE on fx.GRPNAME equals fxx.GRPNAME
        //                             where fx.GRP_ID == queryUser.GROUPID
        //                             select fxx).Single();
        //    }

        //    //osp.NetworkElementList.OrderBy(asset => Convert.ToInt32(asset.MIG_NIS_CHASSIS_ID));
        //    using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
        //    {
        //        if (ptt_id == null && exc_id == null && equip_abb == null)
        //        {
        //            int count = (from c in ctxData.BI_PROCESS select c).Count();
        //            int countISP = (from c in ctxData.BI_PROCESS_ISP select c).Count();

        //            osp.max = count + countISP;

        //            var query = (from d in ctxData.BI_PROCESS
        //                         join fx in ctxData.BI_CREATENE_REQUEST on d.PROC_ID equals fx.PROC_ID into gj
        //                         join fxx in ctxData.BI_CREATEFU_REQUEST on d.PROC_ID equals fxx.PROC_ID into gjx
        //                         orderby d.PROC_ID descending 
        //                         select new
        //                         {
        //                             d.PROC_ID,
        //                             d.NEPS_JOB_ID,
        //                             d.STATUS,
        //                             d.HAS_ERROR
        //                         }).Skip(start).Take(size);

        //            var queryISP = (from d in ctxData.BI_PROCESS_ISP
        //                            orderby d.PROC_ID descending
        //                            select new
        //                            {
        //                                d.PROC_ID,
        //                                d.NEPS_JOB_ID,
        //                                d.STATUS,
        //                                d.HAS_ERROR
        //                            }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct())
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.PROC_ID.ToString();
        //                NetworkElement.EQUP_LOCN_TTNAME = a.NEPS_JOB_ID;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.STATUS;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            foreach (var a in queryISP.Distinct())
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.PROC_ID.ToString();
        //                NetworkElement.EQUP_LOCN_TTNAME = a.NEPS_JOB_ID;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.STATUS;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //    }

        //    return osp;
        //}

        //[WebMethod]
        //public ISPNetworkElement GetAdmFrame(int start, int size, string ptt_id, string exc_id, string equip_abb)
        //{
        //    ISPNetworkElement osp = new ISPNetworkElement();

        //    using (Entities ctxData = new Entities())
        //    {
        //        var queryUser = (from p in ctxData.WV_USER
        //                         where p.USERNAME == User.Identity.Name
        //                         select p).Single();

        //        var queryUserRole = (from fx in ctxData.WV_GROUP
        //                             join fxx in ctxData.WV_GRP_ROLE on fx.GRPNAME equals fxx.GRPNAME
        //                             where fx.GRP_ID == queryUser.GROUPID
        //                             select fxx).Single();
        //    }

        //    using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
        //    {
        //        if (ptt_id == null && exc_id == null && equip_abb == null)
        //        {
        //            int count = (from c in ctxData.BI_PROCESS select c).Count();
        //            int countISP = (from c in ctxData.BI_PROCESS_ISP select c).Count();

        //            osp.max = count + countISP;

        //            var query = (from d in ctxData.BI_PROCESS
        //                         orderby d.PROC_ID descending
        //                         select new
        //                         {
        //                             d.PROC_ID,
        //                             d.NEPS_JOB_ID,
        //                             d.STATUS,
        //                             d.HAS_ERROR
        //                         }).Skip(start).Take(size);

        //            var queryISP = (from d in ctxData.BI_PROCESS_ISP
        //                            //join fx in ctxData.BI_CREATEFC_REQUEST on d.PROC_ID equals fx.PROC_ID into gj
        //                            //join fxx in ctxData.BI_CREATEFU_REQUEST on d.PROC_ID equals fxx.PROC_ID into gjx
        //                            //join fxxx in ctxData.BI_CREATECS_REQUEST_OSP on d.PROC_ID equals fxxx.PROC_ID into gjxx
        //                            //from fx in gj.DefaultIfEmpty()
        //                            //from fxx in gjx.DefaultIfEmpty()
        //                            //from fxxx in gjxx.DefaultIfEmpty()
        //                            orderby d.PROC_ID descending
        //                            select new
        //                            {
        //                                d.PROC_ID,
        //                                d.NEPS_JOB_ID,
        //                                d.STATUS,
        //                                d.HAS_ERROR
        //                            }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct())
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.PROC_ID.ToString();
        //                NetworkElement.EQUP_LOCN_TTNAME = a.NEPS_JOB_ID;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.STATUS;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            foreach (var a in queryISP.Distinct())
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.PROC_ID.ToString();
        //                NetworkElement.EQUP_LOCN_TTNAME = a.NEPS_JOB_ID;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.STATUS;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //    }

        //    return osp;
        //}

        //[WebMethod]
        //public ISPNetworkElement GetNisFrameMaintenance2(int start, int size, string ptt_id, string exc_id, string equip_abb, string frau_name)
        //{
        //    ISPNetworkElement osp = new ISPNetworkElement();
        //    string role = "";
        //    List<string> roles = new List<string>();

        //    using (Entities ctxData = new Entities())
        //    {
        //        var queryUser = (from p in ctxData.WV_USER
        //                         where p.USERNAME == User.Identity.Name
        //                         select p).Single();

        //        var queryUserRole = (from fx in ctxData.WV_GROUP
        //                             join fxx in ctxData.WV_GRP_ROLE on fx.GRPNAME equals fxx.GRPNAME
        //                             where fx.GRP_ID == queryUser.GROUPID
        //                             select fxx).Single();

        //        role = queryUserRole.ROLENAME;
        //    }
        //    roles.Add(role);
        //    string passPhrase = "preAuthpassword";
        //    string username = User.Identity.Name;
        //    string url = Encryptor.GetURL(passPhrase, "10.41.61.177", "8080", username, roles);

        //    using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
        //    {
        //        if (ptt_id == null && exc_id == null && equip_abb == null && frau_name == null)
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id != "Select" && exc_id != "Select" && equip_abb == "Select" && frau_name == "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where fx.EXCHANGE == exc_id.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where fx.EXCHANGE == exc_id.Trim()
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where fx.EXCHANGE == exc_id.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where fx.EXCHANGE == exc_id.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id == "Select" && exc_id == "Select" && equip_abb != "Select" && frau_name == "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                           select d).Count();

        //            stem.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id == "Select" && exc_id == "Select" && equip_abb == "Select" && frau_name != "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where d.FRAU_NAME.Trim() == frau_name.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where d.FRAU_NAME.Trim() == frau_name.Trim()
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where d.FRAU_NAME.Trim() == frau_name.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where d.FRAU_NAME.Trim() == frau_name.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id != "Select" && exc_id == "Select" && equip_abb != "Select" && frau_name == "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                         where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                           where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                         where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id != "Select" && exc_id == "Select" && equip_abb == "Select" && frau_name != "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                         where d.FRAU_NAME.Trim() == frau_name.Trim() && sp.PTT.Trim() == ptt_id.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                           where d.FRAU_NAME.Trim() == frau_name.Trim() && sp.PTT.Trim() == ptt_id.Trim()
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                         where d.FRAU_NAME.Trim() == frau_name.Trim() && sp.PTT.Trim() == ptt_id.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                           where d.FRAU_NAME.Trim() == frau_name.Trim() && sp.PTT.Trim() == ptt_id.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id != "Select" && exc_id != "Select" && equip_abb == "Select" && frau_name != "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where d.FRAU_NAME.Trim() == frau_name.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where d.FRAU_NAME.Trim() == frau_name.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where d.FRAU_NAME.Trim() == frau_name.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where d.FRAU_NAME.Trim() == frau_name.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id == "Select" && exc_id == "Select" && equip_abb != "Select" && frau_name != "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where d.FRAU_NAME.Trim() == frau_name.Trim() && c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           where d.FRAU_NAME.Trim() == frau_name.Trim() && c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where d.FRAU_NAME.Trim() == frau_name.Trim() && c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where d.FRAU_NAME.Trim() == frau_name.Trim() && c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id != "Select" && exc_id != "Select" && equip_abb != "Select" && frau_name == "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id != "Select" && exc_id == "Select" && equip_abb != "Select" && frau_name != "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                         where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                           where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                         where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                           where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && sp.PTT.Trim() == ptt_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id != "Select" && exc_id != "Select" && equip_abb != "Select" && frau_name != "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           where c1.FRAC_FRAN_NAME.Trim() == equip_abb.Trim() && fx.EXCHANGE.Trim() == exc_id.Trim() && d.FRAU_NAME.Trim() == frau_name.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else if (ptt_id != "Select" && exc_id == "Select" && equip_abb == "Select" && frau_name == "Select")
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                         where sp.PTT.Trim() == ptt_id.Trim()
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                           where sp.PTT.Trim() == ptt_id.Trim()
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                         where sp.PTT.Trim() == ptt_id.Trim()
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           join sp in ctxData.MIG_EXC_PTT on fx.EXCHANGE.Trim() equals sp.EXC.Trim()
        //                           where sp.PTT.Trim() == ptt_id.Trim()
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //        else
        //        {
        //            int count = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         select d).Count();

        //            int count_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           select d).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count_1;

        //            var query = (from d in ctxData.MIG_NIS_RACK
        //                         join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                         join c3 in ctxData.MIG_NIS_VRACK on d.MIG_NIS_RACK_ID equals c3.MIG_NIS_RACK_ID
        //                         join c4 in ctxData.MIG_NIS_VPPANEL on c3.MIG_NIS_VRACK_ID equals c4.MIG_NIS_VRACK_ID
        //                         join c2 in ctxData.MIG_NIS_PPANEL on c4.MIG_NIS_PPANEL_ID equals c2.MIG_NIS_PPANEL_ID
        //                         join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                         orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                         select new
        //                         {
        //                             c1.FRAC_FRAN_NAME,
        //                             c1.FRAC_INDEX,
        //                             d.FRAU_NAME,
        //                             c2.FUPT_PRODUCTNAME,
        //                             c2.FUPT_MANR_ABBREVIATION,
        //                             c2.FUPT_TERMINATIONTYPE,
        //                             c2.PAIR_COUNT,
        //                             c2.FRAU_POSITION,
        //                             fx.EXCHANGE,
        //                             c3.NRM_ID
        //                             d.ERROR_CODE
        //                         }).Skip(start).Take(size);

        //            foreach (var a in query.Distinct().OrderBy(it => it.EXCHANGE))
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }

        //            var query_1 = (from d in ctxData.MIG_NIS_RACK
        //                           join c1 in ctxData.MIG_NIS_BAYLINE on d.MIG_NIS_BAYLINE_ID equals c1.MIG_NIS_BAYLINE_ID
        //                           join c2 in ctxData.MIG_NIS_PPANEL on d.MIG_NIS_RACK_ID equals c2.MIG_NIS_RACK_ID
        //                           join fx in ctxData.MIG_EXCHANGE on c1.MIG_EXCHANGE_ID equals fx.MIG_EXCHANGE_ID
        //                           orderby c1.FRAC_FRAN_NAME, d.FRAU_NAME, fx.MIG_EXCHANGE_ID, c2.FRAU_POSITION
        //                           select new
        //                           {
        //                               c1.FRAC_FRAN_NAME,
        //                               c1.FRAC_INDEX,
        //                               d.FRAU_NAME,
        //                               c2.FUPT_PRODUCTNAME,
        //                               c2.FUPT_MANR_ABBREVIATION,
        //                               c2.FUPT_TERMINATIONTYPE,
        //                               c2.PAIR_COUNT,
        //                               c2.FRAU_POSITION,
        //                               fx.EXCHANGE,
        //                               c2.NRM_ID
        //                           }).Skip(start).Take(size);

        //            foreach (var a in query_1)
        //            {
        //                NetworkElement NetworkElement = new NetworkElement();
        //                NetworkElement.MIG_NIS_CHASSIS_ID = a.FUPT_PRODUCTNAME;
        //                NetworkElement.EQUP_LOCN_TTNAME = a.FRAC_FRAN_NAME;
        //                NetworkElement.EQUP_EQUT_ABBREVIATION = a.FUPT_MANR_ABBREVIATION;
        //                NetworkElement.EQUP_INDEX = a.FRAC_INDEX;
        //                NetworkElement.EQUP_STATUS = a.EXCHANGE;
        //                NetworkElement.EQUP_EQUM_MODEL = a.FRAU_NAME;
        //                NetworkElement.EQUP_INSERVICE = a.PAIR_COUNT.ToString();
        //                NetworkElement.MODEL_VENDOR = a.FRAU_POSITION;
        //                NetworkElement.NRM_ID = a.NRM_ID.ToString() + "/Graphic/ActionsTab" + url;

        //                osp.NetworkElementList.Add(NetworkElement);
        //            }
        //        }
        //    }

        //    return osp;
        //}

        class Encryptor
        {
            private static byte[] CreateKeyBytes(string passPhrase)
            {
                char[] keyChars = passPhrase.ToCharArray();
                byte[] keyByte = new byte[16];
                for (int i = 0; i < 16; i++)
                {
                    if (keyChars.Length > i)
                        keyByte[i] = (byte)keyChars[i];
                }

                if (keyChars.Length < 16)
                {
                    for (int i = keyChars.Length; i < 16; i++)
                        keyByte[i] = 0x00;
                }

                return keyByte;

            }

            public static string Encrypt(Encoding encoding, string strtoencrypt, string key, string iv, CipherMode mode, PaddingMode padding, int blocksize)
            {

                var mstream = new MemoryStream();
                using (var aes = new AesManaged())
                {
                    var keybytes = CreateKeyBytes(key);
                    aes.BlockSize = blocksize;
                    aes.KeySize = keybytes.Length * 8;
                    aes.Key = keybytes;

                    aes.IV = CreateKeyBytes(iv);
                    aes.Mode = mode;
                    aes.Padding = padding;


                    using (var cstream = new CryptoStream(mstream, aes.CreateEncryptor(aes.Key, aes.IV), CryptoStreamMode.Write))
                    {
                        var bytesToEncrypt = encoding.GetBytes(strtoencrypt);
                        cstream.Write(bytesToEncrypt, 0, bytesToEncrypt.Length);
                        cstream.FlushFinalBlock();
                    }

                }

                var encrypted = mstream.ToArray();
                return Convert.ToBase64String(encrypted);
            }


            public static string GetURL(string passPhrase, string hostname, string port, string username, List<string> roles)
            {

                string output = "";


                string rolesCommaSeparated = ListToCommaSeparated(roles);
                var key = passPhrase;
                var iv = "";

                string encryptedUsername = Encrypt(Encoding.ASCII, username, key, iv, CipherMode.CBC, PaddingMode.PKCS7, 128);
                string encryptedRoles = Encrypt(Encoding.ASCII, rolesCommaSeparated, key, iv, CipherMode.CBC, PaddingMode.PKCS7, 128);


                //output = string.Format("http://{0}:{1}/nrm?user={2}&roles={3}", hostname, port,
                //    HttpUtility.UrlEncode(encryptedUsername), HttpUtility.UrlEncode(encryptedRoles));

                output = string.Format("?user={2}&roles={3}", hostname, port,
                    HttpUtility.UrlEncode(encryptedUsername), HttpUtility.UrlEncode(encryptedRoles));

                return output;
            }

            private static string ListToCommaSeparated(List<string> roles)
            {
                string output = "";

                int i = 0;
                foreach (string role in roles)
                {
                    if (i++ > 0)
                        output += ",";
                    output += role;
                }
                return output;
            }




        }


        //////////// NETWORK ELEMENT ////////////

        public class AgTemplate
        {
            public string MODEL_ID;
            public string MANUFACTURER;
            public string TEMPLATE_MODEL;
            public string XL_FILE;
            public string MSAN_FNO;
            public string ID_CHILD;
            public string RACK_NO;
            public string FRAME_NO;
            public string SLOT_NO;
            public string SLOT_NIS;
            public string CARD_TYPE;
            public string CARD_MODEL;
            public string PORT_LO;
            public string PORT_HI;
            public string MIN_MATERIAL;
        }

        public class NepsAgTemplate
        {
            public int max;
            public List<AgTemplate> AgTemplateList = new List<AgTemplate>();
        }

        [WebMethod]
        public NepsAgTemplate GetAgTemplate(int start, int size, string MAN, string MOD, string FNO)
        {
            NepsAgTemplate osp = new NepsAgTemplate();
            short fno = 0;
            if (MAN == "Select") { MAN = null; }
            if (MOD == "Select") { MOD = null; }
            if (FNO == "Select") { FNO = null; }
            else { fno = Convert.ToInt16(FNO); }
            System.Diagnostics.Debug.WriteLine("FNO"+fno);
            using (Entities_NEPS ctxData = new Entities_NEPS())
            {
                if (MAN == null && MOD == null && FNO == null)
                {
                    int count = (from c in ctxData.AG_MSAN_XLTEMPLATE
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.AG_MSAN_XLTEMPLATE
                                 orderby d.MODEL_ID descending
                                 select new
                                 {
                                     d.MODEL_ID,
                                     d.MANUFACTURER,
                                     d.MODEL,
                                     d.XL_FILE,
                                     d.MSAN_FNO
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        AgTemplate AgTemp = new AgTemplate();
                        AgTemp.MODEL_ID = a.MODEL_ID.ToString();
                        AgTemp.MANUFACTURER = a.MANUFACTURER;
                        AgTemp.TEMPLATE_MODEL = a.MODEL;
                        AgTemp.XL_FILE = a.XL_FILE;
                        AgTemp.MSAN_FNO = a.MSAN_FNO.ToString();

                        osp.AgTemplateList.Add(AgTemp);
                    }
                }
                else if (MAN != null && MOD == null && FNO == null)
                {
                    int count = (from c in ctxData.AG_MSAN_XLTEMPLATE
                                 where c.MANUFACTURER == MAN
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.AG_MSAN_XLTEMPLATE
                                 where d.MANUFACTURER == MAN
                                 orderby d.MODEL_ID descending
                                 select new
                                 {
                                     d.MODEL_ID,
                                     d.MANUFACTURER,
                                     d.MODEL,
                                     d.XL_FILE,
                                     d.MSAN_FNO
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        AgTemplate AgTemp = new AgTemplate();
                        AgTemp.MODEL_ID = a.MODEL_ID.ToString();
                        AgTemp.MANUFACTURER = a.MANUFACTURER;
                        AgTemp.TEMPLATE_MODEL = a.MODEL;
                        AgTemp.XL_FILE = a.XL_FILE;
                        AgTemp.MSAN_FNO = a.MSAN_FNO.ToString();

                        osp.AgTemplateList.Add(AgTemp);
                    }
                } else if (MAN == null && MOD != null && FNO == null)
                {
                    int count = (from c in ctxData.AG_MSAN_XLTEMPLATE
                                 where c.MODEL == MOD
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.AG_MSAN_XLTEMPLATE
                                 where d.MODEL == MOD
                                 orderby d.MODEL_ID descending
                                 select new
                                 {
                                     d.MODEL_ID,
                                     d.MANUFACTURER,
                                     d.MODEL,
                                     d.XL_FILE,
                                     d.MSAN_FNO
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        AgTemplate AgTemp = new AgTemplate();
                        AgTemp.MODEL_ID = a.MODEL_ID.ToString();
                        AgTemp.MANUFACTURER = a.MANUFACTURER;
                        AgTemp.TEMPLATE_MODEL = a.MODEL;
                        AgTemp.XL_FILE = a.XL_FILE;
                        AgTemp.MSAN_FNO = a.MSAN_FNO.ToString();

                        osp.AgTemplateList.Add(AgTemp);
                    }
                } else if (MAN == null && MOD == null && FNO != null)
                {
                    int count = (from c in ctxData.AG_MSAN_XLTEMPLATE
                                 where c.MSAN_FNO == fno
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.AG_MSAN_XLTEMPLATE
                                 where d.MSAN_FNO == fno
                                 orderby d.MODEL_ID descending
                                 select new
                                 {
                                     d.MODEL_ID,
                                     d.MANUFACTURER,
                                     d.MODEL,
                                     d.XL_FILE,
                                     d.MSAN_FNO
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        AgTemplate AgTemp = new AgTemplate();
                        AgTemp.MODEL_ID = a.MODEL_ID.ToString();
                        AgTemp.MANUFACTURER = a.MANUFACTURER;
                        AgTemp.TEMPLATE_MODEL = a.MODEL;
                        AgTemp.XL_FILE = a.XL_FILE;
                        AgTemp.MSAN_FNO = a.MSAN_FNO.ToString();

                        osp.AgTemplateList.Add(AgTemp);
                    }
                } else if (MAN != null && MOD != null && FNO == null)
                {
                    int count = (from c in ctxData.AG_MSAN_XLTEMPLATE
                                 where c.MANUFACTURER == MAN && c.MODEL == MOD
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.AG_MSAN_XLTEMPLATE
                                 where d.MANUFACTURER == MAN && d.MODEL == MOD
                                 orderby d.MODEL_ID descending
                                 select new
                                 {
                                     d.MODEL_ID,
                                     d.MANUFACTURER,
                                     d.MODEL,
                                     d.XL_FILE,
                                     d.MSAN_FNO
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        AgTemplate AgTemp = new AgTemplate();
                        AgTemp.MODEL_ID = a.MODEL_ID.ToString();
                        AgTemp.MANUFACTURER = a.MANUFACTURER;
                        AgTemp.TEMPLATE_MODEL = a.MODEL;
                        AgTemp.XL_FILE = a.XL_FILE;
                        AgTemp.MSAN_FNO = a.MSAN_FNO.ToString();

                        osp.AgTemplateList.Add(AgTemp);
                    }
                }
                else if (MAN != null && MOD == null && FNO != null)
                {
                    int count = (from c in ctxData.AG_MSAN_XLTEMPLATE
                                 where c.MANUFACTURER == MAN && c.MSAN_FNO == fno
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.AG_MSAN_XLTEMPLATE
                                 where d.MANUFACTURER == MAN && d.MSAN_FNO == fno
                                 orderby d.MODEL_ID descending
                                 select new
                                 {
                                     d.MODEL_ID,
                                     d.MANUFACTURER,
                                     d.MODEL,
                                     d.XL_FILE,
                                     d.MSAN_FNO
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        AgTemplate AgTemp = new AgTemplate();
                        AgTemp.MODEL_ID = a.MODEL_ID.ToString();
                        AgTemp.MANUFACTURER = a.MANUFACTURER;
                        AgTemp.TEMPLATE_MODEL = a.MODEL;
                        AgTemp.XL_FILE = a.XL_FILE;
                        AgTemp.MSAN_FNO = a.MSAN_FNO.ToString();

                        osp.AgTemplateList.Add(AgTemp);
                    }
                }
                else if (MAN == null && MOD != null && FNO != null)
                {
                    int count = (from c in ctxData.AG_MSAN_XLTEMPLATE
                                 where c.MODEL == MOD && c.MSAN_FNO == fno
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.AG_MSAN_XLTEMPLATE
                                 where d.MODEL == MOD && d.MSAN_FNO == fno
                                 orderby d.MODEL_ID descending
                                 select new
                                 {
                                     d.MODEL_ID,
                                     d.MANUFACTURER,
                                     d.MODEL,
                                     d.XL_FILE,
                                     d.MSAN_FNO
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        AgTemplate AgTemp = new AgTemplate();
                        AgTemp.MODEL_ID = a.MODEL_ID.ToString();
                        AgTemp.MANUFACTURER = a.MANUFACTURER;
                        AgTemp.TEMPLATE_MODEL = a.MODEL;
                        AgTemp.XL_FILE = a.XL_FILE;
                        AgTemp.MSAN_FNO = a.MSAN_FNO.ToString();

                        osp.AgTemplateList.Add(AgTemp);
                    }
                }
                else if (MAN != null && MOD != null && FNO != null)
                {
                    int count = (from c in ctxData.AG_MSAN_XLTEMPLATE
                                 where c.MANUFACTURER == MAN && c.MODEL == MOD && c.MSAN_FNO == fno
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.AG_MSAN_XLTEMPLATE
                                 where d.MANUFACTURER == MAN && d.MODEL == MOD && d.MSAN_FNO == fno
                                 orderby d.MODEL_ID descending
                                 select new
                                 {
                                     d.MODEL_ID,
                                     d.MANUFACTURER,
                                     d.MODEL,
                                     d.XL_FILE,
                                     d.MSAN_FNO
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        AgTemplate AgTemp = new AgTemplate();
                        AgTemp.MODEL_ID = a.MODEL_ID.ToString();
                        AgTemp.MANUFACTURER = a.MANUFACTURER;
                        AgTemp.TEMPLATE_MODEL = a.MODEL;
                        AgTemp.XL_FILE = a.XL_FILE;
                        AgTemp.MSAN_FNO = a.MSAN_FNO.ToString();

                        osp.AgTemplateList.Add(AgTemp);
                    }
                }

            }

            return osp;
        }

        public bool AddTemplate(AgTemplate TempNew)
        {
            decimal nextVal;
            using (Entities_NEPS ctxData = new Entities_NEPS())
            {
                var count = (from c in ctxData.AG_MSAN_XLTEMPLATE
                            orderby c.MODEL_ID descending
                            select c);

                nextVal = count.Max(x => x.MODEL_ID) + 1;
                System.Diagnostics.Debug.WriteLine(nextVal);
            }
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into AG_MSAN_XLTEMPLATE(MODEL_ID, MANUFACTURER, MODEL, XL_FILE, MSAN_FNO ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[5];

                oraPrm[0] = new OracleParameter("v_Model_ID", OracleDbType.Decimal);
                oraPrm[0].Value = nextVal;
                oraPrm[1] = new OracleParameter("v_Manufacturer", OracleDbType.Varchar2);
                oraPrm[1].Value = TempNew.MANUFACTURER;
                oraPrm[2] = new OracleParameter("v_Model", OracleDbType.Varchar2);
                oraPrm[2].Value = TempNew.TEMPLATE_MODEL;
                oraPrm[3] = new OracleParameter("v_Xl_File", OracleDbType.Varchar2);
                oraPrm[3].Value = TempNew.XL_FILE;
                oraPrm[4] = new OracleParameter("v_FNO", OracleDbType.Int16);
                oraPrm[4].Value = TempNew.MSAN_FNO;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);

                System.Diagnostics.Debug.WriteLine("RESULT :" + success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        public bool AddEquipmentTemp(string equipment, string minmat, string desc, string model, string manufacturer, string capasity, string e1, string protection, string numcore)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();
                int varNum = 36;
                string aa ="";
                string sqlCmd = "";
                if (equipment != "MUX")
                {
                    sqlCmd = "ALTER TABLE NEPS.REF_" + equipment + " DISABLE ALL TRIGGERS";

                    using (Entities ctxData = new Entities())
                    {
                        tool.ExecuteSql(ctxData, sqlCmd);
                    }

                    string sqlStr = "insert into REF_" + equipment + " (MIN_MATERIAL, DESCRIPTION, MODEL, MANUFACTURER, SYSTEM_CAPACITY, TOTAL_POSITIONS, DIMENSION_DEPTH, DIMENSION_WIDTH, DIMENSION_HEIGHT";
                    sqlStr += ") values ";

                    OracleParameter[] oraPrm = new OracleParameter[9];

                    oraPrm[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                    oraPrm[0].Value = minmat;
                    oraPrm[1] = new OracleParameter("v_DESCRIPTION", OracleDbType.Varchar2);
                    oraPrm[1].Value = desc;
                    oraPrm[2] = new OracleParameter("v_MODEL", OracleDbType.Varchar2);
                    oraPrm[2].Value = model;
                    oraPrm[3] = new OracleParameter("v_MANUFACTURER", OracleDbType.Varchar2);
                    oraPrm[3].Value = manufacturer;
                    oraPrm[4] = new OracleParameter("v_SYSTEM_CAPACITY", OracleDbType.Int32);
                    oraPrm[4].Value = capasity;
                    oraPrm[5] = new OracleParameter("v_TOTAL_POSITIONS", OracleDbType.Int32);
                    oraPrm[5].Value = varNum;
                    oraPrm[6] = new OracleParameter("v_DIMENSION_DEPTH", OracleDbType.Int32);
                    oraPrm[6].Value = varNum;
                    oraPrm[7] = new OracleParameter("v_DIMENSION_WIDTH", OracleDbType.Int32);
                    oraPrm[7].Value = varNum;
                    oraPrm[8] = new OracleParameter("v_DIMENSION_HEIGHT", OracleDbType.Int32);
                    oraPrm[8].Value = 72;

                    aa = tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);

                    System.Diagnostics.Debug.WriteLine("SQL :" + aa);

                    sqlCmd = "ALTER TABLE NEPS.REF_" + equipment + " ENABLE ALL TRIGGERS";

                    using (Entities ctxData = new Entities())
                    {
                        tool.ExecuteSql(ctxData, sqlCmd);
                    }
                }
                else
                {

                    sqlCmd = "ALTER TABLE NEPS.REF_" + equipment + " DISABLE ALL TRIGGERS";

                    using (Entities ctxData = new Entities())
                    {
                        tool.ExecuteSql(ctxData, sqlCmd);
                    }

                    string sqlStr = "insert into REF_" + equipment + " (MIN_MATERIAL, MODEL, MANUFACTURER, NO_E1, PROTECTION, NUM_CORE";
                    sqlStr += ") values ";

                    OracleParameter[] oraPrm = new OracleParameter[6];

                    oraPrm[0] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                    oraPrm[0].Value = minmat;
                    oraPrm[1] = new OracleParameter("v_MODEL", OracleDbType.Varchar2);
                    oraPrm[1].Value = model;
                    oraPrm[2] = new OracleParameter("v_MANUFACTURER", OracleDbType.Varchar2);
                    oraPrm[2].Value = manufacturer;
                    oraPrm[3] = new OracleParameter("v_NO_E1", OracleDbType.Varchar2);
                    oraPrm[3].Value = e1;
                    oraPrm[4] = new OracleParameter("v_PROTECTION", OracleDbType.Varchar2);
                    oraPrm[4].Value = protection;
                    oraPrm[5] = new OracleParameter("v_NUM_CORE", OracleDbType.Int32);
                    oraPrm[5].Value = numcore;

                    aa = tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);

                    sqlCmd = "ALTER TABLE NEPS.REF_" + equipment + " ENABLE ALL TRIGGERS";

                    using (Entities ctxData = new Entities())
                    {
                        tool.ExecuteSql(ctxData, sqlCmd);
                    }
                }
                //TO CREATE REF_MODEL
                using (Entities_NEPS ctxData = new Entities_NEPS())
                {
                    int query1 = (from d in ctxData.WV_REF_MODEL
                                  where d.MANUFACTURER.Trim() == manufacturer.Trim() && d.MODEL.Trim() == model.Trim()
                                  select d).Count();
                    System.Diagnostics.Debug.WriteLine("query1 :" + query1);
                    if (query1 == 0)
                    {
                        string sqlStr1 = "insert into WV_REF_MODEL (MANUFACTURER, MODEL) values";
                        OracleParameter[] oraPrm1 = new OracleParameter[2];

                        oraPrm1[0] = new OracleParameter("v_MANUFACTURER", OracleDbType.Varchar2);
                        oraPrm1[0].Value = desc;
                        oraPrm1[1] = new OracleParameter("v_MODEL", OracleDbType.Varchar2);
                        oraPrm1[1].Value = model;

                        tool.ExecuteStored(connString, sqlStr1, CommandType.StoredProcedure, oraPrm1, false);
                    }
                }
                System.Diagnostics.Debug.WriteLine("RESULT :" + aa);

                if (aa != "ok")
                {
                    success = false;
                }
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        [WebMethod]
        public bool AddDetailsTemp(AgTemplate tempDet, string id)
        {
            Tools tool = new Tools();
            bool success = true;
            decimal nextVal;
            string msanfno = "";
            string manufacturer = "";

            using (Entities_NEPS ctxData = new Entities_NEPS())
            {
                var count = (from c in ctxData.AG_MSAN_TEMPLATE
                             orderby c.ID descending
                             select c);

                nextVal = count.Max(x => x.ID) + 1;
                System.Diagnostics.Debug.WriteLine(nextVal);
                int datamod = Convert.ToInt32(tempDet.MODEL_ID);
                var dataTemp = (from c in ctxData.AG_MSAN_XLTEMPLATE
                                where c.MODEL_ID == datamod
                                select new { c.MSAN_FNO, c.MANUFACTURER }).Single();

                msanfno = dataTemp.MSAN_FNO.ToString();
                manufacturer = dataTemp.MANUFACTURER;
            }

            try
            {

                string sqlStr = "insert into AG_MSAN_TEMPLATE(ID, MODEL_ID, RACK_NO, FRAME_NO, SLOT_NO, SLOT_NIS, CARD_TYPE, CARD_MODEL, PORT_LO, PORT_HI, MIN_MATERIAL ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[11];

                oraPrm[0] = new OracleParameter("v_ID", OracleDbType.Decimal);
                oraPrm[0].Value = nextVal;
                oraPrm[1] = new OracleParameter("v_MODEL_ID", OracleDbType.Decimal);
                oraPrm[1].Value = tempDet.MODEL_ID;
                oraPrm[2] = new OracleParameter("v_RACK_NO", OracleDbType.Varchar2);
                oraPrm[2].Value = tempDet.RACK_NO;
                oraPrm[3] = new OracleParameter("v_FRAME_NO", OracleDbType.Varchar2);
                oraPrm[3].Value = tempDet.FRAME_NO;
                oraPrm[4] = new OracleParameter("v_SLOT_NO", OracleDbType.Varchar2);
                oraPrm[4].Value = tempDet.SLOT_NO;
                oraPrm[5] = new OracleParameter("v_SLOT_NIS", OracleDbType.Varchar2);
                oraPrm[5].Value = tempDet.SLOT_NIS;
                oraPrm[6] = new OracleParameter("v_CARD_TYPE", OracleDbType.Varchar2);
                oraPrm[6].Value = tempDet.CARD_TYPE;
                oraPrm[7] = new OracleParameter("v_CARD_MODEL", OracleDbType.Varchar2);
                oraPrm[7].Value = tempDet.CARD_MODEL;
                oraPrm[8] = new OracleParameter("v_PORT_LO", OracleDbType.Varchar2);
                oraPrm[8].Value = tempDet.PORT_LO;
                oraPrm[9] = new OracleParameter("v_PORT_HI", OracleDbType.Varchar2);
                oraPrm[9].Value = tempDet.PORT_HI;
                oraPrm[10] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                oraPrm[10].Value = tempDet.MIN_MATERIAL;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);

                System.Diagnostics.Debug.WriteLine("RESULT :" + success);

                    string sqlStr1 = "insert into REF_FCARD_MSAN(MSAN_FNO, MIN_MATERIAL, MANUFACTURER, CARD_TYPE, CARD_MODEL, NUM_OF_PORTS";
                    sqlStr1 += ") values ";

                    OracleParameter[] oraPrm1 = new OracleParameter[6];

                    oraPrm1[0] = new OracleParameter("v_MSAN_FNO", OracleDbType.Decimal);
                    oraPrm1[0].Value = msanfno;
                    oraPrm1[1] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                    oraPrm1[1].Value = tempDet.MIN_MATERIAL;
                    oraPrm1[2] = new OracleParameter("v_MANUFACTURER", OracleDbType.Varchar2);
                    oraPrm1[2].Value = manufacturer;
                    oraPrm1[3] = new OracleParameter("v_CARD_TYPE", OracleDbType.Varchar2);
                    oraPrm1[3].Value = tempDet.CARD_TYPE;
                    oraPrm1[4] = new OracleParameter("v_CARD_MODEL", OracleDbType.Varchar2);
                    oraPrm1[4].Value = tempDet.CARD_MODEL;
                    oraPrm1[5] = new OracleParameter("v_NUM_OF_PORTS", OracleDbType.Decimal);
                    oraPrm1[5].Value = tempDet.PORT_HI;

                    tool.ExecuteStored(connString, sqlStr1, CommandType.StoredProcedure, oraPrm1, false);

                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        [WebMethod]
        public bool UpdateDetailsTemp(AgTemplate tempDet, string id)
        {
            Tools tool = new Tools();
            bool success = true;
            int msanfno;
            string manufacturer = "";

            using (Entities_NEPS ctxData = new Entities_NEPS())
            {
                int dataID = Convert.ToInt32(id);
                var dataTemp1 = (from c in ctxData.AG_MSAN_TEMPLATE
                                where c.ID == dataID
                                select c).Single();

                //int datamod = Convert.ToInt32(dataTemp1.MODEL_ID);
                var dataTemp = (from c in ctxData.AG_MSAN_XLTEMPLATE
                                where c.MODEL_ID == dataTemp1.MODEL_ID
                                select new { c.MSAN_FNO, c.MANUFACTURER }).Single();

                msanfno = Convert.ToInt32(dataTemp.MSAN_FNO);
                manufacturer = dataTemp.MANUFACTURER;
            }
            try
            {
                string sqlStr = "update AG_MSAN_TEMPLATE set RACK_NO = '" + tempDet.RACK_NO + "', FRAME_NO = '" + tempDet.FRAME_NO +
                    "', SLOT_NO = '" + tempDet.SLOT_NO + "', SLOT_NIS = '" + tempDet.SLOT_NIS + "', CARD_TYPE = '" + tempDet.CARD_TYPE +
                    "', CARD_MODEL = '" + tempDet.CARD_MODEL + "', PORT_LO = '" + tempDet.PORT_LO + "', PORT_HI = '" + tempDet.PORT_LO +
                    "', MIN_MATERIAL = '" + tempDet.MIN_MATERIAL + "' WHERE ID = '" + tempDet.ID_CHILD + "'";

                string sqlStr1 = "insert into REF_FCARD_MSAN(MSAN_FNO, MIN_MATERIAL, MANUFACTURER, CARD_TYPE, CARD_MODEL, NUM_OF_PORTS";
                sqlStr1 += ") values ";

                OracleParameter[] oraPrm1 = new OracleParameter[6];

                oraPrm1[0] = new OracleParameter("v_MSAN_FNO", OracleDbType.Decimal);
                oraPrm1[0].Value = msanfno;
                oraPrm1[1] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                oraPrm1[1].Value = tempDet.MIN_MATERIAL;
                oraPrm1[2] = new OracleParameter("v_MANUFACTURER", OracleDbType.Varchar2);
                oraPrm1[2].Value = manufacturer;
                oraPrm1[3] = new OracleParameter("v_CARD_TYPE", OracleDbType.Varchar2);
                oraPrm1[3].Value = tempDet.CARD_TYPE;
                oraPrm1[4] = new OracleParameter("v_CARD_MODEL", OracleDbType.Varchar2);
                oraPrm1[4].Value = tempDet.CARD_MODEL;
                oraPrm1[5] = new OracleParameter("v_NUM_OF_PORTS", OracleDbType.Decimal);
                oraPrm1[5].Value = tempDet.PORT_HI;

                tool.ExecuteStored(connString, sqlStr1, CommandType.StoredProcedure, oraPrm1, false);

                using (Entities ctxData = new Entities())
                {
                    success = tool.ExecuteSql(ctxData, sqlStr);
                }
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        [WebMethod]
        public bool CopyDetailsTemp(string id, string xlfile, string MANUFACTURER, string MODEL, string FNO)
        {
            Tools tool = new Tools();
            bool success = true;
            decimal nextVal;
            decimal nextVal2;
            decimal ids;
            WebService._base.AgTemplate tempDet = new WebService._base.AgTemplate();
            
            using (Entities_NEPS ctxData = new Entities_NEPS())
            {
                ids = Convert.ToInt32(id);
                var xldata = (from c in ctxData.AG_MSAN_XLTEMPLATE
                              where c.MODEL_ID == ids
                              select c).Single();

                var count = (from c in ctxData.AG_MSAN_XLTEMPLATE
                             orderby c.MODEL_ID descending
                             select c);

                nextVal = count.Max(x => x.MODEL_ID) + 1;
                
                System.Diagnostics.Debug.WriteLine("UPDATE!! :" + nextVal);
                tempDet.MODEL_ID = nextVal.ToString();
                tempDet.MANUFACTURER = MANUFACTURER;
                tempDet.TEMPLATE_MODEL = MODEL;
                tempDet.XL_FILE = xlfile;
                tempDet.MSAN_FNO = FNO;
            }

            try
            {
                string sqlStr = "insert into AG_MSAN_XLTEMPLATE(MODEL_ID, MANUFACTURER, MODEL, XL_FILE, MSAN_FNO ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[5];

                oraPrm[0] = new OracleParameter("v_Model_ID", OracleDbType.Decimal);
                oraPrm[0].Value = nextVal;
                oraPrm[1] = new OracleParameter("v_Manufacturer", OracleDbType.Varchar2);
                oraPrm[1].Value = tempDet.MANUFACTURER;
                oraPrm[2] = new OracleParameter("v_Model", OracleDbType.Varchar2);
                oraPrm[2].Value = tempDet.TEMPLATE_MODEL;
                oraPrm[3] = new OracleParameter("v_Xl_File", OracleDbType.Varchar2);
                oraPrm[3].Value = tempDet.XL_FILE;
                oraPrm[4] = new OracleParameter("v_FNO", OracleDbType.Int16);
                oraPrm[4].Value = tempDet.MSAN_FNO;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);

                using (Entities_NEPS ctxData = new Entities_NEPS())
                {
                    var count2 = (from c in ctxData.AG_MSAN_TEMPLATE
                                 orderby c.ID descending
                                 select c);

                    var data = (from c in ctxData.AG_MSAN_TEMPLATE
                                  where c.MODEL_ID == ids
                                  select c);
                    int i = 1;
                    foreach (var a in data)
                    {
                        nextVal2 = count2.Max(x => x.ID) + i;
                        string sqlStr2 = "insert into AG_MSAN_TEMPLATE(ID, MODEL_ID, RACK_NO, FRAME_NO, SLOT_NO, SLOT_NIS, CARD_TYPE, CARD_MODEL, PORT_LO, PORT_HI, MIN_MATERIAL ";
                        sqlStr2 += ") values ";

                        System.Diagnostics.Debug.WriteLine("RESULT :" + nextVal2);

                        System.Diagnostics.Debug.WriteLine("RESULT la :" + a.MIN_MATERIAL);

                        OracleParameter[] oraPrm2 = new OracleParameter[11];

                        oraPrm2[0] = new OracleParameter("v_ID", OracleDbType.Decimal);
                        oraPrm2[0].Value = nextVal2;
                        oraPrm2[1] = new OracleParameter("v_MODEL_ID", OracleDbType.Decimal);
                        oraPrm2[1].Value = nextVal;
                        oraPrm2[2] = new OracleParameter("v_RACK_NO", OracleDbType.Varchar2);
                        oraPrm2[2].Value = a.RACK_NO;
                        oraPrm2[3] = new OracleParameter("v_FRAME_NO", OracleDbType.Varchar2);
                        oraPrm2[3].Value = a.FRAME_NO;
                        oraPrm2[4] = new OracleParameter("v_SLOT_NO", OracleDbType.Varchar2);
                        oraPrm2[4].Value = a.SLOT_NO;
                        oraPrm2[5] = new OracleParameter("v_SLOT_NIS", OracleDbType.Varchar2);
                        oraPrm2[5].Value = a.SLOT_NIS;
                        oraPrm2[6] = new OracleParameter("v_CARD_TYPE", OracleDbType.Varchar2);
                        oraPrm2[6].Value = a.CARD_TYPE;
                        oraPrm2[7] = new OracleParameter("v_CARD_MODEL", OracleDbType.Varchar2);
                        oraPrm2[7].Value = a.CARD_MODEL;
                        oraPrm2[8] = new OracleParameter("v_PORT_LO", OracleDbType.Varchar2);
                        oraPrm2[8].Value = a.PORT_LO;
                        oraPrm2[9] = new OracleParameter("v_PORT_HI", OracleDbType.Varchar2);
                        oraPrm2[9].Value = a.PORT_HI;
                        oraPrm2[10] = new OracleParameter("v_MIN_MATERIAL", OracleDbType.Varchar2);
                        oraPrm2[10].Value = a.MIN_MATERIAL;

                        tool.ExecuteStored(connString, sqlStr2, CommandType.StoredProcedure, oraPrm2, false);
                        i++;
                    }
                }

                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        [WebMethod]
        public bool DeleteDetailsTemp(int id)
        {
            Tools tool = new Tools();
            bool success = true;

            try
            {
                string sqlStr = "delete from AG_MSAN_TEMPLATE where id = '" + id + "'";

                using (Entities ctxData = new Entities())
                {
                    success = tool.ExecuteSql(ctxData, sqlStr);
                }
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        //////////// NETWORK ELEMENT ////////////

        public class LoadPath
        {
            public string PATHNAME;
            public string ANAME;
            public string ATYPE;
            public string ASITE;
            public string ZNAME;
            public string ZTYPE;
            public string ZSITE;
            public string PATHTYPE;
            public string PATHBANDWIDTH;
            public string PATHSTATUS;
            public string ASLOT;
            public string ACARD;
            public string APORT;
            public string ZSLOT;
            public string ZCARD;
            public string ZPORT;
            public string JOBID;
            public string PRIMARY;
            public string NISBEARERID;
            public string NISMEDIAPATHID; 
            public string IPDSLAMNODENAME;
            public string UPLINKPORT;
            public string IPDSLAMDOWNLINKPORT;
            public string MSENODENAME;
            public string MSEDOWNLINKPORT;
            public string ACARDNAME;
            public string ZCARDNAME;
            public int FDC_FID;
        }

        [WebMethod]
        public bool AddLoadPath(LoadPath cs)
        {
            Tools tool = new Tools();
            bool success = true;
            string[] port = cs.ZPORT.Split('!');
            string a = port[0];
            string z = port[1];
            string[] portA = a.Split(':');
            string[] portZ = z.Split('/');

            string checkSlot1 = cs.ASLOT.Split('_').Last();
            string[] slot1 = checkSlot1.Split('_');
            int test = slot1.Length;
            string sdata = slot1[0];
            string ASLOT = "";
            string ACARD = "";
            if (sdata.Contains('/'))
            {
                string[] card = sdata.Split('/');
                ASLOT = card[0];
                ACARD = card[1];

                if ((cs.ANAME.StartsWith("EPEHW") || cs.ANAME.StartsWith("NPEHW")) && ASLOT.Length == 1)
                {
                    System.Diagnostics.Debug.WriteLine("ASlot :" + ASLOT);
                    ASLOT = "0" + ASLOT;
                }
            }
            else 
            {
                ACARD = sdata; 
            }

            string checkSlot2 = cs.ZSLOT.Split('_').Last();
            string[] slot2 = checkSlot2.Split('_');
            string Zdata = slot2[0];
            string ZSLOT = "";
            string ZCARD = "";
            if (Zdata.Contains('/'))
            {
                string[] card = Zdata.Split('/');
                ZSLOT = card[0];
                ZCARD = card[1];

                if ((cs.ZNAME.StartsWith("EPEHW") || cs.ZNAME.StartsWith("NPEHW")) && ZSLOT.Length == 1)
                {
                    System.Diagnostics.Debug.WriteLine("ZSlot :" + ZSLOT);
                    ZSLOT = "0" + ZSLOT;
                }
            }
            else
            {
                ZCARD = Zdata;
            }


            //string[] cardA = cs.ACARDNAME.Split('-');
            string cA = cs.ACARDNAME;
            //string[] cardZ = cs.ZCARDNAME.Split('-');
            string cZ = cs.ZCARDNAME;

            try
            {

                string sqlStr = "insert into WV_LOAD_PATH(PATHNAME, ANAME, ATYPE, ASITE, ZNAME, ZTYPE, ZSITE, PATHTYPE, PATHBANDWIDTH, PATHSTATUS, APORT, ZPORT, JOBID, ASLOT, ACARD, ZSLOT, ZCARD, PRIMARYSECONDARY,";
                sqlStr += "NISBEARERID, NISMEDIAPATHID, IPDSLAMNODENAME, UPLINKPORT, IPDSLAMDOWNLINKPORT, MSENODENAME, MSEDOWNLINKPORT, ACARDNAME, ZCARDNAME) values ";
                
                OracleParameter[] oraPrm = new OracleParameter[27];

                if (portA.Length < portZ.Length)//port a sedikit
                {
                    for (int ii = 0; ii < portA.Length; ii++)
                    {
                        oraPrm[0] = new OracleParameter("v_PATHNAME", OracleDbType.Varchar2);
                        oraPrm[0].Value = cs.PATHNAME;
                        oraPrm[1] = new OracleParameter("v_ANAME", OracleDbType.Varchar2);
                        oraPrm[1].Value = cs.ANAME;
                        oraPrm[2] = new OracleParameter("v_ATYPE", OracleDbType.Varchar2);
                        oraPrm[2].Value = cs.ATYPE;
                        oraPrm[3] = new OracleParameter("v_ASITE", OracleDbType.Varchar2);
                        oraPrm[3].Value = cs.ASITE;
                        oraPrm[4] = new OracleParameter("v_ZNAME", OracleDbType.Varchar2);
                        oraPrm[4].Value = cs.ZNAME;
                        oraPrm[5] = new OracleParameter("v_ZTYPE", OracleDbType.Varchar2);
                        oraPrm[5].Value = cs.ZTYPE;
                        oraPrm[6] = new OracleParameter("v_ZSITE", OracleDbType.Varchar2);
                        oraPrm[6].Value = cs.ZSITE;
                        oraPrm[7] = new OracleParameter("v_PATHTYPE", OracleDbType.Varchar2);
                        oraPrm[7].Value = cs.PATHTYPE;
                        oraPrm[8] = new OracleParameter("v_PATHBANDWIDTH", OracleDbType.Varchar2);
                        oraPrm[8].Value = cs.PATHBANDWIDTH;
                        oraPrm[9] = new OracleParameter("v_PATHSTATUS", OracleDbType.Varchar2);
                        oraPrm[9].Value = cs.PATHSTATUS;
                        oraPrm[10] = new OracleParameter("v_APORT", OracleDbType.Varchar2);
                        oraPrm[10].Value = portA[ii];
                        oraPrm[11] = new OracleParameter("v_ZPORT", OracleDbType.Varchar2);
                        oraPrm[11].Value = portZ[ii];
                        oraPrm[12] = new OracleParameter("v_JOBID", OracleDbType.Varchar2);
                        oraPrm[12].Value = cs.JOBID;
                        oraPrm[13] = new OracleParameter("v_ASLOT", OracleDbType.Varchar2);
                        oraPrm[13].Value = ASLOT;
                        oraPrm[14] = new OracleParameter("v_ACARD", OracleDbType.Varchar2);
                        oraPrm[14].Value = ACARD;
                        oraPrm[15] = new OracleParameter("v_ZSLOT", OracleDbType.Varchar2);
                        oraPrm[15].Value = ZSLOT;
                        oraPrm[16] = new OracleParameter("v_ZCARD", OracleDbType.Varchar2);
                        oraPrm[16].Value = ZCARD;
                        oraPrm[17] = new OracleParameter("v_PRIMARY", OracleDbType.Varchar2);
                        oraPrm[17].Value = cs.PRIMARY;
                        oraPrm[18] = new OracleParameter("v_NISBEARERID", OracleDbType.Varchar2);
                        oraPrm[18].Value = cs.NISBEARERID;
                        oraPrm[19] = new OracleParameter("v_NISMEDIAPATHID", OracleDbType.Varchar2);
                        oraPrm[19].Value = cs.NISMEDIAPATHID;
                        oraPrm[20] = new OracleParameter("v_IPDSLAMNODENAME", OracleDbType.Varchar2);
                        oraPrm[20].Value = cs.IPDSLAMNODENAME;
                        oraPrm[21] = new OracleParameter("v_UPLINKPORT", OracleDbType.Varchar2);
                        oraPrm[21].Value = cs.UPLINKPORT;
                        oraPrm[22] = new OracleParameter("v_IPDSLAMDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[22].Value = cs.IPDSLAMDOWNLINKPORT;
                        oraPrm[23] = new OracleParameter("v_MSENODENAME", OracleDbType.Varchar2);
                        oraPrm[23].Value = cs.MSENODENAME;
                        oraPrm[24] = new OracleParameter("v_MSEDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[24].Value = cs.MSEDOWNLINKPORT;
                        oraPrm[25] = new OracleParameter("v_ACARDNAME", OracleDbType.Varchar2);
                        oraPrm[25].Value = cA;
                        oraPrm[26] = new OracleParameter("v_ZCARDNAME", OracleDbType.Varchar2);
                        oraPrm[26].Value = cZ;

                        tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                        System.Diagnostics.Debug.WriteLine("A" + cs.ZNAME);
                    }

                }
                else if (portA.Length > portZ.Length)//port a sedikit
                {
                    for (int ii = 0; ii < portZ.Length; ii++)
                    {
                        oraPrm[0] = new OracleParameter("v_PATHNAME", OracleDbType.Varchar2);
                        oraPrm[0].Value = cs.PATHNAME;
                        oraPrm[1] = new OracleParameter("v_ANAME", OracleDbType.Varchar2);
                        oraPrm[1].Value = cs.ANAME;
                        oraPrm[2] = new OracleParameter("v_ATYPE", OracleDbType.Varchar2);
                        oraPrm[2].Value = cs.ATYPE;
                        oraPrm[3] = new OracleParameter("v_ASITE", OracleDbType.Varchar2);
                        oraPrm[3].Value = cs.ASITE;
                        oraPrm[4] = new OracleParameter("v_ZNAME", OracleDbType.Varchar2);
                        oraPrm[4].Value = cs.ZNAME;
                        oraPrm[5] = new OracleParameter("v_ZTYPE", OracleDbType.Varchar2);
                        oraPrm[5].Value = cs.ZTYPE;
                        oraPrm[6] = new OracleParameter("v_ZSITE", OracleDbType.Varchar2);
                        oraPrm[6].Value = cs.ZSITE;
                        oraPrm[7] = new OracleParameter("v_PATHTYPE", OracleDbType.Varchar2);
                        oraPrm[7].Value = cs.PATHTYPE;
                        oraPrm[8] = new OracleParameter("v_PATHBANDWIDTH", OracleDbType.Varchar2);
                        oraPrm[8].Value = cs.PATHBANDWIDTH;
                        oraPrm[9] = new OracleParameter("v_PATHSTATUS", OracleDbType.Varchar2);
                        oraPrm[9].Value = cs.PATHSTATUS;
                        oraPrm[10] = new OracleParameter("v_APORT", OracleDbType.Varchar2);
                        oraPrm[10].Value = portA[ii];
                        oraPrm[11] = new OracleParameter("v_ZPORT", OracleDbType.Varchar2);
                        oraPrm[11].Value = portZ[ii];
                        oraPrm[12] = new OracleParameter("v_JOBID", OracleDbType.Varchar2);
                        oraPrm[12].Value = cs.JOBID;
                        oraPrm[13] = new OracleParameter("v_ASLOT", OracleDbType.Varchar2);
                        oraPrm[13].Value = ASLOT;
                        oraPrm[14] = new OracleParameter("v_ACARD", OracleDbType.Varchar2);
                        oraPrm[14].Value = ACARD;
                        oraPrm[15] = new OracleParameter("v_ZSLOT", OracleDbType.Varchar2);
                        oraPrm[15].Value = ZSLOT;
                        oraPrm[16] = new OracleParameter("v_ZCARD", OracleDbType.Varchar2);
                        oraPrm[16].Value = ZCARD;
                        oraPrm[17] = new OracleParameter("v_PRIMARY", OracleDbType.Varchar2);
                        oraPrm[17].Value = cs.PRIMARY;
                        oraPrm[18] = new OracleParameter("v_NISBEARERID", OracleDbType.Varchar2);
                        oraPrm[18].Value = cs.NISBEARERID;
                        oraPrm[19] = new OracleParameter("v_NISMEDIAPATHID", OracleDbType.Varchar2);
                        oraPrm[19].Value = cs.NISMEDIAPATHID;
                        oraPrm[20] = new OracleParameter("v_IPDSLAMNODENAME", OracleDbType.Varchar2);
                        oraPrm[20].Value = cs.IPDSLAMNODENAME;
                        oraPrm[21] = new OracleParameter("v_UPLINKPORT", OracleDbType.Varchar2);
                        oraPrm[21].Value = cs.UPLINKPORT;
                        oraPrm[22] = new OracleParameter("v_IPDSLAMDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[22].Value = cs.IPDSLAMDOWNLINKPORT;
                        oraPrm[23] = new OracleParameter("v_MSENODENAME", OracleDbType.Varchar2);
                        oraPrm[23].Value = cs.MSENODENAME;
                        oraPrm[24] = new OracleParameter("v_MSEDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[24].Value = cs.MSEDOWNLINKPORT;
                        oraPrm[25] = new OracleParameter("v_ACARDNAME", OracleDbType.Varchar2);
                        oraPrm[25].Value = cA;
                        oraPrm[26] = new OracleParameter("v_ZCARDNAME", OracleDbType.Varchar2);
                        oraPrm[26].Value = cZ;

                        tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                        System.Diagnostics.Debug.WriteLine("A" + ii);
                    }
                }
                else if (portA.Length == portZ.Length) //port a sedikit
                {
                    for (int ii = 0; ii < portZ.Length; ii++)
                    {
                        oraPrm[0] = new OracleParameter("v_PATHNAME", OracleDbType.Varchar2);
                        oraPrm[0].Value = cs.PATHNAME;
                        oraPrm[1] = new OracleParameter("v_ANAME", OracleDbType.Varchar2);
                        oraPrm[1].Value = cs.ANAME;
                        oraPrm[2] = new OracleParameter("v_ATYPE", OracleDbType.Varchar2);
                        oraPrm[2].Value = cs.ATYPE;
                        oraPrm[3] = new OracleParameter("v_ASITE", OracleDbType.Varchar2);
                        oraPrm[3].Value = cs.ASITE;
                        oraPrm[4] = new OracleParameter("v_ZNAME", OracleDbType.Varchar2);
                        oraPrm[4].Value = cs.ZNAME;
                        oraPrm[5] = new OracleParameter("v_ZTYPE", OracleDbType.Varchar2);
                        oraPrm[5].Value = cs.ZTYPE;
                        oraPrm[6] = new OracleParameter("v_ZSITE", OracleDbType.Varchar2);
                        oraPrm[6].Value = cs.ZSITE;
                        oraPrm[7] = new OracleParameter("v_PATHTYPE", OracleDbType.Varchar2);
                        oraPrm[7].Value = cs.PATHTYPE;
                        oraPrm[8] = new OracleParameter("v_PATHBANDWIDTH", OracleDbType.Varchar2);
                        oraPrm[8].Value = cs.PATHBANDWIDTH;
                        oraPrm[9] = new OracleParameter("v_PATHSTATUS", OracleDbType.Varchar2);
                        oraPrm[9].Value = cs.PATHSTATUS;
                        oraPrm[10] = new OracleParameter("v_APORT", OracleDbType.Varchar2);
                        oraPrm[10].Value = portA[ii];
                        oraPrm[11] = new OracleParameter("v_ZPORT", OracleDbType.Varchar2);
                        oraPrm[11].Value = portZ[ii];
                        oraPrm[12] = new OracleParameter("v_JOBID", OracleDbType.Varchar2);
                        oraPrm[12].Value = cs.JOBID;
                        oraPrm[13] = new OracleParameter("v_ASLOT", OracleDbType.Varchar2);
                        oraPrm[13].Value = ASLOT;
                        oraPrm[14] = new OracleParameter("v_ACARD", OracleDbType.Varchar2);
                        oraPrm[14].Value = ACARD;
                        oraPrm[15] = new OracleParameter("v_ZSLOT", OracleDbType.Varchar2);
                        oraPrm[15].Value = ZSLOT;
                        oraPrm[16] = new OracleParameter("v_ZCARD", OracleDbType.Varchar2);
                        oraPrm[16].Value = ZCARD;
                        oraPrm[17] = new OracleParameter("v_PRIMARY", OracleDbType.Varchar2);
                        oraPrm[17].Value = cs.PRIMARY;
                        oraPrm[18] = new OracleParameter("v_NISBEARERID", OracleDbType.Varchar2);
                        oraPrm[18].Value = cs.NISBEARERID;
                        oraPrm[19] = new OracleParameter("v_NISMEDIAPATHID", OracleDbType.Varchar2);
                        oraPrm[19].Value = cs.NISMEDIAPATHID;
                        oraPrm[20] = new OracleParameter("v_IPDSLAMNODENAME", OracleDbType.Varchar2);
                        oraPrm[20].Value = cs.IPDSLAMNODENAME;
                        oraPrm[21] = new OracleParameter("v_UPLINKPORT", OracleDbType.Varchar2);
                        oraPrm[21].Value = cs.UPLINKPORT;
                        oraPrm[22] = new OracleParameter("v_IPDSLAMDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[22].Value = cs.IPDSLAMDOWNLINKPORT;
                        oraPrm[23] = new OracleParameter("v_MSENODENAME", OracleDbType.Varchar2);
                        oraPrm[23].Value = cs.MSENODENAME;
                        oraPrm[24] = new OracleParameter("v_MSEDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[24].Value = cs.MSEDOWNLINKPORT;
                        oraPrm[25] = new OracleParameter("v_ACARDNAME", OracleDbType.Varchar2);
                        oraPrm[25].Value = cA;
                        oraPrm[26] = new OracleParameter("v_ZCARDNAME", OracleDbType.Varchar2);
                        oraPrm[26].Value = cZ;

                        tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                        System.Diagnostics.Debug.WriteLine("Z" + ii);
                    }
                }
                using (Entities ctxData = new Entities())
                {
                    string sqlCmd = "DELETE FROM WV_LOAD_PATH WHERE APORT is null";
                    tool.ExecuteSql(ctxData, sqlCmd);
                }

                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        [WebMethod]
        public bool AddLoadFTTHPath(LoadPath cs, string A2Port)
        {
            Tools tool = new Tools();
            bool success = true;

            WebView.WebService._base myWebService;
            myWebService = new WebService._base();

            string[] aport3 = cs.ACARD.Split('-');
            string[] SZNAME = cs.ZNAME.Split('-');
            string znames = SZNAME[1];
            string[] znamess = znames.Split('_');
            string zname = znamess[0] + "_" + znamess[1];
            //System.Diagnostics.Debug.WriteLine(cs.FDC_FID);
            using (Entities ctxData = new Entities())
            {
                System.Diagnostics.Debug.WriteLine("Count :" + aport3[1]);

                string[] DPZport = cs.ZPORT.Split('-');
                string sqlStr = "insert into WV_LOAD_PATH_CONSUMER(ANAME, ATYPE, ASITE, ACARD2, APORT2, ACARD3, APORT3, ZNAME, ZTYPE, ZSITE, ZCARD, ZPORT, DPNAME, DPSITE, JOBID) values";
                if (aport3[1].StartsWith("0"))
                {
                    aport3[1] = aport3[1].Remove(0, 1);
                }
                OracleParameter[] oraPrm = new OracleParameter[15];

                oraPrm[0] = new OracleParameter("v_ANAME", OracleDbType.Varchar2);
                oraPrm[0].Value = cs.ANAME;
                oraPrm[1] = new OracleParameter("v_ATYPE", OracleDbType.Varchar2);
                oraPrm[1].Value = cs.ATYPE;
                oraPrm[2] = new OracleParameter("v_ZSITE", OracleDbType.Varchar2);
                oraPrm[2].Value = cs.ANAME;
                oraPrm[3] = new OracleParameter("v_ACARD2", OracleDbType.Varchar2); // CHANGE TO NO OF SPLITTER FROM A CARD NO
                oraPrm[3].Value = "1";
                oraPrm[4] = new OracleParameter("v_APORT2", OracleDbType.Varchar2);
                oraPrm[4].Value = A2Port; // USER MASUKKAN
                oraPrm[5] = new OracleParameter("v_ACARD3", OracleDbType.Varchar2);
                oraPrm[5].Value = aport3[1];
                oraPrm[6] = new OracleParameter("v_APORT3", OracleDbType.Varchar2);
                oraPrm[6].Value = "01IN";
                oraPrm[7] = new OracleParameter("v_ZNAME", OracleDbType.Varchar2);
                oraPrm[7].Value = zname;
                oraPrm[8] = new OracleParameter("v_ZTYPE", OracleDbType.Varchar2);
                oraPrm[8].Value = cs.ZTYPE;
                oraPrm[9] = new OracleParameter("v_ZSITE", OracleDbType.Varchar2);
                oraPrm[9].Value = cs.ZSITE;
                oraPrm[10] = new OracleParameter("v_ZCARD", OracleDbType.Varchar2);
                oraPrm[10].Value = cs.ZCARD;
                oraPrm[11] = new OracleParameter("v_ZPORT", OracleDbType.Varchar2);
                oraPrm[11].Value = DPZport[1];
                oraPrm[12] = new OracleParameter("v_DPNAME", OracleDbType.Varchar2);
                oraPrm[12].Value = cs.ANAME + "_DP" + DPZport[0];// queryParent.FDP_CODE;
                oraPrm[13] = new OracleParameter("v_DPSITE", OracleDbType.Varchar2);
                oraPrm[13].Value = cs.ANAME + "_DP" + DPZport[0];// queryParent.FDP_CODE;
                oraPrm[14] = new OracleParameter("v_JOBID", OracleDbType.Varchar2);
                oraPrm[14].Value = cs.JOBID;

                string result = tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine("result :" + result);
                success = true;

                return success;
            }
        }


        [WebMethod]
        public bool AddConnectivity(string EXC_ABB, string ELV_NAME, string A_ID, string A_TYPE, string A_SUB_TYPE, string A_PORT, string Z_ID, string Z_TYPE, string Z_SUB_TYPE, string Z_PORT, string REMARKS, string ATYPE, string ZTYPE)
        {
            Tools tool = new Tools();
            bool success = true;
            string ghost = "";
            try
            {
                string sqlStr = "insert into CONNECTIVITY(EXC_ABB, ELV_NAME, A_ID, A_TYPE, A_SUB_TYPE, A_PORT, REMARKS, CREATED_BY, Z_ID, Z_TYPE, Z_SUB_TYPE, Z_PORT) values";

                OracleParameter[] oraPrm = new OracleParameter[12];

                oraPrm[0] = new OracleParameter("v_EXC_ABB", OracleDbType.Varchar2);
                oraPrm[0].Value = EXC_ABB;
                oraPrm[1] = new OracleParameter("v_ELV_NAME", OracleDbType.Varchar2); // CHANGE TO NO OF SPLITTER FROM A CARD NO
                oraPrm[1].Value = ELV_NAME;
                oraPrm[2] = new OracleParameter("v_A_ID", OracleDbType.Varchar2);
                oraPrm[2].Value = A_ID;
                oraPrm[3] = new OracleParameter("v_A_TYPE", OracleDbType.Varchar2);
                oraPrm[3].Value = A_TYPE;
                if (ATYPE == "1")
                {
                    oraPrm[4] = new OracleParameter("v_A_SUB_TYPE", OracleDbType.Varchar2);
                    oraPrm[4].Value = A_SUB_TYPE;
                    oraPrm[5] = new OracleParameter("v_A_PORT", OracleDbType.Varchar2);
                    oraPrm[5].Value = A_PORT;
                }
                else
                {
                    oraPrm[4] = new OracleParameter("v_A_SUB_TYPE", OracleDbType.Varchar2);
                    oraPrm[4].Value = ghost;
                    oraPrm[5] = new OracleParameter("v_A_PORT", OracleDbType.Varchar2);
                    oraPrm[5].Value = A_SUB_TYPE;
                }
                oraPrm[6] = new OracleParameter("v_REMARKS", OracleDbType.Varchar2);
                oraPrm[6].Value = REMARKS;
                oraPrm[7] = new OracleParameter("v_CREATED_BY", OracleDbType.Varchar2);
                oraPrm[7].Value = User.Identity.Name.ToUpper();
                oraPrm[8] = new OracleParameter("v_Z_ID", OracleDbType.Varchar2);
                oraPrm[8].Value = Z_ID;
                oraPrm[9] = new OracleParameter("v_Z_TYPE", OracleDbType.Varchar2);
                oraPrm[9].Value = Z_TYPE;
                if (ZTYPE == "1")
                {
                    oraPrm[10] = new OracleParameter("v_Z_SUB_TYPE", OracleDbType.Varchar2);
                    oraPrm[10].Value = Z_SUB_TYPE;
                    oraPrm[11] = new OracleParameter("v_Z_PORT", OracleDbType.Varchar2);
                    oraPrm[11].Value = Z_PORT;
                }
                else
                {
                    oraPrm[10] = new OracleParameter("v_Z_SUB_TYPE", OracleDbType.Varchar2);
                    oraPrm[10].Value = ghost;
                    oraPrm[11] = new OracleParameter("v_Z_PORT", OracleDbType.Varchar2);
                    oraPrm[11].Value = Z_SUB_TYPE;
                }

                string result = tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine("result :" + result);
                success = true;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                success = false;
            }
            return success;
        }

        [WebMethod]
        public bool UpdateLoadPath(LoadPath cs, string LoadID)
        {
            Tools tool = new Tools();
            bool success = true;
            string[] port = cs.ZPORT.Split('!');
            string a = port[0];
            string z = port[1];
            string[] portA = a.Split(':');
            string[] portZ = z.Split('/');

            string checkSlot1 = cs.ASLOT.Split('_').Last();
            string[] slot1 = checkSlot1.Split('_');
            int test = slot1.Length;
            string sdata = slot1[0];
            string ASLOT = "";
            string ACARD = "";
            if (sdata.Contains('/'))
            {
                string[] card = sdata.Split('/');
                ASLOT = card[0];
                ACARD = card[1];

                if ((cs.ANAME.StartsWith("EPEHW") || cs.ANAME.StartsWith("NPEHW")) && ASLOT.Length == 1)
                {
                    System.Diagnostics.Debug.WriteLine("ASlot :" + ASLOT);
                    ASLOT = "0" + ASLOT;
                }
            }
            else
            {
                ACARD = sdata;
            }

            string checkSlot2 = cs.ZSLOT.Split('_').Last();
            string[] slot2 = checkSlot2.Split('_');
            string Zdata = slot2[0];
            string ZSLOT = "";
            string ZCARD = "";
            if (Zdata.Contains('/'))
            {
                string[] card = Zdata.Split('/');
                ZSLOT = card[0];
                ZCARD = card[1];

                if ((cs.ZNAME.StartsWith("EPEHW") || cs.ZNAME.StartsWith("NPEHW")) && ZSLOT.Length == 1)
                {
                    System.Diagnostics.Debug.WriteLine("ZSlot :" + ZSLOT);
                    ZSLOT = "0" + ZSLOT;
                }
            }
            else
            {
                ZCARD = Zdata;
            }


            //string[] cardA = cs.ACARDNAME.Split('-');
            string cA = cs.ACARDNAME;
            //string[] cardZ = cs.ZCARDNAME.Split('-');
            string cZ = cs.ZCARDNAME;

            try
            {

                string sqlStr = "insert into WV_LOAD_PATH(PATHNAME, ANAME, ATYPE, ASITE, ZNAME, ZTYPE, ZSITE, PATHTYPE, PATHBANDWIDTH, PATHSTATUS, APORT, ZPORT, JOBID, ASLOT, ACARD, ZSLOT, ZCARD, PRIMARYSECONDARY,";
                sqlStr += "NISBEARERID, NISMEDIAPATHID, IPDSLAMNODENAME, UPLINKPORT, IPDSLAMDOWNLINKPORT, MSENODENAME, MSEDOWNLINKPORT, ACARDNAME, ZCARDNAME) values ";

                OracleParameter[] oraPrm = new OracleParameter[27];

                if (portA.Length < portZ.Length)//port a sedikit
                {
                    for (int ii = 0; ii < portA.Length; ii++)
                    {
                        oraPrm[0] = new OracleParameter("v_PATHNAME", OracleDbType.Varchar2);
                        oraPrm[0].Value = cs.PATHNAME;
                        oraPrm[1] = new OracleParameter("v_ANAME", OracleDbType.Varchar2);
                        oraPrm[1].Value = cs.ANAME;
                        oraPrm[2] = new OracleParameter("v_ATYPE", OracleDbType.Varchar2);
                        oraPrm[2].Value = cs.ATYPE;
                        oraPrm[3] = new OracleParameter("v_ASITE", OracleDbType.Varchar2);
                        oraPrm[3].Value = cs.ASITE;
                        oraPrm[4] = new OracleParameter("v_ZNAME", OracleDbType.Varchar2);
                        oraPrm[4].Value = cs.ZNAME;
                        oraPrm[5] = new OracleParameter("v_ZTYPE", OracleDbType.Varchar2);
                        oraPrm[5].Value = cs.ZTYPE;
                        oraPrm[6] = new OracleParameter("v_ZSITE", OracleDbType.Varchar2);
                        oraPrm[6].Value = cs.ZSITE;
                        oraPrm[7] = new OracleParameter("v_PATHTYPE", OracleDbType.Varchar2);
                        oraPrm[7].Value = cs.PATHTYPE;
                        oraPrm[8] = new OracleParameter("v_PATHBANDWIDTH", OracleDbType.Varchar2);
                        oraPrm[8].Value = cs.PATHBANDWIDTH;
                        oraPrm[9] = new OracleParameter("v_PATHSTATUS", OracleDbType.Varchar2);
                        oraPrm[9].Value = cs.PATHSTATUS;
                        oraPrm[10] = new OracleParameter("v_APORT", OracleDbType.Varchar2);
                        oraPrm[10].Value = portA[ii];
                        oraPrm[11] = new OracleParameter("v_ZPORT", OracleDbType.Varchar2);
                        oraPrm[11].Value = portZ[ii];
                        oraPrm[12] = new OracleParameter("v_JOBID", OracleDbType.Varchar2);
                        oraPrm[12].Value = cs.JOBID;
                        oraPrm[13] = new OracleParameter("v_ASLOT", OracleDbType.Varchar2);
                        oraPrm[13].Value = ASLOT;
                        oraPrm[14] = new OracleParameter("v_ACARD", OracleDbType.Varchar2);
                        oraPrm[14].Value = ACARD;
                        oraPrm[15] = new OracleParameter("v_ZSLOT", OracleDbType.Varchar2);
                        oraPrm[15].Value = ZSLOT;
                        oraPrm[16] = new OracleParameter("v_ZCARD", OracleDbType.Varchar2);
                        oraPrm[16].Value = ZCARD;
                        oraPrm[17] = new OracleParameter("v_PRIMARY", OracleDbType.Varchar2);
                        oraPrm[17].Value = cs.PRIMARY;
                        oraPrm[18] = new OracleParameter("v_NISBEARERID", OracleDbType.Varchar2);
                        oraPrm[18].Value = cs.NISBEARERID;
                        oraPrm[19] = new OracleParameter("v_NISMEDIAPATHID", OracleDbType.Varchar2);
                        oraPrm[19].Value = cs.NISMEDIAPATHID;
                        oraPrm[20] = new OracleParameter("v_IPDSLAMNODENAME", OracleDbType.Varchar2);
                        oraPrm[20].Value = cs.IPDSLAMNODENAME;
                        oraPrm[21] = new OracleParameter("v_UPLINKPORT", OracleDbType.Varchar2);
                        oraPrm[21].Value = cs.UPLINKPORT;
                        oraPrm[22] = new OracleParameter("v_IPDSLAMDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[22].Value = cs.IPDSLAMDOWNLINKPORT;
                        oraPrm[23] = new OracleParameter("v_MSENODENAME", OracleDbType.Varchar2);
                        oraPrm[23].Value = cs.MSENODENAME;
                        oraPrm[24] = new OracleParameter("v_MSEDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[24].Value = cs.MSEDOWNLINKPORT;
                        oraPrm[25] = new OracleParameter("v_ACARDNAME", OracleDbType.Varchar2);
                        oraPrm[25].Value = cA;
                        oraPrm[26] = new OracleParameter("v_ZCARDNAME", OracleDbType.Varchar2);
                        oraPrm[26].Value = cZ;

                        tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                        System.Diagnostics.Debug.WriteLine("A" + cs.ZNAME);
                    }

                }
                else if (portA.Length > portZ.Length)//port a sedikit
                {
                    for (int ii = 0; ii < portZ.Length; ii++)
                    {
                        oraPrm[0] = new OracleParameter("v_PATHNAME", OracleDbType.Varchar2);
                        oraPrm[0].Value = cs.PATHNAME;
                        oraPrm[1] = new OracleParameter("v_ANAME", OracleDbType.Varchar2);
                        oraPrm[1].Value = cs.ANAME;
                        oraPrm[2] = new OracleParameter("v_ATYPE", OracleDbType.Varchar2);
                        oraPrm[2].Value = cs.ATYPE;
                        oraPrm[3] = new OracleParameter("v_ASITE", OracleDbType.Varchar2);
                        oraPrm[3].Value = cs.ASITE;
                        oraPrm[4] = new OracleParameter("v_ZNAME", OracleDbType.Varchar2);
                        oraPrm[4].Value = cs.ZNAME;
                        oraPrm[5] = new OracleParameter("v_ZTYPE", OracleDbType.Varchar2);
                        oraPrm[5].Value = cs.ZTYPE;
                        oraPrm[6] = new OracleParameter("v_ZSITE", OracleDbType.Varchar2);
                        oraPrm[6].Value = cs.ZSITE;
                        oraPrm[7] = new OracleParameter("v_PATHTYPE", OracleDbType.Varchar2);
                        oraPrm[7].Value = cs.PATHTYPE;
                        oraPrm[8] = new OracleParameter("v_PATHBANDWIDTH", OracleDbType.Varchar2);
                        oraPrm[8].Value = cs.PATHBANDWIDTH;
                        oraPrm[9] = new OracleParameter("v_PATHSTATUS", OracleDbType.Varchar2);
                        oraPrm[9].Value = cs.PATHSTATUS;
                        oraPrm[10] = new OracleParameter("v_APORT", OracleDbType.Varchar2);
                        oraPrm[10].Value = portA[ii];
                        oraPrm[11] = new OracleParameter("v_ZPORT", OracleDbType.Varchar2);
                        oraPrm[11].Value = portZ[ii];
                        oraPrm[12] = new OracleParameter("v_JOBID", OracleDbType.Varchar2);
                        oraPrm[12].Value = cs.JOBID;
                        oraPrm[13] = new OracleParameter("v_ASLOT", OracleDbType.Varchar2);
                        oraPrm[13].Value = ASLOT;
                        oraPrm[14] = new OracleParameter("v_ACARD", OracleDbType.Varchar2);
                        oraPrm[14].Value = ACARD;
                        oraPrm[15] = new OracleParameter("v_ZSLOT", OracleDbType.Varchar2);
                        oraPrm[15].Value = ZSLOT;
                        oraPrm[16] = new OracleParameter("v_ZCARD", OracleDbType.Varchar2);
                        oraPrm[16].Value = ZCARD;
                        oraPrm[17] = new OracleParameter("v_PRIMARY", OracleDbType.Varchar2);
                        oraPrm[17].Value = cs.PRIMARY;
                        oraPrm[18] = new OracleParameter("v_NISBEARERID", OracleDbType.Varchar2);
                        oraPrm[18].Value = cs.NISBEARERID;
                        oraPrm[19] = new OracleParameter("v_NISMEDIAPATHID", OracleDbType.Varchar2);
                        oraPrm[19].Value = cs.NISMEDIAPATHID;
                        oraPrm[20] = new OracleParameter("v_IPDSLAMNODENAME", OracleDbType.Varchar2);
                        oraPrm[20].Value = cs.IPDSLAMNODENAME;
                        oraPrm[21] = new OracleParameter("v_UPLINKPORT", OracleDbType.Varchar2);
                        oraPrm[21].Value = cs.UPLINKPORT;
                        oraPrm[22] = new OracleParameter("v_IPDSLAMDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[22].Value = cs.IPDSLAMDOWNLINKPORT;
                        oraPrm[23] = new OracleParameter("v_MSENODENAME", OracleDbType.Varchar2);
                        oraPrm[23].Value = cs.MSENODENAME;
                        oraPrm[24] = new OracleParameter("v_MSEDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[24].Value = cs.MSEDOWNLINKPORT;
                        oraPrm[25] = new OracleParameter("v_ACARDNAME", OracleDbType.Varchar2);
                        oraPrm[25].Value = cA;
                        oraPrm[26] = new OracleParameter("v_ZCARDNAME", OracleDbType.Varchar2);
                        oraPrm[26].Value = cZ;

                        tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                        System.Diagnostics.Debug.WriteLine("A" + ii);
                    }
                }
                else if (portA.Length == portZ.Length) //port a sedikit
                {
                    for (int ii = 0; ii < portZ.Length; ii++)
                    {
                        oraPrm[0] = new OracleParameter("v_PATHNAME", OracleDbType.Varchar2);
                        oraPrm[0].Value = cs.PATHNAME;
                        oraPrm[1] = new OracleParameter("v_ANAME", OracleDbType.Varchar2);
                        oraPrm[1].Value = cs.ANAME;
                        oraPrm[2] = new OracleParameter("v_ATYPE", OracleDbType.Varchar2);
                        oraPrm[2].Value = cs.ATYPE;
                        oraPrm[3] = new OracleParameter("v_ASITE", OracleDbType.Varchar2);
                        oraPrm[3].Value = cs.ASITE;
                        oraPrm[4] = new OracleParameter("v_ZNAME", OracleDbType.Varchar2);
                        oraPrm[4].Value = cs.ZNAME;
                        oraPrm[5] = new OracleParameter("v_ZTYPE", OracleDbType.Varchar2);
                        oraPrm[5].Value = cs.ZTYPE;
                        oraPrm[6] = new OracleParameter("v_ZSITE", OracleDbType.Varchar2);
                        oraPrm[6].Value = cs.ZSITE;
                        oraPrm[7] = new OracleParameter("v_PATHTYPE", OracleDbType.Varchar2);
                        oraPrm[7].Value = cs.PATHTYPE;
                        oraPrm[8] = new OracleParameter("v_PATHBANDWIDTH", OracleDbType.Varchar2);
                        oraPrm[8].Value = cs.PATHBANDWIDTH;
                        oraPrm[9] = new OracleParameter("v_PATHSTATUS", OracleDbType.Varchar2);
                        oraPrm[9].Value = cs.PATHSTATUS;
                        oraPrm[10] = new OracleParameter("v_APORT", OracleDbType.Varchar2);
                        oraPrm[10].Value = portA[ii];
                        oraPrm[11] = new OracleParameter("v_ZPORT", OracleDbType.Varchar2);
                        oraPrm[11].Value = portZ[ii];
                        oraPrm[12] = new OracleParameter("v_JOBID", OracleDbType.Varchar2);
                        oraPrm[12].Value = cs.JOBID;
                        oraPrm[13] = new OracleParameter("v_ASLOT", OracleDbType.Varchar2);
                        oraPrm[13].Value = ASLOT;
                        oraPrm[14] = new OracleParameter("v_ACARD", OracleDbType.Varchar2);
                        oraPrm[14].Value = ACARD;
                        oraPrm[15] = new OracleParameter("v_ZSLOT", OracleDbType.Varchar2);
                        oraPrm[15].Value = ZSLOT;
                        oraPrm[16] = new OracleParameter("v_ZCARD", OracleDbType.Varchar2);
                        oraPrm[16].Value = ZCARD;
                        oraPrm[17] = new OracleParameter("v_PRIMARY", OracleDbType.Varchar2);
                        oraPrm[17].Value = cs.PRIMARY;
                        oraPrm[18] = new OracleParameter("v_NISBEARERID", OracleDbType.Varchar2);
                        oraPrm[18].Value = cs.NISBEARERID;
                        oraPrm[19] = new OracleParameter("v_NISMEDIAPATHID", OracleDbType.Varchar2);
                        oraPrm[19].Value = cs.NISMEDIAPATHID;
                        oraPrm[20] = new OracleParameter("v_IPDSLAMNODENAME", OracleDbType.Varchar2);
                        oraPrm[20].Value = cs.IPDSLAMNODENAME;
                        oraPrm[21] = new OracleParameter("v_UPLINKPORT", OracleDbType.Varchar2);
                        oraPrm[21].Value = cs.UPLINKPORT;
                        oraPrm[22] = new OracleParameter("v_IPDSLAMDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[22].Value = cs.IPDSLAMDOWNLINKPORT;
                        oraPrm[23] = new OracleParameter("v_MSENODENAME", OracleDbType.Varchar2);
                        oraPrm[23].Value = cs.MSENODENAME;
                        oraPrm[24] = new OracleParameter("v_MSEDOWNLINKPORT", OracleDbType.Varchar2);
                        oraPrm[24].Value = cs.MSEDOWNLINKPORT;
                        oraPrm[25] = new OracleParameter("v_ACARDNAME", OracleDbType.Varchar2);
                        oraPrm[25].Value = cA;
                        oraPrm[26] = new OracleParameter("v_ZCARDNAME", OracleDbType.Varchar2);
                        oraPrm[26].Value = cZ;

                        tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                        System.Diagnostics.Debug.WriteLine("Z" + ii);
                    }
                }
                using (Entities ctxData = new Entities())
                {
                    string sqlCmd = "DELETE FROM WV_LOAD_PATH WHERE APORT is null";
                    string sqlCmd2 = "DELETE FROM WV_LOAD_PATH WHERE ID = " + LoadID;
                    tool.ExecuteSql(ctxData, sqlCmd);
                    tool.ExecuteSql(ctxData, sqlCmd2);
                }

                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        [WebMethod]
        public bool DeleteLoadPath(string LoadID)
        {
            Tools tool = new Tools();
            bool success = true;
            try
            {
                using (Entities ctxData = new Entities())
                {
                    string sqlCmd = "DELETE FROM WV_LOAD_PATH WHERE ID = " + LoadID;
                    tool.ExecuteSql(ctxData, sqlCmd);
                }

                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        [WebMethod]
        public bool DeleteLoadPathFTTH(string LoadID)
        {
            Tools tool = new Tools();
            bool success = true;
            try
            {
                using (Entities ctxData = new Entities())
                {
                    string sqlCmd = "DELETE FROM WV_LOAD_PATH_CONSUMER WHERE ID = " + LoadID;
                    tool.ExecuteSql(ctxData, sqlCmd);
                }

                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        [WebMethod]
        public bool FindFDC(int FDPID)
        {
            Tools tool = new Tools();
            bool success = true;
            string result;
            System.Diagnostics.Debug.WriteLine("FDPID :" + FDPID);
            try
            {
                OracleParameter[] oraPrm = new OracleParameter[1];

                oraPrm[0] = new OracleParameter("FDCFID", OracleDbType.Varchar2);
                oraPrm[0].Value = FDPID.ToString();

                result = tool.ExecuteStored(connString, "GRANITE_FDC", CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine("Result :" + result);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }
        //////////// BATCH ////////////

        public class Batch
        {
            public string BATCH_ID;
            public string INSTANCE_ID;
            public string CLASS_NAME;
            public string TIME_START;
            public string TIME_END;
            public string SERVICE_NAME;
            public string TYPE;
            public string FILENAME;
            public string FILE_HAS_ERROR;
            public string EXCEPTION_MSG;
            public string STACKTRACE;
        }

        public class BiBatch
        {
            public int max;
            public List<Batch> bacthList = new List<Batch>();
        }

        [WebMethod]
        public BiBatch GetBatch(int start, int size, string file_name, string service_name, string haserror, string htype)
        {
            BiBatch osp = new BiBatch();

            if (file_name == "Select") { file_name = null; } if (service_name == "Select") { service_name = null; }
            if (haserror == "false") { haserror = null; } if (htype == "Select") { htype = null; }
            
            using (EntitiesNetworkElement ctxData = new EntitiesNetworkElement())
            {
                if (file_name != null && service_name == null && haserror == null && htype == null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.INSTANCE_ID == file_name
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.INSTANCE_ID == file_name
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name == null && service_name != null && haserror == null && htype == null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.SERVICE_NAME == service_name
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.SERVICE_NAME == service_name
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name == null && service_name == null && haserror != null && htype == null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.FILE_HAS_ERROR == 1
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.FILE_HAS_ERROR == 1
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name == null && service_name == null && haserror == null && htype != null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.TYPE == htype
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.TYPE == htype
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name != null && service_name != null && haserror == null && htype == null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.INSTANCE_ID == file_name && c.SERVICE_NAME == service_name
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.INSTANCE_ID == file_name && d.SERVICE_NAME == service_name
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name != null && service_name == null && haserror != null && htype == null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.INSTANCE_ID == file_name && c.FILE_HAS_ERROR == 1
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.INSTANCE_ID == file_name && d.FILE_HAS_ERROR == 1
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name != null && service_name == null && haserror == null && htype != null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.INSTANCE_ID == file_name && c.TYPE == htype
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.INSTANCE_ID == file_name && d.TYPE == htype
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name == null && service_name != null && haserror != null && htype == null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.FILE_HAS_ERROR == 1 && c.SERVICE_NAME == service_name
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.FILE_HAS_ERROR == 1 && d.SERVICE_NAME == service_name
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name == null && service_name != null && haserror == null && htype != null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.TYPE == htype && c.SERVICE_NAME == service_name
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.TYPE == htype && d.SERVICE_NAME == service_name
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name == null && service_name == null && haserror != null && htype != null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.TYPE == htype && c.FILE_HAS_ERROR == 1
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.TYPE == htype && d.FILE_HAS_ERROR == 1
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name != null && service_name != null && haserror != null && htype == null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.INSTANCE_ID == file_name && c.SERVICE_NAME == service_name && c.FILE_HAS_ERROR == 1
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.INSTANCE_ID == file_name && d.SERVICE_NAME == service_name && d.FILE_HAS_ERROR == 1
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name == null && service_name != null && haserror != null && htype != null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.SERVICE_NAME == service_name && c.FILE_HAS_ERROR == 1 && c.TYPE == htype
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.SERVICE_NAME == service_name && d.FILE_HAS_ERROR == 1 && d.TYPE == htype
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name != null && service_name != null && haserror == null && htype != null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.SERVICE_NAME == service_name && c.INSTANCE_ID == file_name && c.TYPE == htype
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.SERVICE_NAME == service_name && d.INSTANCE_ID == file_name && d.TYPE == htype
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name != null && service_name == null && haserror != null && htype != null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.FILE_HAS_ERROR == 1 && c.INSTANCE_ID == file_name && c.TYPE == htype
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.FILE_HAS_ERROR == 1 && d.INSTANCE_ID == file_name && d.TYPE == htype
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else if (file_name != null && service_name != null && haserror != null && htype != null)
                {
                    int count = (from c in ctxData.BI_BATCH
                                 where c.INSTANCE_ID == file_name && c.SERVICE_NAME == service_name && c.FILE_HAS_ERROR == 1 && c.TYPE == htype
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 where d.INSTANCE_ID == file_name && d.SERVICE_NAME == service_name && d.FILE_HAS_ERROR == 1 && d.TYPE == htype
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
                else
                {
                    int count = (from c in ctxData.BI_BATCH
                                 select c).Count();
                    osp.max = count;

                    var query = (from d in ctxData.BI_BATCH
                                 orderby d.BATCH_ID descending
                                 select new
                                 {
                                     d.BATCH_ID,
                                     d.INSTANCE_ID,
                                     d.CLASS_NAME,
                                     d.TIME_START,
                                     d.TIME_END,
                                     d.SERVICE_NAME,
                                     d.TYPE,
                                     d.FILENAME,
                                     d.FILE_HAS_ERROR,
                                     d.EXCEPTION_MSG,
                                     d.STACKTRACE
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        Batch NetworkElement = new Batch();
                        NetworkElement.BATCH_ID = a.BATCH_ID.ToString();
                        NetworkElement.INSTANCE_ID = a.INSTANCE_ID;
                        NetworkElement.CLASS_NAME = a.CLASS_NAME;
                        NetworkElement.TIME_START = a.TIME_START.ToString();
                        NetworkElement.TIME_END = a.TIME_END.ToString();
                        NetworkElement.SERVICE_NAME = a.SERVICE_NAME;
                        NetworkElement.TYPE = a.TYPE;
                        NetworkElement.FILENAME = a.FILENAME;
                        NetworkElement.FILE_HAS_ERROR = a.FILE_HAS_ERROR.ToString();
                        NetworkElement.EXCEPTION_MSG = a.EXCEPTION_MSG;
                        NetworkElement.STACKTRACE = a.STACKTRACE;

                        osp.bacthList.Add(NetworkElement);
                    }
                }
            }

            return osp;
        }

        //////////// DLL MASTER ////////////

        public class DLLMaster
        {
            public string DLL_NAME;
            public string DLL_DESCRIPTION;
            public DateTime CREATE_DATE;
        }

        public class ListDllMaster
        {
            public int max;
            public List<DLLMaster> DllMasterList = new List<DLLMaster>();
        }

        [WebMethod]
        public ListDllMaster GetDllMasterMaintenance(int start, int size, string searchKey)
        {
            ListDllMaster osp = new ListDllMaster();
            using (Entities ctxData = new Entities())
            {
                if (searchKey == null)
                {
                    int count = (from c in ctxData.WV_DLL_MASTER
                                 select c).Count();

                    osp.max = count;

                    var query = (from d in ctxData.WV_DLL_MASTER
                                 orderby d.CREATE_DATE, d.DLL_NAME
                                 select new { d.DLL_NAME, d.DLL_DESCRIPTION, d.CREATE_DATE }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        DLLMaster dataDllMaster = new DLLMaster();
                        dataDllMaster.DLL_NAME = a.DLL_NAME;
                        dataDllMaster.DLL_DESCRIPTION = a.DLL_DESCRIPTION;
                        //dataDllMaster.CREATE_DATE = a.CREATE_DATE;
                        osp.DllMasterList.Add(dataDllMaster);
                    }
                }
                else
                {
                    int count = (from c in ctxData.WV_DLL_MASTER
                                 select c).Count();

                    osp.max = count;

                    var query = (from d in ctxData.WV_DLL_MASTER
                                 where d.DLL_NAME.ToUpper().Contains(searchKey.ToUpper()) || d.DLL_NAME.ToLower().Contains(searchKey.ToLower())
                                 orderby d.CREATE_DATE, d.DLL_NAME
                                 select new { d.DLL_NAME, d.DLL_DESCRIPTION, d.CREATE_DATE }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        DLLMaster dataDllMaster = new DLLMaster();
                        dataDllMaster.DLL_NAME = a.DLL_NAME;
                        dataDllMaster.DLL_DESCRIPTION = a.DLL_DESCRIPTION;
                        //dataDllMaster.CREATE_DATE = a.CREATE_DATE;
                        osp.DllMasterList.Add(dataDllMaster);
                    }
                }

            }

            return osp;
        }

        public bool AddDllMaster(DLLMaster DLLMaster)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_DLL_MASTER(DLL_NAME, DLL_DESCRIPTION, CREATE_DATE ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[3];

                oraPrm[0] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = DLLMaster.DLL_NAME;
                oraPrm[1] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                oraPrm[1].Value = DLLMaster.DLL_DESCRIPTION;
                oraPrm[2] = new OracleParameter("v_MAT_ID", OracleDbType.Date);
                oraPrm[2].Value = DLLMaster.CREATE_DATE;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);

                string sqlCmd = "";

                sqlCmd = "insert into WV_DLL_VERSION(DLL_MASTER, DLL_NAME, DLL_DESCRIPTION, DLL_VERSION, CREATE_DATE ";
                sqlCmd += ") values ";

                OracleParameter[] oraPrm2 = new OracleParameter[5];

                oraPrm2[0] = new OracleParameter("v_DLL_MASTER", OracleDbType.Varchar2);
                oraPrm2[0].Value = DLLMaster.DLL_NAME;
                oraPrm2[1] = new OracleParameter("v_DLL_NAME", OracleDbType.Varchar2);
                oraPrm2[1].Value = DLLMaster.DLL_NAME + "_0";
                oraPrm2[2] = new OracleParameter("v_DLL_DESCRIPTION", OracleDbType.Varchar2);
                oraPrm2[2].Value = DLLMaster.DLL_DESCRIPTION;
                oraPrm2[3] = new OracleParameter("v_DLL_VERSION", OracleDbType.Varchar2);
                oraPrm2[3].Value = 0;
                oraPrm2[4] = new OracleParameter("v_CREATE_DATE", OracleDbType.Date);
                oraPrm2[4].Value = DLLMaster.CREATE_DATE;

                tool.ExecuteStored(connString, sqlCmd, CommandType.StoredProcedure, oraPrm2, false);

                System.Diagnostics.Debug.WriteLine("RESULT :" + success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        public bool UpdateDllMaster(DLLMaster DllM)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_DLL_MASTER SET DLL_DESCRIPTION = '" + DllM.DLL_DESCRIPTION +
                "' WHERE DLL_NAME ='" + DllM.DLL_NAME + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool Delete_DllMaster(string DLL_Master)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            string sqlCmd2 = "";

            sqlCmd = "DELETE FROM WV_DLL_MASTER WHERE DLL_NAME ='" + DLL_Master + "'";
            sqlCmd2 = "DELETE FROM WV_DLL_VERSION WHERE DLL_MASTER ='" + DLL_Master + "'";
            System.Diagnostics.Debug.WriteLine("RESULT :" + DLL_Master);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
                success = tool.ExecuteSql(ctxData, sqlCmd2);
            }

            return success;
        }

        //////////// DLL Version ////////////

        public class DLLVersion
        {
            public string DLL_MASTER;
            public string DLL_NAME;
            public string DLL_DESCRIPTION;
            public string DLL_VERSION;
            public DateTime CREATE_DATE;
        }

        public class ListDllVersion
        {
            public int max;
            public List<DLLVersion> DllVersionList = new List<DLLVersion>();
        }

        [WebMethod]
        public string GetDllVersionMaintenance(string searchKey)
        {
            //ListDllVersion osp = new ListDllVersion();
            string output = "";
            using (Entities ctxData = new Entities())
            {
                    var query = (from d in ctxData.WV_DLL_VERSION
                                 where d.DLL_MASTER == searchKey
                                 orderby d.DLL_MASTER, d.DLL_VERSION
                                 select new { d.DLL_MASTER, d.DLL_NAME, d.DLL_DESCRIPTION, d.DLL_VERSION, d.CREATE_DATE });

                    
                foreach (var lp in query)
                    {
                        output += lp.DLL_MASTER + "|" + lp.DLL_NAME + "|" + lp.DLL_VERSION + "|" + lp.DLL_DESCRIPTION + "|" + lp.CREATE_DATE;
                        output += "!";
                    }
            }

            return output;
        }

        public bool AddDllVersion(DLLVersion DLLMaster)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_DLL_VERSION(DLL_MASTER, DLL_NAME, DLL_DESCRIPTION, DLL_VERSION, CREATE_DATE ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[5];

                oraPrm[0] = new OracleParameter("DLL_MASTER", OracleDbType.Varchar2);
                oraPrm[0].Value = DLLMaster.DLL_MASTER;
                oraPrm[1] = new OracleParameter("DLL_NAME", OracleDbType.Varchar2);
                oraPrm[1].Value = DLLMaster.DLL_NAME;
                oraPrm[2] = new OracleParameter("DLL_DESCRIPTION", OracleDbType.Varchar2);
                oraPrm[2].Value = DLLMaster.DLL_DESCRIPTION;
                oraPrm[3] = new OracleParameter("DLL_VERSION", OracleDbType.Varchar2);
                oraPrm[3].Value = DLLMaster.DLL_VERSION;
                oraPrm[4] = new OracleParameter("CREATE_DATE", OracleDbType.Date);
                oraPrm[4].Value = DLLMaster.CREATE_DATE;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine("RESULT :" + success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        public bool UpdateDllVersion(DLLVersion DllM)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_DLL_VERSION SET DLL_DESCRIPTION = '" + DllM.DLL_DESCRIPTION +
                "', DLL_VERSION = '" + DllM.DLL_VERSION +
                "' WHERE DLL_MASTER = '" + DllM.DLL_MASTER + "' AND DLL_NAME ='" + DllM.DLL_NAME + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool Delete_DllVersion(string DLL_Master, string DLL_Name)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_DLL_VERSION " +
                " WHERE DLL_NAME = '" + DLL_Name + "'AND DLL_MASTER ='" + DLL_Master + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }
        //////////// AND MAINTENANCE ////////////

        public class ANDMaintenance
        {
            public string AND_ID;
            public string AND_NAME;
            public string REGION_ID;
            public string TARGET_ECP;
        }

        public class OSPANDMaintenance
        {
            public int max;
            public List<ANDMaintenance> ANDMaintenanceList = new List<ANDMaintenance>();
        }

        [WebMethod]
        public OSPANDMaintenance GetOSPANDMaintenance(int start, int size, string searchKey)
        {
            OSPANDMaintenance osp = new OSPANDMaintenance();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null)
                {
                    int count = (from c in ctxData.WV_AND_MAST
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_AND_MAST
                                 orderby d.AND_ID
                                 select new { d.AND_ID, d.AND_NAME, d.REGION_ID, d.TARGET_ECP }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        ANDMaintenance ANDMaintenance = new ANDMaintenance();
                        ANDMaintenance.AND_ID = a.AND_ID;
                        ANDMaintenance.AND_NAME = a.AND_NAME;
                        ANDMaintenance.REGION_ID = a.REGION_ID;
                        ANDMaintenance.TARGET_ECP = a.TARGET_ECP.ToString();

                        osp.ANDMaintenanceList.Add(ANDMaintenance);

                        System.Diagnostics.Debug.WriteLine(a.AND_ID + " : " + a.AND_NAME);
                    }
                }
                else
                {
                    int count = (from c in ctxData.WV_AND_MAST
                                 where c.AND_ID.Contains(searchKey) || c.AND_NAME.Contains(searchKey.ToUpper())
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_AND_MAST
                                 where d.AND_ID.Contains(searchKey) || d.AND_NAME.Contains(searchKey.ToUpper())
                                 orderby d.AND_ID
                                 select new { d.AND_ID, d.AND_NAME, d.REGION_ID, d.TARGET_ECP }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        ANDMaintenance ANDMaintenance = new ANDMaintenance();
                        ANDMaintenance.AND_ID = a.AND_ID;
                        ANDMaintenance.AND_NAME = a.AND_NAME;
                        ANDMaintenance.REGION_ID = a.REGION_ID;
                        ANDMaintenance.TARGET_ECP = a.TARGET_ECP.ToString();

                        osp.ANDMaintenanceList.Add(ANDMaintenance);

                        System.Diagnostics.Debug.WriteLine(a.AND_ID + " : " + a.AND_NAME);
                    }
                }
            }

            return osp;
        }

        public bool DeleteANDMaintenance(string CanCode)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_AND_MAST WHERE AND_ID = '" + CanCode + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool UpdateANDMaintenance(ANDMaintenance ANDMain, string CanCode)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_AND_MAST SET AND_NAME = '" + ANDMain.AND_NAME +
                "', REGION_ID = '" + ANDMain.REGION_ID +
                "', TARGET_ECP = '" + ANDMain.TARGET_ECP +
                "' WHERE AND_ID ='" + CanCode + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddANDMaintenance(ANDMaintenance newANDMain)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_AND_MAST (AND_ID, AND_NAME, REGION_ID, TARGET_ECP ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[4];
                oraPrm[0] = new OracleParameter("v_AND_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = newANDMain.AND_ID;
                oraPrm[1] = new OracleParameter("v_AND_NAME", OracleDbType.Varchar2);
                oraPrm[1].Value = newANDMain.AND_NAME;
                oraPrm[2] = new OracleParameter("v_REGION_ID", OracleDbType.Varchar2);
                oraPrm[2].Value = newANDMain.REGION_ID;
                oraPrm[3] = new OracleParameter("v_TARGET_ECP", OracleDbType.Varchar2);
                oraPrm[3].Value = newANDMain.TARGET_ECP;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }


        ///////// INSTALL MAINTENANCE ////////////

        public class InstallMaintenance
        {
            public string CODE_ID;
            public string INST_CODE;
            public string INST_NAME;
            public string SUP_NORM_RATE;
            public string SUP_RWO_RATE;
            public string IMPL_NORM_RATE;
            public string IMPL_RWO_RATE;
            public string INST_TYPE;
            public string RANK;
        }

        public class OSPInstMaintenance
        {
            public int max;
            public List<InstallMaintenance> InstMaintenanceList = new List<InstallMaintenance>();
        }

        [WebMethod]
        public OSPInstMaintenance GetOSPInstMaintenance(int start, int size)
        {
            OSPInstMaintenance osp = new OSPInstMaintenance();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_INSTALL_MAST
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;

                var query = (from d in ctxData.WV_INSTALL_MAST
                             orderby d.CODE_ID
                             select new { d.CODE_ID, d.INST_CODE, d.INST_NAME, d.SUP_NORM_RATE, d.SUP_RWO_RATE, d.IMPL_NORM_RATE, d.IMPL_RWO_RATE, d.INST_TYPE, d.RANK }).Skip(start).Take(size);

                foreach (var a in query)
                {
                    InstallMaintenance instMaintenance = new InstallMaintenance();

                    instMaintenance.CODE_ID = a.CODE_ID.ToString();
                    instMaintenance.INST_CODE = a.INST_CODE;
                    instMaintenance.INST_NAME = a.INST_NAME;
                    instMaintenance.SUP_NORM_RATE = a.SUP_NORM_RATE.ToString();
                    instMaintenance.SUP_RWO_RATE = a.SUP_RWO_RATE.ToString();
                    instMaintenance.IMPL_NORM_RATE = a.IMPL_NORM_RATE.ToString();
                    instMaintenance.IMPL_RWO_RATE = a.IMPL_RWO_RATE.ToString();
                    instMaintenance.INST_TYPE = a.INST_TYPE;
                    instMaintenance.RANK = a.RANK;
                    osp.InstMaintenanceList.Add(instMaintenance);

                    System.Diagnostics.Debug.WriteLine(a.INST_CODE + " : " + a.INST_NAME);
                }
            }

            return osp;
        }

        public bool DeleteInstMaintenance(string codeid)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_INSTALL_MAST WHERE CODE_ID = '" + codeid + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool UpdateInstMaintenance(InstallMaintenance instM, string codeid)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_INSTALL_MAST SET INST_CODE = '" + instM.INST_CODE +
                "', INST_NAME = '" + instM.INST_NAME +
                "', SUP_NORM_RATE = '" + instM.SUP_NORM_RATE +
                "', SUP_RWO_RATE = '" + instM.SUP_RWO_RATE +
                "', IMPL_NORM_RATE = '" + instM.IMPL_NORM_RATE +
                "', IMPL_RWO_RATE = '" + instM.IMPL_RWO_RATE +
                "', INST_TYPE = '" + instM.INST_TYPE +
                "', RANK = '" + instM.RANK +
                "' WHERE CODE_ID ='" + codeid + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddInstMaintenance(InstallMaintenance instM)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                int count;
                using (Entities ctxData = new Entities())
                {
                    count = (from c in ctxData.WV_INSTALL_MAST
                             select c).Count();
                }
                string CODE_ID = Convert.ToString(10001 + count);

                string sqlStr = "insert into WV_INSTALL_MAST (INST_CODE,INST_NAME,SUP_NORM_RATE,SUP_RWO_RATE,IMPL_NORM_RATE,IMPL_RWO_RATE,INST_TYPE,RANK,CODE_ID";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[9];

                oraPrm[0] = new OracleParameter("v_CODE", OracleDbType.Varchar2);
                oraPrm[0].Value = instM.INST_CODE;
                oraPrm[1] = new OracleParameter("v_NAME", OracleDbType.Varchar2);
                oraPrm[1].Value = instM.INST_NAME;
                oraPrm[2] = new OracleParameter("v_SUP_NORM_RATE", OracleDbType.Varchar2);
                oraPrm[2].Value = instM.SUP_NORM_RATE;
                oraPrm[3] = new OracleParameter("v_SUP_RWO_RATE", OracleDbType.Varchar2);
                oraPrm[3].Value = instM.SUP_RWO_RATE;
                oraPrm[4] = new OracleParameter("v_IMPL_NORM_RATE", OracleDbType.Varchar2);
                oraPrm[4].Value = instM.IMPL_NORM_RATE;
                oraPrm[5] = new OracleParameter("v_IMPL_RWO_RATE", OracleDbType.Varchar2);
                oraPrm[5].Value = instM.IMPL_RWO_RATE;
                oraPrm[6] = new OracleParameter("v_TYPE", OracleDbType.Varchar2);
                oraPrm[6].Value = instM.INST_TYPE;
                oraPrm[7] = new OracleParameter("v_RANK", OracleDbType.Varchar2);
                oraPrm[7].Value = instM.RANK;
                oraPrm[8] = new OracleParameter("v_CODE_ID", OracleDbType.Varchar2);
                oraPrm[8].Value = CODE_ID;


                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

        //////////// MATERIAL MASTER MAINTENANCE ////////////

        public class MaterialMasterMaintenance
        {
            public string MAT_ID;
            public string MAT_NAME;
            public string MAT_UOM;
            public string MAT_PRICE;
            public string MAT_CAT;
            public string RECORD_TYPE;
            public string TRANS_TYPE;
        }

        public class OSPMaterialMasterMaintenance
        {
            public int max;
            public List<MaterialMasterMaintenance> MatMastMaintenanceList = new List<MaterialMasterMaintenance>();
        }

        [WebMethod]
        public OSPMaterialMasterMaintenance GetOSPMaterialMasterMaintenance(int start, int size, string searchKey, string searchUOM)
        {
            OSPMaterialMasterMaintenance osp = new OSPMaterialMasterMaintenance();
            using (Entities ctxData = new Entities())
            {
                if (searchKey == null && searchUOM == null)
                {
                    int count = (from c in ctxData.WV_MAT_MAST
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine("Base 1 : " + " Search key = " + searchKey + "  search UOM = " + searchUOM );

                    osp.max = count;

                    var query = (from d in ctxData.WV_MAT_MAST
                                 orderby d.MAT_ID
                                 select new { d.MAT_ID, d.MAT_NAME, d.MAT_UOM, d.MAT_PRICE, d.MAT_CAT, d.RECORD_TYPE, d.TRANS_TYPE }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        MaterialMasterMaintenance matMastMaintenance = new MaterialMasterMaintenance();

                        matMastMaintenance.MAT_ID = a.MAT_ID;
                        matMastMaintenance.MAT_NAME = a.MAT_NAME;
                        matMastMaintenance.MAT_UOM = a.MAT_UOM;
                        matMastMaintenance.MAT_PRICE = a.MAT_PRICE.ToString();
                        matMastMaintenance.MAT_CAT = a.MAT_CAT;
                        matMastMaintenance.RECORD_TYPE = a.RECORD_TYPE;
                        matMastMaintenance.TRANS_TYPE = a.TRANS_TYPE;
                        osp.MatMastMaintenanceList.Add(matMastMaintenance);
                    }
                }
                else if (searchKey != "" && searchUOM == "Select")
                {
                    int count = (from c in ctxData.WV_MAT_MAST
                                 where c.MAT_NAME.Contains(searchKey.ToLower()) || c.MAT_NAME.Contains(searchKey.ToUpper()) 
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    System.Diagnostics.Debug.WriteLine("Base 2 : " + " Search key = " + searchKey + "  search UOM = " + searchUOM);

                    var query = (from d in ctxData.WV_MAT_MAST
                                 where  d.MAT_NAME.Contains(searchKey.ToLower()) || d.MAT_NAME.Contains(searchKey.ToUpper()) 
                                 orderby d.MAT_ID
                                 select new { d.MAT_ID, d.MAT_NAME, d.MAT_UOM, d.MAT_PRICE, d.MAT_CAT, d.RECORD_TYPE, d.TRANS_TYPE }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        MaterialMasterMaintenance matMastMaintenance = new MaterialMasterMaintenance();

                        matMastMaintenance.MAT_ID = a.MAT_ID;
                        matMastMaintenance.MAT_NAME = a.MAT_NAME;
                        matMastMaintenance.MAT_UOM = a.MAT_UOM;
                        matMastMaintenance.MAT_PRICE = a.MAT_PRICE.ToString();
                        matMastMaintenance.MAT_CAT = a.MAT_CAT;
                        matMastMaintenance.RECORD_TYPE = a.RECORD_TYPE;
                        matMastMaintenance.TRANS_TYPE = a.TRANS_TYPE;
                        osp.MatMastMaintenanceList.Add(matMastMaintenance);
                    }
                }
                else if ((searchKey == "" || searchKey == null) && searchUOM != "Select")
                {
                    int count = (from c in ctxData.WV_MAT_MAST
                                 where c.MAT_UOM == searchUOM 
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine("Base 3 : " + " Search key = " + searchKey + "  search UOM = " + searchUOM);

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_MAT_MAST
                                 where d.MAT_UOM == searchUOM 
                                 orderby d.MAT_ID
                                 select new { d.MAT_ID, d.MAT_NAME, d.MAT_UOM, d.MAT_PRICE, d.MAT_CAT, d.RECORD_TYPE, d.TRANS_TYPE }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        MaterialMasterMaintenance matMastMaintenance = new MaterialMasterMaintenance();

                        matMastMaintenance.MAT_ID = a.MAT_ID;
                        matMastMaintenance.MAT_NAME = a.MAT_NAME;
                        matMastMaintenance.MAT_UOM = a.MAT_UOM;
                        matMastMaintenance.MAT_PRICE = a.MAT_PRICE.ToString();
                        matMastMaintenance.MAT_CAT = a.MAT_CAT;
                        matMastMaintenance.RECORD_TYPE = a.RECORD_TYPE;
                        matMastMaintenance.TRANS_TYPE = a.TRANS_TYPE;
                        osp.MatMastMaintenanceList.Add(matMastMaintenance);
                    }
                }
                else
                {

                    int count = (from c in ctxData.WV_MAT_MAST
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_MAT_MAST
                                 orderby d.MAT_ID
                                 select new { d.MAT_ID, d.MAT_NAME, d.MAT_UOM, d.MAT_PRICE, d.MAT_CAT, d.RECORD_TYPE, d.TRANS_TYPE }).Skip(start).Take(size);

                    System.Diagnostics.Debug.WriteLine("Base 4 : " + " Search key = " + searchKey + "  search UOM = " + searchUOM);

                    foreach (var a in query)
                    {
                        MaterialMasterMaintenance matMastMaintenance = new MaterialMasterMaintenance();

                        matMastMaintenance.MAT_ID = a.MAT_ID;
                        matMastMaintenance.MAT_NAME = a.MAT_NAME;
                        matMastMaintenance.MAT_UOM = a.MAT_UOM;
                        matMastMaintenance.MAT_PRICE = a.MAT_PRICE.ToString();
                        matMastMaintenance.MAT_CAT = a.MAT_CAT;
                        matMastMaintenance.RECORD_TYPE = a.RECORD_TYPE;
                        matMastMaintenance.TRANS_TYPE = a.TRANS_TYPE;
                        osp.MatMastMaintenanceList.Add(matMastMaintenance);
                    }
                }
            }

            return osp;
        }

        public bool DeleteMatMastMaintenance(string matId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_MAT_MAST WHERE MAT_ID = '" + matId + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool UpdateMatMastMaintenance(MaterialMasterMaintenance MatMastM, string matId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_MAT_MAST SET MAT_NAME = '" + MatMastM.MAT_NAME +
                "', MAT_UOM = '" + MatMastM.MAT_UOM +
                "', MAT_PRICE = '" + MatMastM.MAT_PRICE +
                "', MAT_CAT = '" + MatMastM.MAT_CAT +
                "', RECORD_TYPE = '" + MatMastM.RECORD_TYPE +
                "', TRANS_TYPE = '" + MatMastM.TRANS_TYPE +
                "' WHERE MAT_ID ='" + matId + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddMatMastMaintenance(MaterialMasterMaintenance newMatMastM)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                int count;
                using (Entities ctxData = new Entities())
                {
                    count = (from c in ctxData.WV_MAT_MAST
                             select c).Count();
                }
                string MAT_ID = Convert.ToString(10001 + count);
                System.Diagnostics.Debug.WriteLine("base : " + " Mat ID [" + MAT_ID + "]  Mat Name ["+ newMatMastM.MAT_NAME + "]   Mat UOM  ["+ newMatMastM.MAT_UOM + "]   Mat Price ["+ newMatMastM.MAT_PRICE  + "] Mat Cat ["+ newMatMastM.MAT_CAT  + "]  Record Type ["+ newMatMastM.RECORD_TYPE  + "]  Tras Type ["+ newMatMastM.TRANS_TYPE  + "] " );
                string sqlStr = "insert into WV_MAT_MAST (MAT_ID, MAT_NAME, MAT_UOM, MAT_PRICE, MAT_CAT, RECORD_TYPE, TRANS_TYPE ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[7];
                oraPrm[0] = new OracleParameter("v_MAT_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = MAT_ID;
                oraPrm[1] = new OracleParameter("v_MAT_NAME", OracleDbType.Varchar2);
                oraPrm[1].Value = newMatMastM.MAT_NAME;
                oraPrm[2] = new OracleParameter("v_MAT_UOM", OracleDbType.Varchar2);
                oraPrm[2].Value = newMatMastM.MAT_UOM;
                oraPrm[3] = new OracleParameter("v_MAT_PRICE", OracleDbType.Varchar2);
                oraPrm[3].Value = newMatMastM.MAT_PRICE;
                oraPrm[4] = new OracleParameter("v_MAT_CAT", OracleDbType.Varchar2);
                oraPrm[4].Value = newMatMastM.MAT_CAT;
                oraPrm[5] = new OracleParameter("v_RECORD_TYPE", OracleDbType.Varchar2);
                oraPrm[5].Value = newMatMastM.RECORD_TYPE;
                oraPrm[6] = new OracleParameter("v_TRANS_TYPE", OracleDbType.Varchar2);
                oraPrm[6].Value = newMatMastM.TRANS_TYPE;
                string chck = "";

                chck = tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine("Check : " + success);

                if (success == true)
                {
                    return success;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

        //////////// MATERIAL CLASS MASTER ////////////

        public class MaterialClassMaintenance
        {
            public string MAT_CLASS;
            public string CLASS_NAME;
        }

        public class OSPMaterialClassMaintenance
        {
            public int max;
            public List<MaterialClassMaintenance> MatClassMaintenanceList = new List<MaterialClassMaintenance>();
        }

        [WebMethod]
        public OSPMaterialClassMaintenance GetOSPMaterialClassMaintenance(int start, int size, string searchKey)
        {
            OSPMaterialClassMaintenance osp = new OSPMaterialClassMaintenance();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null)
                {
                    int count = (from c in ctxData.WV_MAT_CLASS
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_MAT_CLASS
                                 orderby d.MAT_CLASS
                                 select new { d.MAT_CLASS, d.CLASS_NAME }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        MaterialClassMaintenance matClassMaintenance = new MaterialClassMaintenance();

                        matClassMaintenance.MAT_CLASS = a.MAT_CLASS;
                        matClassMaintenance.CLASS_NAME = a.CLASS_NAME;
                        osp.MatClassMaintenanceList.Add(matClassMaintenance);

                        System.Diagnostics.Debug.WriteLine(a.MAT_CLASS + " : " + a.CLASS_NAME);
                    }
                }
                if (searchKey != "")
                {
                    int count = (from c in ctxData.WV_MAT_CLASS
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_MAT_CLASS
                                 where d.CLASS_NAME.Contains(searchKey.ToLower()) || d.CLASS_NAME.Contains(searchKey.ToUpper()) 
                                 orderby d.MAT_CLASS
                                 select new { d.MAT_CLASS, d.CLASS_NAME }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        MaterialClassMaintenance matClassMaintenance = new MaterialClassMaintenance();

                        matClassMaintenance.MAT_CLASS = a.MAT_CLASS;
                        matClassMaintenance.CLASS_NAME = a.CLASS_NAME;
                        osp.MatClassMaintenanceList.Add(matClassMaintenance);

                        System.Diagnostics.Debug.WriteLine(a.MAT_CLASS + " : " + a.CLASS_NAME);
                    }
                } else
                {
                    int count = (from c in ctxData.WV_MAT_CLASS
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_MAT_CLASS
                                 orderby d.MAT_CLASS
                                 select new { d.MAT_CLASS, d.CLASS_NAME }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        MaterialClassMaintenance matClassMaintenance = new MaterialClassMaintenance();

                        matClassMaintenance.MAT_CLASS = a.MAT_CLASS;
                        matClassMaintenance.CLASS_NAME = a.CLASS_NAME;
                        osp.MatClassMaintenanceList.Add(matClassMaintenance);

                        System.Diagnostics.Debug.WriteLine(a.MAT_CLASS + " : " + a.CLASS_NAME);
                    }
                }
            }

            return osp;
        }

        public bool DeleteMatClassMaintenance(string MatClass)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_MAT_CLASS WHERE MAT_CLASS = '" + MatClass + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool UpdateMatClassMaintenance(MaterialClassMaintenance MatClassM, string MatClass)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_MAT_CLASS SET CLASS_NAME = '" + MatClassM.CLASS_NAME +
                "' WHERE MAT_CLASS ='" + MatClass + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddMatClassMaintenance(MaterialClassMaintenance newMatClassM)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_MAT_CLASS (MAT_CLASS, CLASS_NAME ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[2];
                oraPrm[0] = new OracleParameter("v_MAT_CLASS", OracleDbType.Varchar2);
                oraPrm[0].Value = newMatClassM.MAT_CLASS;
                oraPrm[1] = new OracleParameter("v_CLASS_NAME", OracleDbType.Varchar2);
                oraPrm[1].Value = newMatClassM.CLASS_NAME;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

        //////////// PTT MAINTENANCE ////////////

        public class PTTMaintenance
        {
            public string PTT_ID;
            public string PTT_DESC;
            public string REGION_ID;
            public string COST_CENTRE;
            public string STATE_CODE;
            public string STATE_NAME;
        }

        public class OSPPTTMaintenance
        {
            public int max;
            public List<PTTMaintenance> PTTMaintenanceList = new List<PTTMaintenance>();
        }

        [WebMethod]
        public OSPPTTMaintenance GetOSPPTTMaintenance(int start, int size, string searchKey)
        {
            OSPPTTMaintenance osp = new OSPPTTMaintenance();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null)
                {
                    int count = (from c in ctxData.WV_PTT_MAST
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_PTT_MAST
                                 join e in ctxData.WV_STATE_MAST on d.STATE_CODE equals e.STATE_ID 
                                 orderby d.PTT_ID
                                 select new { d.PTT_ID, d.PTT_DESC, d.REGION_ID, d.COST_CENTRE, d.STATE_CODE, e.STATE_NAME }).Skip(start).Take(size);

                    
                    foreach (var a in query)
                    {
                        PTTMaintenance PTTMaintenance = new PTTMaintenance();
                        PTTMaintenance.PTT_ID = a.PTT_ID;
                        PTTMaintenance.PTT_DESC = a.PTT_DESC;
                        PTTMaintenance.REGION_ID = a.REGION_ID;
                        PTTMaintenance.COST_CENTRE = a.COST_CENTRE;
                        PTTMaintenance.STATE_CODE = a.STATE_CODE;
                        PTTMaintenance.STATE_NAME = a.STATE_NAME;

                        osp.PTTMaintenanceList.Add(PTTMaintenance);

                        //System.Diagnostics.Debug.WriteLine(a.PTT_ID + " : " + a.PTT_DESC);
                    }
                }
                else
                {
                    int count = (from c in ctxData.WV_PTT_MAST
                                 join b in ctxData.WV_STATE_MAST on c.STATE_CODE equals b.STATE_ID
                                 where c.PTT_ID.Contains(searchKey) || c.PTT_DESC.Contains(searchKey.ToUpper())
                                 select new {c.PTT_ID ,c.PTT_DESC ,c.REGION_ID ,c.COST_CENTRE ,c.STATE_CODE ,b.STATE_NAME}).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_PTT_MAST
                                 join e in ctxData.WV_STATE_MAST on d.STATE_CODE equals e.STATE_ID 
                                 where d.PTT_ID.Contains(searchKey) || d.PTT_DESC.Contains(searchKey.ToUpper())
                                 orderby d.PTT_ID
                                 select new { d.PTT_ID, d.PTT_DESC, d.REGION_ID, d.COST_CENTRE, e.STATE_NAME }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PTTMaintenance PTTMaintenance = new PTTMaintenance();
                        PTTMaintenance.PTT_ID = a.PTT_ID;
                        PTTMaintenance.PTT_DESC = a.PTT_DESC;
                        PTTMaintenance.REGION_ID = a.REGION_ID;
                        PTTMaintenance.COST_CENTRE = a.COST_CENTRE;
                        PTTMaintenance.STATE_NAME = a.STATE_NAME;

                        osp.PTTMaintenanceList.Add(PTTMaintenance);

                       // System.Diagnostics.Debug.WriteLine(a.PTT_ID + " : " + a.PTT_DESC);
                    }
                }
            }

            return osp;
        }

        public bool DeletePTTMaintenance(string PTTId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_PTT_MAST WHERE PTT_ID = '" + PTTId + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool UpdatePTTMaintenance(PTTMaintenance PTTMain, string PTTId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_PTT_MAST SET PTT_DESC = '" + PTTMain.PTT_DESC +
                "', REGION_ID = '" + PTTMain.REGION_ID +
                "', COST_CENTRE = '" + PTTMain.COST_CENTRE +
                "', STATE_CODE = '" + PTTMain.STATE_CODE  +
                "' WHERE PTT_ID ='" + PTTId + "'";

           // System.Diagnostics.Debug.WriteLine("UPDATE :" + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddPTTMaintenance(PTTMaintenance newPTTMain)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();
                string checkdata;

                string sqlStr = "insert into WV_PTT_MAST (PTT_ID, PTT_DESC, REGION_ID, COST_CENTRE, STATE_CODE";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[5];
                oraPrm[0] = new OracleParameter("v_PTT_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = newPTTMain.PTT_ID;
                oraPrm[1] = new OracleParameter("v_PTT_DESC", OracleDbType.Varchar2);
                oraPrm[1].Value = newPTTMain.PTT_DESC;
                oraPrm[2] = new OracleParameter("v_REGION_ID", OracleDbType.Varchar2);
                oraPrm[2].Value = newPTTMain.REGION_ID;
                oraPrm[3] = new OracleParameter("v_COST_CENTRE", OracleDbType.Varchar2);
                oraPrm[3].Value = newPTTMain.COST_CENTRE;
                oraPrm[4] = new OracleParameter("v_STATE_CODE", OracleDbType.Varchar2);
                oraPrm[4].Value = newPTTMain.STATE_CODE;
                //System.Diagnostics.Debug.WriteLine("SQL : " + sqlStr);
                checkdata = tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);

                //System.Diagnostics.Debug.WriteLine(success);
                 System.Diagnostics.Debug.WriteLine("J : " + checkdata);
                if (checkdata == "ok")
                {
                    System.Diagnostics.Debug.WriteLine("D :");
                    return success;
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("E :");
                    return success = false;
                }
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

        //////////// REGION MAINTENANCE ////////////

        public class RegionMaintenance
        {
            public string REGION_ID;
            public string REGION_NAME;
            public string REGION_NO;
        }

        public class OSPRegionMaintenance
        {
            public int max;
            public List<RegionMaintenance> RegionMaintenanceList = new List<RegionMaintenance>();
        }

        [WebMethod]
        public OSPRegionMaintenance GetOSPRegionMaintenance(int start, int size, string searchKey)
        {
            OSPRegionMaintenance osp = new OSPRegionMaintenance();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null)
                {
                    int count = (from c in ctxData.WV_REGION_MAST
                                 select c).Count();

                   // System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_REGION_MAST
                                 orderby d.REGION_ID
                                 select new { d.REGION_ID, d.REGION_NAME, d.REGION_NO }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        RegionMaintenance RegionMaintenance = new RegionMaintenance();
                        RegionMaintenance.REGION_ID = a.REGION_ID;
                        RegionMaintenance.REGION_NAME = a.REGION_NAME;
                        RegionMaintenance.REGION_NO = a.REGION_NO.ToString();

                        osp.RegionMaintenanceList.Add(RegionMaintenance);

                        //System.Diagnostics.Debug.WriteLine(a.REGION_ID + " : " + a.REGION_NAME);
                    }
                }
                else
                {
                    int count = (from c in ctxData.WV_REGION_MAST
                                 where c.REGION_ID.Contains(searchKey) || c.REGION_NAME.Contains(searchKey.ToUpper())
                                 select c).Count();

                    osp.max = count;

                    var query = (from d in ctxData.WV_REGION_MAST
                                 where d.REGION_ID.Contains(searchKey) || d.REGION_NAME.Contains(searchKey.ToUpper())
                                 orderby d.REGION_ID
                                 select new { d.REGION_ID, d.REGION_NAME, d.REGION_NO }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        RegionMaintenance RegionMaintenance = new RegionMaintenance();
                        RegionMaintenance.REGION_ID = a.REGION_ID;
                        RegionMaintenance.REGION_NAME = a.REGION_NAME;
                        RegionMaintenance.REGION_NO = a.REGION_NO.ToString();

                        osp.RegionMaintenanceList.Add(RegionMaintenance);

                       // System.Diagnostics.Debug.WriteLine(a.REGION_ID + " : " + a.REGION_NAME);
                    }
                }
            }

            return osp;
        }

        public bool DeleteRegionMaintenance(string RegionId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_REGION_MAST WHERE REGION_ID = '" + RegionId + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool UpdateRegionMaintenance(RegionMaintenance RegionMain, string RegionId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_REGION_MAST SET REGION_NAME = '" + RegionMain.REGION_NAME +
                "', REGION_NO = '" + RegionMain.REGION_NO +
                "' WHERE REGION_ID ='" + RegionId + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddRegionMaintenance(RegionMaintenance newRegionMain)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_REGION_MAST (REGION_ID, REGION_NAME, REGION_NO ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[3];
                oraPrm[0] = new OracleParameter("v_REGION_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = newRegionMain.REGION_ID;
                oraPrm[1] = new OracleParameter("v_REGION_NAME", OracleDbType.Varchar2);
                oraPrm[1].Value = newRegionMain.REGION_NAME;
                oraPrm[2] = new OracleParameter("v_REGION_NO", OracleDbType.Varchar2);
                oraPrm[2].Value = newRegionMain.REGION_NO;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
               // System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }
        ////////////// PU MAINTENANCE ////////////

        //public class PUMaintenance
        //{
        //    public string EXC_ABB;
        //    public string EXC_NAME;
        //    public string PTT_ID;
        //    public string LOC_NO;
        //    public string STATE_ID;
        //    public string MAIN_NO;
        //    public string CAT_CODE;
        //    public string EXC_TYPE;
        //    public string EXC_ID;
        //    public string SEGMENT;
        //}

        //public class OSPExchangeMaintenance
        //{
        //    public int max;
        //    public List<ExchangeMaintenance> ExchangeMaintenanceList = new List<ExchangeMaintenance>();
        //}

        //////////// EXCHANGE MAINTENANCE ////////////

        public class ExchangeMaintenance
        {
            public string EXC_ABB;
            public string EXC_NAME;
            public string PTT_ID;
            public string LOC_NO;
            public string STATE_ID;
            public string MAIN_NO;
            public string CAT_CODE;
            public string EXC_TYPE;
            public string EXC_ID;
            public string SEGMENT;
            public string ADD1;
            public string ADD2;
            public string CITY;
        }

        public class OSPExchangeMaintenance
        {
            public int max;
            public List<ExchangeMaintenance> ExchangeMaintenanceList = new List<ExchangeMaintenance>();
        }

        [WebMethod]
        public OSPExchangeMaintenance GetOSPExchangeMaintenance(int start, int size, string searchKey, string pttID)
        {
            OSPExchangeMaintenance osp = new OSPExchangeMaintenance();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null && pttID == null)
                {
                    int count = (from c in ctxData.WV_EXC_MAST
                                 select c).Count();

                   // System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_EXC_MAST
                                 orderby d.EXC_ABB
                                 select new { d.EXC_ABB, d.EXC_NAME, d.PTT_ID, d.LOC_NO, d.STATE_ID, d.MAIN_NO, d.CAT_CODE, 
                                     d.EXC_TYPE, d.EXC_ID, d.SEGMENT , d.SITE_ADDRESS ,d.SITE_ADDRESS_2 ,d.CITY }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        ExchangeMaintenance ExchangeMaintenance = new ExchangeMaintenance();
                        ExchangeMaintenance.EXC_ABB = a.EXC_ABB;
                        ExchangeMaintenance.EXC_NAME = a.EXC_NAME;
                        ExchangeMaintenance.PTT_ID = a.PTT_ID;
                        ExchangeMaintenance.LOC_NO = a.LOC_NO;
                        ExchangeMaintenance.STATE_ID = a.STATE_ID;
                        ExchangeMaintenance.MAIN_NO = a.MAIN_NO.ToString();
                        ExchangeMaintenance.CAT_CODE = a.CAT_CODE;
                        ExchangeMaintenance.EXC_TYPE = a.EXC_TYPE;
                        ExchangeMaintenance.EXC_ID = a.EXC_ID;
                        ExchangeMaintenance.SEGMENT = a.SEGMENT;
                        ExchangeMaintenance .ADD1 = a.SITE_ADDRESS ;
                        ExchangeMaintenance .ADD2 = a.SITE_ADDRESS_2 ;
                        ExchangeMaintenance .ADD2 = a.CITY ;

                        osp.ExchangeMaintenanceList.Add(ExchangeMaintenance);

                        //System.Diagnostics.Debug.WriteLine(a.EXC_ABB + " : " + a.EXC_NAME);
                    }
                }
                else if (searchKey != null && pttID == null)
                {
                    int count = (from c in ctxData.WV_EXC_MAST
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_EXC_MAST
                                 where d.EXC_ABB.Contains(searchKey) || d.EXC_NAME.Contains(searchKey.ToUpper())
                                 orderby d.EXC_ABB
                                 select new
                                 {
                                     d.EXC_ABB,
                                     d.EXC_NAME,
                                     d.PTT_ID,
                                     d.LOC_NO,
                                     d.STATE_ID,
                                     d.MAIN_NO,
                                     d.CAT_CODE,
                                     d.EXC_TYPE,
                                     d.EXC_ID,
                                     d.SEGMENT,
                                     d.SITE_ADDRESS,
                                     d.SITE_ADDRESS_2,
                                     d.CITY
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        ExchangeMaintenance ExchangeMaintenance = new ExchangeMaintenance();
                        ExchangeMaintenance.EXC_ABB = a.EXC_ABB;
                        ExchangeMaintenance.EXC_NAME = a.EXC_NAME;
                        ExchangeMaintenance.PTT_ID = a.PTT_ID;
                        ExchangeMaintenance.LOC_NO = a.LOC_NO;
                        ExchangeMaintenance.STATE_ID = a.STATE_ID;
                        ExchangeMaintenance.MAIN_NO = a.MAIN_NO.ToString();
                        ExchangeMaintenance.CAT_CODE = a.CAT_CODE;
                        ExchangeMaintenance.EXC_TYPE = a.EXC_TYPE;
                        ExchangeMaintenance.EXC_ID = a.EXC_ID;
                        ExchangeMaintenance.SEGMENT = a.SEGMENT;
                        ExchangeMaintenance.ADD1 = a.SITE_ADDRESS;
                        ExchangeMaintenance.ADD2 = a.SITE_ADDRESS_2;
                        ExchangeMaintenance.ADD2 = a.CITY;

                        osp.ExchangeMaintenanceList.Add(ExchangeMaintenance);

                       // System.Diagnostics.Debug.WriteLine(a.EXC_ABB + " : " + a.EXC_NAME);
                    }
                }
                else if (searchKey == null && pttID != null)
                {
                    int count = (from c in ctxData.WV_EXC_MAST
                                 select c).Count();

                   // System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_EXC_MAST
                                 where d.PTT_ID == pttID
                                 orderby d.EXC_ABB
                                 select new
                                 {
                                     d.EXC_ABB,
                                     d.EXC_NAME,
                                     d.PTT_ID,
                                     d.LOC_NO,
                                     d.STATE_ID,
                                     d.MAIN_NO,
                                     d.CAT_CODE,
                                     d.EXC_TYPE,
                                     d.EXC_ID,
                                     d.SEGMENT,
                                     d.SITE_ADDRESS,
                                     d.SITE_ADDRESS_2,
                                     d.CITY
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        ExchangeMaintenance ExchangeMaintenance = new ExchangeMaintenance();
                        ExchangeMaintenance.EXC_ABB = a.EXC_ABB;
                        ExchangeMaintenance.EXC_NAME = a.EXC_NAME;
                        ExchangeMaintenance.PTT_ID = a.PTT_ID;
                        ExchangeMaintenance.LOC_NO = a.LOC_NO;
                        ExchangeMaintenance.STATE_ID = a.STATE_ID;
                        ExchangeMaintenance.MAIN_NO = a.MAIN_NO.ToString();
                        ExchangeMaintenance.CAT_CODE = a.CAT_CODE;
                        ExchangeMaintenance.EXC_TYPE = a.EXC_TYPE;
                        ExchangeMaintenance.EXC_ID = a.EXC_ID;
                        ExchangeMaintenance.SEGMENT = a.SEGMENT;
                        ExchangeMaintenance.ADD1 = a.SITE_ADDRESS;
                        ExchangeMaintenance.ADD2 = a.SITE_ADDRESS_2;
                        ExchangeMaintenance.ADD2 = a.CITY;

                        osp.ExchangeMaintenanceList.Add(ExchangeMaintenance);

                      //  System.Diagnostics.Debug.WriteLine(a.EXC_ABB + " : " + a.EXC_NAME);
                    }
                }
                else if (searchKey != null && pttID != null)
                {
                    int count = (from c in ctxData.WV_EXC_MAST
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_EXC_MAST
                                 where d.PTT_ID == pttID && (d.EXC_ABB.Contains(searchKey) || d.EXC_NAME.Contains(searchKey))
                                 orderby d.EXC_ABB
                                 select new
                                 {
                                     d.EXC_ABB,
                                     d.EXC_NAME,
                                     d.PTT_ID,
                                     d.LOC_NO,
                                     d.STATE_ID,
                                     d.MAIN_NO,
                                     d.CAT_CODE,
                                     d.EXC_TYPE,
                                     d.EXC_ID,
                                     d.SEGMENT,
                                     d.SITE_ADDRESS,
                                     d.SITE_ADDRESS_2,
                                     d.CITY
                                 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        ExchangeMaintenance ExchangeMaintenance = new ExchangeMaintenance();
                        ExchangeMaintenance.EXC_ABB = a.EXC_ABB;
                        ExchangeMaintenance.EXC_NAME = a.EXC_NAME;
                        ExchangeMaintenance.PTT_ID = a.PTT_ID;
                        ExchangeMaintenance.LOC_NO = a.LOC_NO;
                        ExchangeMaintenance.STATE_ID = a.STATE_ID;
                        ExchangeMaintenance.MAIN_NO = a.MAIN_NO.ToString();
                        ExchangeMaintenance.CAT_CODE = a.CAT_CODE;
                        ExchangeMaintenance.EXC_TYPE = a.EXC_TYPE;
                        ExchangeMaintenance.EXC_ID = a.EXC_ID;
                        ExchangeMaintenance.SEGMENT = a.SEGMENT;
                        ExchangeMaintenance.ADD1 = a.SITE_ADDRESS;
                        ExchangeMaintenance.ADD2 = a.SITE_ADDRESS_2;
                        ExchangeMaintenance.ADD2 = a.CITY;

                        osp.ExchangeMaintenanceList.Add(ExchangeMaintenance);

                        //System.Diagnostics.Debug.WriteLine(a.EXC_ABB + " : " + a.EXC_NAME);
                    }
                }
                //else
                //{
                //    int count = (from c in ctxData.WV_EXC_MAST
                //                 where c.EXC_ABB.Contains(searchKey) || c.EXC_NAME.Contains(searchKey)
                //                 select c).Count();

                //    System.Diagnostics.Debug.WriteLine(count);
                //    osp.max = count;

                //    var query = (from d in ctxData.WV_EXC_MAST
                //                 where d.EXC_ABB.Contains(searchKey) || d.EXC_NAME.Contains(searchKey.ToUpper())
                //                 orderby d.EXC_ABB
                //                 select new { d.EXC_ABB, d.EXC_NAME, d.PTT_ID, d.LOC_NO, d.STATE_ID, d.MAIN_NO, d.CAT_CODE, d.EXC_TYPE, d.EXC_ID, d.SEGMENT }).Skip(start).Take(size);

                //    foreach (var a in query)
                //    {
                //        ExchangeMaintenance ExchangeMaintenance = new ExchangeMaintenance();
                //        ExchangeMaintenance.EXC_ABB = a.EXC_ABB;
                //        ExchangeMaintenance.EXC_NAME = a.EXC_NAME;
                //        ExchangeMaintenance.PTT_ID = a.PTT_ID;
                //        ExchangeMaintenance.LOC_NO = a.LOC_NO;
                //        ExchangeMaintenance.STATE_ID = a.STATE_ID;
                //        ExchangeMaintenance.MAIN_NO = a.MAIN_NO.ToString();
                //        ExchangeMaintenance.CAT_CODE = a.CAT_CODE;
                //        ExchangeMaintenance.EXC_TYPE = a.EXC_TYPE;
                //        ExchangeMaintenance.EXC_ID = a.EXC_ID;
                //        ExchangeMaintenance.SEGMENT = a.SEGMENT;

                //        osp.ExchangeMaintenanceList.Add(ExchangeMaintenance);

                //        System.Diagnostics.Debug.WriteLine(a.EXC_ABB + " : " + a.EXC_NAME);
                //    }
                //}
            }

            return osp;
        }

        public bool DeleteExchangeMaintenance(string ExcAbb)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_EXC_MAST WHERE EXC_ABB = '" + ExcAbb + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool UpdateExchangeMaintenance(ExchangeMaintenance ExcMain, string ExcAbb)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            //System.Diagnostics.Debug.WriteLine("B" + ExcMain.ADD1);
            
            sqlCmd = "UPDATE WV_EXC_MAST SET EXC_NAME = '" + ExcMain.EXC_NAME +
                "', PTT_ID = '" + ExcMain.PTT_ID +
                "', LOC_NO = '" + ExcMain.LOC_NO +
                "', STATE_ID = '" + ExcMain.STATE_ID +
                "', MAIN_NO = '" + ExcMain.MAIN_NO +
                "', CAT_CODE = '" + ExcMain.CAT_CODE +
                "', EXC_TYPE = '" + ExcMain.EXC_TYPE +
                "', EXC_ID = '" + ExcMain.EXC_ID +
                "', SEGMENT = '" + ExcMain.SEGMENT +
                "', SITE_ADDRESS ='" + ExcMain.ADD1 +
                "', SITE_ADDRESS_2 ='" + ExcMain.ADD2 +
                "', CITY ='" + ExcMain.CITY +
                "' WHERE EXC_ABB ='" + ExcAbb + "'";

            //System.Diagnostics.Debug.WriteLine("C : " + sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddExchangeMaintenance(ExchangeMaintenance newExcMain)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();
                string checkdata;
               // System.Diagnostics.Debug.WriteLine("B");
                string sqlStr = "insert into WV_EXC_MAST (EXC_ABB, EXC_NAME, PTT_ID, LOC_NO, STATE_ID, MAIN_NO, CAT_CODE, EXC_TYPE, EXC_ID, SEGMENT,SITE_ADDRESS,SITE_ADDRESS_2,CITY ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[13];
                oraPrm[0] = new OracleParameter("v_EXC_ABB", OracleDbType.Varchar2);
                oraPrm[0].Value = newExcMain.EXC_ABB;
                oraPrm[1] = new OracleParameter("v_EXC_NAME", OracleDbType.Varchar2);
                oraPrm[1].Value = newExcMain.EXC_NAME;
                oraPrm[2] = new OracleParameter("v_PTT_ID", OracleDbType.Varchar2);
                oraPrm[2].Value = newExcMain.PTT_ID;
                oraPrm[3] = new OracleParameter("v_LOC_NO", OracleDbType.Varchar2);
                oraPrm[3].Value = newExcMain.LOC_NO;
                oraPrm[4] = new OracleParameter("v_STATE_ID", OracleDbType.Varchar2);
                oraPrm[4].Value = newExcMain.STATE_ID;
                oraPrm[5] = new OracleParameter("v_MAIN_NO", OracleDbType.Varchar2);
                oraPrm[5].Value = newExcMain.MAIN_NO;
                oraPrm[6] = new OracleParameter("v_CAT_CODE", OracleDbType.Varchar2);
                oraPrm[6].Value = newExcMain.CAT_CODE;
                oraPrm[7] = new OracleParameter("v_EXC_TYPE", OracleDbType.Varchar2);
                oraPrm[7].Value = newExcMain.EXC_TYPE;
                oraPrm[8] = new OracleParameter("v_EXC_ID", OracleDbType.Varchar2);
                oraPrm[8].Value = newExcMain.EXC_ID;
                oraPrm[9] = new OracleParameter("v_SEGMENT", OracleDbType.Varchar2);
                oraPrm[9].Value = newExcMain.SEGMENT;
                oraPrm[10] = new OracleParameter("v_SITE_ADDRESS", OracleDbType.Varchar2);
                oraPrm[10].Value = newExcMain.ADD1;
                oraPrm[11] = new OracleParameter("v_SITE_ADDRESS_2", OracleDbType.Varchar2);
                oraPrm[11].Value = newExcMain.ADD2;
                oraPrm[12] = new OracleParameter("v_CITY", OracleDbType.Varchar2);
                oraPrm[12].Value = newExcMain.CITY;

                checkdata = tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
               // System.Diagnostics.Debug.WriteLine("J : " + checkdata);
                if (checkdata == "ok")
                {
                    //System.Diagnostics.Debug.WriteLine("D :");
                    return success;
                }else {
                   // System.Diagnostics.Debug.WriteLine("E :");
                    return success = false;
                }
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

        //////////// STATE MAINTENANCE ////////////

        public class StateMaintenance
        {
            public string STATE_ID;
            public string STATE_NAME;
            public string REGION_ID;
        }

        public class OSPStateMaintenance
        {
            public int max;
            public List<StateMaintenance> StateMaintenanceList = new List<StateMaintenance>();
        }

        [WebMethod]
        public OSPStateMaintenance GetOSPStateMaintenance(int start, int size, string searchKey)
        {
            OSPStateMaintenance osp = new OSPStateMaintenance();

            if (searchKey == null)
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_STATE_MAST
                                 select c).Count();

                   // System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_STATE_MAST
                                 orderby d.STATE_ID
                                 select new { d.STATE_ID, d.STATE_NAME, d.REGION_ID }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        StateMaintenance StateMaintenance = new StateMaintenance();
                        StateMaintenance.STATE_ID = a.STATE_ID;
                        StateMaintenance.STATE_NAME = a.STATE_NAME;
                        StateMaintenance.REGION_ID = a.REGION_ID;

                        osp.StateMaintenanceList.Add(StateMaintenance);

                        //System.Diagnostics.Debug.WriteLine(a.STATE_ID + " : " + a.STATE_NAME);
                    }
                }
            }
            else
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_STATE_MAST
                                 where c.STATE_ID.Contains(searchKey) || c.STATE_NAME.Contains(searchKey.ToUpper())
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_STATE_MAST
                                 where d.STATE_ID.Contains(searchKey) || d.STATE_NAME.Contains(searchKey.ToUpper())
                                 orderby d.STATE_ID
                                 select new { d.STATE_ID, d.STATE_NAME, d.REGION_ID }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        StateMaintenance StateMaintenance = new StateMaintenance();
                        StateMaintenance.STATE_ID = a.STATE_ID;
                        StateMaintenance.STATE_NAME = a.STATE_NAME;
                        StateMaintenance.REGION_ID = a.REGION_ID;

                        osp.StateMaintenanceList.Add(StateMaintenance);

                        //System.Diagnostics.Debug.WriteLine(a.STATE_ID + " : " + a.STATE_NAME);
                    }
                }
            }

            return osp;
        }

        public bool DeleteStateMaintenance(string StateId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_STATE_MAST WHERE STATE_ID = '" + StateId + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool UpdateStateMaintenance(StateMaintenance StateMain, string StateId)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_STATE_MAST SET STATE_NAME = '" + StateMain.STATE_NAME +
                "', REGION_ID = '" + StateMain.REGION_ID +
                "' WHERE STATE_ID ='" + StateId + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddStateMaintenance(StateMaintenance newStateMain)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_STATE_MAST (STATE_ID, STATE_NAME, REGION_ID ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[3];
                oraPrm[0] = new OracleParameter("v_STATE_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = newStateMain.STATE_ID;
                oraPrm[1] = new OracleParameter("v_STATE_NAME", OracleDbType.Varchar2);
                oraPrm[1].Value = newStateMain.STATE_NAME;
                oraPrm[2] = new OracleParameter("v_REGION_ID", OracleDbType.Varchar2);
                oraPrm[2].Value = newStateMain.REGION_ID;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                //System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

         //////////// City MAINTENANCE ////////////

        public class CityMaintenance
        {
            public string STATE_CODE;
            public string DESCRIPTION_STATE;
            public string CITY_NAME;
        }

        public class OSPCityMaintenance
        {
            public int max;
            public List<CityMaintenance> CityMaintenanceList = new List<CityMaintenance>();
        }

        [WebMethod]
        public OSPCityMaintenance GetOSPCityMaintenance(int start, int size,string searchKey, string searchCity)
        {
            OSPCityMaintenance osp = new OSPCityMaintenance();
            //System.Diagnostics.Debug.WriteLine("HH : " +  "SearchKey"+ searchKey + "  search City" + searchCity + " search Name " + searchStateName );
            if (searchKey == null && searchCity == null)
            {
                using (Entities ctxData = new Entities())
                {
                    //var StateName;
                    int count = (from c in ctxData.WV_CITY_MAST
                                 select c).Count();
                    System.Diagnostics.Debug.WriteLine("SearchKey " + searchKey + "searchCity" + searchCity);
                    System.Diagnostics.Debug.WriteLine("PA");
                    osp.max = count;

              
                    var query = (from d in ctxData.WV_CITY_MAST
                                 orderby d.CITY_NAME 
                                 select new { d.CITY_NAME, d.STATE_CODE , d.DESCRIPTION_STATE});

                    foreach (var a in query)
                    {
                        CityMaintenance CityMaintenance = new CityMaintenance();
                        System.Diagnostics.Debug.WriteLine("City Name :" + a.CITY_NAME);
                        CityMaintenance.STATE_CODE = a.STATE_CODE;
                        CityMaintenance.CITY_NAME = a.CITY_NAME;
                        CityMaintenance.DESCRIPTION_STATE = a.DESCRIPTION_STATE;
                        
                       osp.CityMaintenanceList.Add(CityMaintenance);
                    }
                }
            }
            else if (searchKey == null && searchCity != "")
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_CITY_MAST
                                 where c.STATE_CODE == searchCity
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine("Search City != Null");
                    System.Diagnostics.Debug.WriteLine("SearchKey " + searchKey + "searchCity" + searchCity);
                    osp.max = count;
           
                    var query = (from d in ctxData.WV_CITY_MAST
                                 where d.STATE_CODE == searchCity
                                 orderby d.CITY_NAME
                                 select new { d.CITY_NAME, d.STATE_CODE, d.DESCRIPTION_STATE });

                    foreach (var a in query)
                    {
                        CityMaintenance City = new CityMaintenance();
                        City.STATE_CODE = a.STATE_CODE;
                        City.CITY_NAME = a.CITY_NAME;
                        City.DESCRIPTION_STATE = a.DESCRIPTION_STATE;

                        osp.CityMaintenanceList.Add(City);

                        //System.Diagnostics.Debug.WriteLine(a.STATE_ID + " : " + a.STATE_NAME);
                    }
                }
            }
            else if (searchKey != null && searchCity == "")
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_CITY_MAST
                                 where c.CITY_NAME.Contains(searchKey)
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine("SearchKey != Null");
                    System.Diagnostics.Debug.WriteLine("SearchKey " + searchKey + "searchCity" + searchCity );
                  
                    osp.max = count;
                  
                    var query = (from d in ctxData.WV_CITY_MAST
                                 where d.CITY_NAME.Contains(searchKey)
                                 select new { d.CITY_NAME, d.STATE_CODE, d.DESCRIPTION_STATE });

                    foreach (var a in query)
                    {
                        CityMaintenance City = new CityMaintenance();
                        City.STATE_CODE = a.STATE_CODE;
                        City.CITY_NAME = a.CITY_NAME;
                        City.DESCRIPTION_STATE = a.DESCRIPTION_STATE;

                        osp.CityMaintenanceList.Add(City);

                        //System.Diagnostics.Debug.WriteLine(a.STATE_ID + " : " + a.STATE_NAME);
                    }
                }
            }
            else
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_CITY_MAST
                                 where c.STATE_CODE.Contains(searchKey) || c.STATE_CODE.Contains(searchCity.ToUpper())
                                 select c).Count();
                    System.Diagnostics.Debug.WriteLine("SearchKey SearchCity else");
                    //System.Diagnostics.Debug.WriteLine("State Name :" + searchStateName);
                    osp.max = count;

                    var query = (from d in ctxData.WV_CITY_MAST
                                 where d.CITY_NAME.Contains(searchKey.ToUpper()) || d.STATE_CODE.Contains(searchCity.Trim())
                                 orderby d.CITY_NAME
                                 select new { d.STATE_CODE, d.CITY_NAME , d.DESCRIPTION_STATE }).Skip(start).Take(size);
                 
                    foreach (var a in query)
                    {
                        CityMaintenance City = new CityMaintenance();
                        City.STATE_CODE = a.STATE_CODE;
                        City.CITY_NAME = a.CITY_NAME;
                        City.DESCRIPTION_STATE = a.DESCRIPTION_STATE ;

                        osp.CityMaintenanceList.Add(City);

                        //System.Diagnostics.Debug.WriteLine(a.STATE_ID + " : " + a.STATE_NAME);
                    }
                }
            }

            return osp;
        }

        public bool DeleteCityMaintenance(string targetCity)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_CITY_MAST WHERE CITY_NAME = '" + targetCity + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        public bool UpdateCityMaintenance(CityMaintenance StateMain, string CityIdVal)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            string Description_state ="";

            char Spliter = (':');
            string[] a = CityIdVal.Split(Spliter);
            string OldCity = a[0];
            string OldState = a[1];

            System.Diagnostics.Debug.WriteLine("Old " + OldCity  + " b " + OldState );

            sqlCmd = "UPDATE WV_CITY_MAST SET CITY_NAME = '" + StateMain.CITY_NAME +
                "', STATE_CODE = '" + StateMain.STATE_CODE +
                "', DESCRIPTION_STATE = '" + StateMain.DESCRIPTION_STATE +
                "' WHERE CITY_NAME ='" + OldCity  + "' AND STATE_CODE = '" + OldState + "'" ;

            System.Diagnostics.Debug.WriteLine("Update :::" + StateMain.CITY_NAME + " B " + StateMain.STATE_CODE + " C " + CityIdVal + " D " + StateMain.DESCRIPTION_STATE  );
            System.Diagnostics.Debug.WriteLine(sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
                System.Diagnostics.Debug.WriteLine("Succed: " + success);
            }

            return success;

        }

        public bool AddCityMaintenance(CityMaintenance newCityMain)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_CITY_MAST (CITY_NAME,STATE_CODE, DESCRIPTION_STATE";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[3];
                oraPrm[0] = new OracleParameter("v_CITY_NAME", OracleDbType.Varchar2);
                oraPrm[0].Value = newCityMain.CITY_NAME;
                oraPrm[1] = new OracleParameter("v_STATE_CODE", OracleDbType.Varchar2);
                oraPrm[1].Value = newCityMain.STATE_CODE;
                oraPrm[2] = new OracleParameter("v_DESCRIPTION_STATE", OracleDbType.Varchar2);
                oraPrm[2].Value = newCityMain.DESCRIPTION_STATE;
                //oraPrm[3] = new OracleParameter("v_MISMATCH", OracleDbType.Varchar2);
                //oraPrm[3].Value = "";
                //oraPrm[4] = new OracleParameter("v_ACTION", OracleDbType.Varchar2);
                //oraPrm[4].Value = "";
                string Check = "";

                //Check = tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                //System.Diagnostics.Debug.WriteLine(success);
                System.Diagnostics.Debug.WriteLine("Checking tr ::" + Check);
                System.Diagnostics.Debug.WriteLine("SQL"+sqlStr +"    "+"state code [:" + newCityMain.STATE_CODE + "] CityName [:" + newCityMain.CITY_NAME + "] Descrip [:" + newCityMain.DESCRIPTION_STATE + "]" );
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }

        }

        //UnrecognizedExc
        public class UnrecognizedExc
        {
            public string SEGMENT;
            public string EXC_ABB;
            public string FEATURE_TYPE;
            public string FEATURE_STATE;
            public string SCHEME_NAME;
            public int G3E_ID;
            public int G3E_FID;
            public int G3E_FNO;
        }
        public class OSPUnrecognizedExc
        {
            public int max;
            public List<UnrecognizedExc> Exc = new List<UnrecognizedExc>();
        }

        [WebMethod]
        public OSPUnrecognizedExc GetOSPUnrecognizedExc(int start, int size, string searchKey, string searchExcAbb, string searchSegment, string searchFType, string searchFState)
        {
            OSPUnrecognizedExc osp = new OSPUnrecognizedExc();
            //System.Diagnostics.Debug.WriteLine("HH : " +  "SearchKey"+ searchKey + "  search City" + searchCity + " search Name " + searchStateName );
            using (Entities ctxData = new Entities())
            {
                if (searchKey == null && searchExcAbb == null && searchSegment == null && searchFType == null && searchFState == null)
                {
                    System.Diagnostics.Debug.WriteLine("e");

                    var tempEXC = "";
                    string feature = "";
                    string feaQuery;
                    char s = ('|');

                    //var query = (from a in ctxData.UNRECOGNIZED_EXC
                    //             //orderby a.SEGMENT,a.EXC_ABB,a.G3E_ID,a.FEATURE_STATE,a.SCHEME_NAME,c.G3E_USERNAME 
                    //             select new
                    //             {
                    //                 Segment = a.SEGMENT,
                    //                 Exc_Abb = a.EXC_ABB,
                    //                 ID = a.G3E_ID,
                    //                 ftype = a.FEATURE_TYPE,
                    //                 g3e_fno = a.G3E_FNO,
                    //                 FState = a.FEATURE_STATE,
                    //                 Scheme_Name = a.SCHEME_NAME,
                    //                 a.G3E_FNO

                    //             });
                    var query = from a in ctxData.GC_NETELEM
                                where !ctxData.WV_EXC_MAST.Any(b => b.EXC_ABB == a.EXC_ABB)
                                select new { a.SEGMENT, a.EXC_ABB, a.G3E_FID, a.G3E_FNO, a.FEATURE_STATE, a.JOB_ID,a.SCHEME_NAME,a.G3E_ID};

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_FID ))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                      //  Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey != "" && searchExcAbb == "Select" && searchSegment == "Select" && searchFType == "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.SCHEME_NAME.Trim().ToUpper() == searchKey.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb == "Select" && searchSegment == "Select" && searchFType == "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb != "Select" && searchSegment == "Select" && searchFType == "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.EXC_ABB.Contains(searchExcAbb)
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb == "Select" && searchSegment != "Select" && searchFType == "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.SEGMENT.Trim().ToUpper() == searchSegment.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    System.Diagnostics.Debug.WriteLine("Segment :" + searchSegment);
                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb == "Select" && searchSegment == "Select" && searchFType != "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.FEATURE_TYPE.Contains(searchFType)
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });
                    System.Diagnostics.Debug.WriteLine("Feature Type :" + searchFType);

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb == "Select" && searchSegment == "Select" && searchFType == "Select" && searchFState != "Select")
                {
                    System.Diagnostics.Debug.WriteLine("Feature State :" + searchFState);
                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.FEATURE_STATE.Trim().ToUpper().Contains(searchFState.Trim().ToUpper())
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey != "" && searchExcAbb != "Select" && searchSegment == "Select" && searchFType == "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.SCHEME_NAME.Trim().ToUpper().Contains(searchKey.Trim().ToUpper()) && a.EXC_ABB.Trim().ToUpper() == searchExcAbb.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey != "" && searchExcAbb == "Select" && searchSegment != "Select" && searchFType == "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.SCHEME_NAME.Trim().ToUpper().Contains(searchKey.Trim().ToUpper()) && a.SEGMENT.Trim().ToUpper() == searchSegment.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey != "" && searchExcAbb == "Select" && searchSegment == "Select" && searchFType != "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.SCHEME_NAME.Trim().ToUpper().Contains(searchKey.Trim().ToUpper()) && a.FEATURE_TYPE.Trim().ToUpper() == searchFType.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey != "" && searchExcAbb == "Select" && searchSegment == "Select" && searchFType == "Select" && searchFState != "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.SCHEME_NAME.Trim().ToUpper().Contains(searchKey.Trim().ToUpper()) && a.FEATURE_STATE.Trim().ToUpper() == searchFState.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb != "Select" && searchSegment != "Select" && searchFType == "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.EXC_ABB.Trim().ToUpper().Contains(searchExcAbb.Trim().ToUpper()) && a.SEGMENT.Trim().ToUpper() == searchSegment.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb != "Select" && searchSegment == "Select" && searchFType != "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.EXC_ABB.Trim().ToUpper().Contains(searchExcAbb.Trim().ToUpper()) && a.FEATURE_TYPE.Trim().ToUpper() == searchFType.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb != "Select" && searchSegment == "Select" && searchFType == "Select" && searchFState != "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.EXC_ABB.Trim().ToUpper().Contains(searchExcAbb.Trim().ToUpper()) && a.FEATURE_STATE.Trim().ToUpper() == searchFState.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb == "Select" && searchSegment != "Select" && searchFType != "Select" && searchFState == "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.SEGMENT.Trim().ToUpper().Contains(searchSegment.Trim().ToUpper()) && a.FEATURE_TYPE.Trim().ToUpper() == searchFType.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb == "Select" && searchSegment != "Select" && searchFType == "Select" && searchFState != "Select")
                {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.SEGMENT.Trim().ToUpper().Contains(searchSegment.Trim().ToUpper()) && a.FEATURE_STATE.Trim().ToUpper() == searchFState.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else if (searchKey == "" && searchExcAbb == "Select" && searchSegment == "Select" && searchFType != "Select" && searchFState != "Select")
                {
                    System.Diagnostics.Debug.WriteLine("FTYPE = " + searchFType + "  FState = " + searchFState);
                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.FEATURE_TYPE.Trim().ToUpper().Contains(searchFType.Trim().ToUpper()) && a.FEATURE_STATE.Trim().ToUpper() == searchFState.Trim().ToUpper()
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
                else {

                    var query = (from a in ctxData.UNRECOGNIZED_EXC
                                 where a.SCHEME_NAME.Trim().ToUpper().Contains(searchKey.Trim().ToUpper())
                                 || a.EXC_ABB.Trim().ToUpper().Contains(searchExcAbb.Trim().ToUpper())
                                 || a.SEGMENT.Trim().ToUpper().Contains(searchSegment.Trim().ToUpper())
                                 || a.FEATURE_TYPE.Trim().ToUpper().Contains(searchFType.Trim().ToUpper())
                                 || a.FEATURE_STATE.Trim().ToUpper().Contains(searchFState.Trim().ToUpper())
                                 select new { a.G3E_ID, a.EXC_ABB, a.FEATURE_STATE, a.SEGMENT, a.SCHEME_NAME, a.FEATURE_TYPE, a.G3E_FNO });

                    foreach (var a in query.Distinct().OrderBy(it => it.G3E_ID))
                    {
                        //System.Diagnostics.Debug.WriteLine(" f : " + a.EXC_ABB + " Feature_state = " + a.FEATURE_STATE + "  segment " + a.SEGMENT + "  scheme name + " + a.SCHEME_NAME);
                        UnrecognizedExc Unrecognized = new UnrecognizedExc();
                        Unrecognized.EXC_ABB = a.EXC_ABB;
                        Unrecognized.FEATURE_STATE = a.FEATURE_STATE;
                        Unrecognized.SEGMENT = a.SEGMENT;
                        Unrecognized.SCHEME_NAME = a.SCHEME_NAME;
                        Unrecognized.FEATURE_TYPE = a.FEATURE_TYPE;
                        Unrecognized.G3E_ID = a.G3E_ID;
                        Unrecognized.G3E_FNO = a.G3E_FNO;

                        osp.Exc.Add(Unrecognized);
                    }
                }
            }
            return osp;

        }
        public bool UpdateUrecognizedExc(UnrecognizedExc exc, string validExc) {

            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

           //Int32 a = Convert.ToInt32(exc.G3E_FID); 

            System.Diagnostics.Debug.WriteLine("valid " + validExc);

            sqlCmd = "UPDATE GC_NETELEM SET  EXC_ABB = '" + validExc + "' WHERE G3E_FID = '" + exc.G3E_FID + "' AND G3E_ID = '" + exc.G3E_ID + "'";

            //System.Diagnostics.Debug.WriteLine("g3e_fid  " + exc.G3E_FID + "    ID " + exc.G3E_ID);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
                System.Diagnostics.Debug.WriteLine("Succed: " + success);
            }
        
            return success;
        }

       
        //CSM*****************************************************************
        public class CSM
        {
            public string CONT_ID;
            public string CONT_DESC;
            public string CONTRACT_ID;
            public string CONTRACT_NO;
            public string ACT_CODE;
            public string PU_UOM;
            public string CONTRACT_PR;
        }

        public class OSPCSM
        {
            public int max;
            public List<CSM> CSMList = new List<CSM>();
        }

        [WebMethod]
        public OSPCSM GetOSPCSM(int start, int size, string searchKey, string itemNo)
        {
            OSPCSM osp = new OSPCSM();
            if (searchKey == null && itemNo == null)
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_CONTRACT_MAST
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_CONTRACT_MAST
                                 orderby d.CONTRACT_NO
                                 select new { d.CONTRACT_NO, d.ITEM_NO, d.CONTRACT_DESC, d.NET_PRICE, d.ORDER_UNIT, d.ITEM_CATEGORY, d.NETWORK_FLAG}).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        CSM csm = new CSM();

                        csm.CONT_ID = a.CONTRACT_NO;
                        csm.CONT_DESC = a.ITEM_NO.ToString();
                        csm.CONTRACT_ID = a.CONTRACT_DESC;
                        csm.CONTRACT_NO = a.NET_PRICE.ToString();
                        csm.ACT_CODE = a.ORDER_UNIT;
                        csm.PU_UOM = a.ITEM_CATEGORY;
                        csm.CONTRACT_PR = a.NETWORK_FLAG;
                        osp.CSMList.Add(csm);

                        //System.Diagnostics.Debug.WriteLine(a.CONT_ID + " : " + a.CONT_DESC);
                    }
                }
            }
            else if (searchKey != "" && itemNo == "Select")
            { 
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_CONTRACT_MAST
                                 where c.CONTRACT_NO.Contains(searchKey)
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_CONTRACT_MAST
                                 where d.CONTRACT_NO.Contains(searchKey)
                                 orderby d.CONTRACT_NO
                                 select new { d.CONTRACT_NO, d.ITEM_NO, d.CONTRACT_DESC, d.NET_PRICE, d.ORDER_UNIT, d.ITEM_CATEGORY, d.NETWORK_FLAG }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        CSM csm = new CSM();

                        csm.CONT_ID = a.CONTRACT_NO;
                        csm.CONT_DESC = a.ITEM_NO.ToString();
                        csm.CONTRACT_ID = a.CONTRACT_DESC;
                        csm.CONTRACT_NO = a.NET_PRICE.ToString();
                        csm.ACT_CODE = a.ORDER_UNIT;
                        csm.PU_UOM = a.ITEM_CATEGORY;
                        csm.CONTRACT_PR = a.NETWORK_FLAG;
                        osp.CSMList.Add(csm);
                    }
                }
            }
            else if (searchKey == "" && itemNo != "Select")
            {
                int itemNo_con = Convert.ToInt32(itemNo);
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_CONTRACT_MAST
                                 where c.ITEM_NO == itemNo_con 
                                 select c).Count();

                   // System.Diagnostics.Debug.WriteLine(itemNo + count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_CONTRACT_MAST
                                 where d.ITEM_NO == itemNo_con
                                 orderby d.CONTRACT_NO
                                 select new { d.CONTRACT_NO, d.ITEM_NO, d.CONTRACT_DESC, d.NET_PRICE, d.ORDER_UNIT, d.ITEM_CATEGORY, d.NETWORK_FLAG }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        CSM csm = new CSM();

                        csm.CONT_ID = a.CONTRACT_NO;
                        csm.CONT_DESC = a.ITEM_NO.ToString();
                        csm.CONTRACT_ID = a.CONTRACT_DESC;
                        csm.CONTRACT_NO = a.NET_PRICE.ToString();
                        csm.ACT_CODE = a.ORDER_UNIT;
                        csm.PU_UOM = a.ITEM_CATEGORY;
                        csm.CONTRACT_PR = a.NETWORK_FLAG;
                        osp.CSMList.Add(csm);
                    }
                }
            }
            else if (searchKey != "" && itemNo != "Select")
            {
                int itemNo_con = Convert.ToInt32(itemNo);
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_CONTRACT_MAST
                                 where c.CONTRACT_NO.Contains(searchKey) && c.ITEM_NO == itemNo_con
                                 select c).Count();

                   // System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_CONTRACT_MAST
                                 where d.CONTRACT_NO.Contains(searchKey) && d.ITEM_NO == itemNo_con
                                 orderby d.CONTRACT_NO
                                 select new { d.CONTRACT_NO, d.ITEM_NO, d.CONTRACT_DESC, d.NET_PRICE, d.ORDER_UNIT, d.ITEM_CATEGORY, d.NETWORK_FLAG }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        CSM csm = new CSM();

                        csm.CONT_ID = a.CONTRACT_NO;
                        csm.CONT_DESC = a.ITEM_NO.ToString();
                        csm.CONTRACT_ID = a.CONTRACT_DESC;
                        csm.CONTRACT_NO = a.NET_PRICE.ToString();
                        csm.ACT_CODE = a.ORDER_UNIT;
                        csm.PU_UOM = a.ITEM_CATEGORY;
                        csm.CONTRACT_PR = a.NETWORK_FLAG;
                        osp.CSMList.Add(csm);

                        //System.Diagnostics.Debug.WriteLine(a.CONT_ID + " : " + a.CONT_DESC);
                    }
                }
            }else
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_CONTRACT_MAST
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_CONTRACT_MAST
                                 orderby d.CONTRACT_NO
                                 select new { d.CONTRACT_NO, d.ITEM_NO, d.CONTRACT_DESC, d.NET_PRICE, d.ORDER_UNIT, d.ITEM_CATEGORY, d.NETWORK_FLAG }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        CSM csm = new CSM();

                        csm.CONT_ID = a.CONTRACT_NO;
                        csm.CONT_DESC = a.ITEM_NO.ToString();
                        csm.CONTRACT_ID = a.CONTRACT_DESC;
                        csm.CONTRACT_NO = a.NET_PRICE.ToString();
                        csm.ACT_CODE = a.ORDER_UNIT;
                        csm.PU_UOM = a.ITEM_CATEGORY;
                        csm.CONTRACT_PR = a.NETWORK_FLAG;
                        osp.CSMList.Add(csm);

                        //System.Diagnostics.Debug.WriteLine(a.CONT_ID + " : " + a.CONT_DESC);
                    }
                }
            }
            return osp;
        }

        public bool UpdateCSM(CSM CSM, string PU_ID, string ITEM_NO)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_CONTRACT_MAST SET ITEM_NO = '" + CSM.CONT_DESC +
                "', CONTRACT_DESC = '" + CSM.CONTRACT_ID +
                "', NET_PRICE = '" + CSM.CONTRACT_NO +
                "', NETWORK_FLAG = '" + CSM.ACT_CODE +
                "', ORDER_UNIT = '" + CSM.PU_UOM +
                "', ITEM_CATEGORY = '" + CSM.CONTRACT_PR +
                "' WHERE CONTRACT_NO ='" + PU_ID + "' AND ITEM_NO='" + ITEM_NO + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddCSM(CSM CSMNewjob)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_CONTRACT_MAST (CONTRACT_NO, ITEM_NO, CONTRACT_DESC, NET_PRICE, ORDER_UNIT, ITEM_CATEGORY, NETWORK_FLAG ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[7];

                oraPrm[0] = new OracleParameter("v_CONT_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = CSMNewjob.CONT_ID;
                oraPrm[1] = new OracleParameter("v_CONT_DESC", OracleDbType.Varchar2);
                oraPrm[1].Value = CSMNewjob.CONT_DESC;
                oraPrm[2] = new OracleParameter("v_CONTRACT_ID", OracleDbType.Varchar2);
                oraPrm[2].Value = CSMNewjob.CONTRACT_ID;
                oraPrm[3] = new OracleParameter("v_CONTRACT_NO", OracleDbType.Varchar2);
                oraPrm[3].Value = CSMNewjob.CONTRACT_NO;
                oraPrm[4] = new OracleParameter("v_ACT_CODE", OracleDbType.Varchar2);
                oraPrm[4].Value = CSMNewjob.ACT_CODE;
                oraPrm[5] = new OracleParameter("v_PU_UOM", OracleDbType.Varchar2);
                oraPrm[5].Value = CSMNewjob.PU_UOM;
                oraPrm[6] = new OracleParameter("v_CONTRACT_PR", OracleDbType.Int32);
                oraPrm[6].Value = CSMNewjob.CONTRACT_PR;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
               // System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        public bool Delete_CSM(string CanCode, string ItemNo)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_CONTRACT_MAST WHERE CONTRACT_NO = '" + CanCode + "' AND ITEM_NO='" + ItemNo + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        //CSM*****************************************************************
        public class CSFRM
        {
            public string CONT_ID;
            public string CONT_DESC;
            public string FEAT_TYPE;
            public string QTY_IND;
            public string MUL_FAC;
            public string ATT1;
            public string ATT2;
            public string ATT3;
            public string ATT4;
            public string ATT5;
            public string ATT6;
            public string ATT7;
            public string ATT8;
            public string ATT9;
            public string ATT10;
            public string ATT11;
            public string ATT12;
        }

        public class OSPCSFRM
        {
            public int max;
            public List<CSFRM> CSFRMList = new List<CSFRM>();
        }

        [WebMethod]
        public OSPCSFRM GetOSPCSFRM(int start, int size, string searchKey)
        {
            OSPCSFRM osp = new OSPCSFRM();
            if (searchKey == null)
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_CSFRM_MAST
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_CSFRM_MAST
                                 orderby d.CONT_ID
                                 select new { d.CONT_ID, d.CONT_DESC, d.FEAT_TYPE, d.QTY_IND, d.MUL_FAC, d.ATT1, d.ATT2, d.ATT3, d.ATT4, d.ATT5, d.ATT6, d.ATT7, d.ATT8, d.ATT9, d.ATT10, d.ATT11, d.ATT12 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        CSFRM csfrm = new CSFRM();

                        csfrm.CONT_ID = a.CONT_ID;
                        csfrm.CONT_DESC = a.CONT_DESC;
                        csfrm.FEAT_TYPE = a.FEAT_TYPE;
                        csfrm.QTY_IND = a.QTY_IND;
                        csfrm.MUL_FAC = a.MUL_FAC.ToString();
                        csfrm.ATT1 = a.ATT1;
                        csfrm.ATT2 = a.ATT2;
                        csfrm.ATT3 = a.ATT3;
                        csfrm.ATT4 = a.ATT4;
                        csfrm.ATT5 = a.ATT5;
                        csfrm.ATT6 = a.ATT6;
                        csfrm.ATT7 = a.ATT7;
                        csfrm.ATT8 = a.ATT8;
                        csfrm.ATT9 = a.ATT9;
                        csfrm.ATT10 = a.ATT10;
                        csfrm.ATT11 = a.ATT11;
                        csfrm.ATT12 = a.ATT12;
                        osp.CSFRMList.Add(csfrm);

                        //System.Diagnostics.Debug.WriteLine(a.CONT_ID + " : " + a.CONT_DESC);
                    }
                }
            }
            else
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_CSFRM_MAST
                                 where searchKey == c.CONT_ID
                                 select c).Count();

                   // System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_CSFRM_MAST
                                 where d.CONT_ID.Contains(searchKey)
                                 orderby d.CONT_ID
                                 select new { d.CONT_ID, d.CONT_DESC, d.FEAT_TYPE, d.QTY_IND, d.MUL_FAC, d.ATT1, d.ATT2, d.ATT3, d.ATT4, d.ATT5, d.ATT6, d.ATT7, d.ATT8, d.ATT9, d.ATT10, d.ATT11, d.ATT12 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        CSFRM csfrm = new CSFRM();

                        csfrm.CONT_ID = a.CONT_ID;
                        csfrm.CONT_DESC = a.CONT_DESC;
                        csfrm.FEAT_TYPE = a.FEAT_TYPE;
                        csfrm.QTY_IND = a.QTY_IND;
                        csfrm.MUL_FAC = a.MUL_FAC.ToString();
                        csfrm.ATT1 = a.ATT1;
                        csfrm.ATT2 = a.ATT2;
                        csfrm.ATT3 = a.ATT3;
                        csfrm.ATT4 = a.ATT4;
                        csfrm.ATT5 = a.ATT5;
                        csfrm.ATT6 = a.ATT6;
                        csfrm.ATT7 = a.ATT7;
                        csfrm.ATT8 = a.ATT8;
                        csfrm.ATT9 = a.ATT9;
                        csfrm.ATT10 = a.ATT10;
                        csfrm.ATT11 = a.ATT11;
                        csfrm.ATT12 = a.ATT12;
                        osp.CSFRMList.Add(csfrm);

                        //System.Diagnostics.Debug.WriteLine(a.CONT_ID + " : " + a.CONT_DESC);
                    }
                }
            }
            return osp;
        }

        public bool UpdateCSFRM(CSFRM CSFRM, string CONT_ID)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_CSFRM_MAST SET CONT_DESC = '" + CSFRM.CONT_DESC +
                "', FEAT_TYPE = '" + CSFRM.FEAT_TYPE +
                "', QTY_IND = '" + CSFRM.QTY_IND +
                "', MUL_FAC = '" + CSFRM.MUL_FAC +
                "', ATT1 = '" + CSFRM.ATT1 +
                "', ATT2 = '" + CSFRM.ATT2 +
                "', ATT3 = '" + CSFRM.ATT3 +
                "', ATT4 = '" + CSFRM.ATT4 +
                "', ATT5 = '" + CSFRM.ATT5 +
                "', ATT6 = '" + CSFRM.ATT6 +
                "', ATT7 = '" + CSFRM.ATT7 +
                "', ATT8 = '" + CSFRM.ATT8 +
                "', ATT9 = '" + CSFRM.ATT9 +
                "', ATT10 = '" + CSFRM.ATT10 +
                "', ATT11 = '" + CSFRM.ATT11 +
                "', ATT12 = '" + CSFRM.ATT12 +
                "' WHERE CONT_ID ='" + CSFRM.CONT_ID + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddCSFRM(CSFRM CSFRM)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_CSFRM_MAST (CONT_ID, CONT_DESC, FEAT_TYPE, QTY_IND, MUL_FAC, ATT1, ATT2, ATT3, ATT4, ATT5, ATT6, ATT7, ATT8, ATT9, ATT10, ATT11, ATT12 ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[17];

                oraPrm[0] = new OracleParameter("v_CONT_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = CSFRM.CONT_ID;
                oraPrm[1] = new OracleParameter("v_CONT_DESC", OracleDbType.Varchar2);
                oraPrm[1].Value = CSFRM.CONT_DESC;
                oraPrm[2] = new OracleParameter("v_FEAT_TYPE", OracleDbType.Varchar2);
                oraPrm[2].Value = CSFRM.FEAT_TYPE;
                oraPrm[3] = new OracleParameter("v_QTY_IND", OracleDbType.Varchar2);
                oraPrm[3].Value = CSFRM.QTY_IND;
                oraPrm[4] = new OracleParameter("v_MUL_FAC", OracleDbType.Int32);
                oraPrm[4].Value = CSFRM.MUL_FAC;
                oraPrm[5] = new OracleParameter("v_ATT1", OracleDbType.Varchar2);
                oraPrm[5].Value = CSFRM.ATT1;
                oraPrm[6] = new OracleParameter("v_ATT2", OracleDbType.Varchar2);
                oraPrm[6].Value = CSFRM.ATT2;
                oraPrm[7] = new OracleParameter("v_ATT3", OracleDbType.Varchar2);
                oraPrm[7].Value = CSFRM.ATT3;
                oraPrm[8] = new OracleParameter("v_ATT4", OracleDbType.Varchar2);
                oraPrm[8].Value = CSFRM.ATT4;
                oraPrm[9] = new OracleParameter("v_ATT5", OracleDbType.Varchar2);
                oraPrm[9].Value = CSFRM.ATT5;
                oraPrm[10] = new OracleParameter("v_ATT6", OracleDbType.Varchar2);
                oraPrm[10].Value = CSFRM.ATT6;
                oraPrm[11] = new OracleParameter("v_ATT7", OracleDbType.Varchar2);
                oraPrm[11].Value = CSFRM.ATT7;
                oraPrm[12] = new OracleParameter("v_ATT8", OracleDbType.Varchar2);
                oraPrm[12].Value = CSFRM.ATT8;
                oraPrm[13] = new OracleParameter("v_ATT9", OracleDbType.Varchar2);
                oraPrm[13].Value = CSFRM.ATT9;
                oraPrm[14] = new OracleParameter("v_ATT10", OracleDbType.Varchar2);
                oraPrm[14].Value = CSFRM.ATT10;
                oraPrm[15] = new OracleParameter("v_ATT11", OracleDbType.Varchar2);
                oraPrm[15].Value = CSFRM.ATT11;
                oraPrm[16] = new OracleParameter("v_ATT12", OracleDbType.Varchar2);
                oraPrm[16].Value = CSFRM.ATT12;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                //System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
            //return true; //dummy.
        }

        public bool Delete_CSFRM(string CONT_ID)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            //System.Diagnostics.Debug.Write("#####");
            //System.Diagnostics.Debug.WriteLine(CONT_ID);

            sqlCmd = "DELETE FROM WV_CSFRM_MAST" +
                " WHERE CONT_ID ='" + CONT_ID + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        //RKC1

        //----------------------------------------------PlanUnit

        //#region PlanUnit

        public class PlanUnit
        {
            public string PU_ID;
            public string PU_DESC;
            public string PU_INST_PR;
            public string PU_MAT_PR;
            public string PU_UOM;
            public string PU_DURATION;
            public string PU_NETWORK_FLAG;
            public string PU_ACT_CODE;
            public string PU_SUP_DURATION;
            public string PU_BILL_RATE;
            public int CountPlanUnit;
        }

        public class OSPPlanUnit
        {
            public int max;
            public List<PlanUnit> PlanUnitList = new List<PlanUnit>();
        }

        [WebMethod]
        public OSPPlanUnit GetOSPPlanUnit(int start, int size, string searchKey, string billrate, string SearchUOM)
        {
            OSPPlanUnit osp = new OSPPlanUnit();
            if (searchKey == null && billrate == null && SearchUOM == null)
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_PU_MAST
                                    select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;
                    System.Diagnostics.Debug.WriteLine("Base 1 " + "  Search key : " + searchKey + " | search UOM : " + SearchUOM + " search bill : " + billrate);
                    var query = (from d in ctxData.WV_PU_MAST
                                    orderby d.PU_ID descending
                                    select new { d.PU_ID, d.PU_DESC, d.PU_INST_PR, d.PU_MAT_PR, d.PU_UOM, d.DURATION, d.NETWORK_FLAG, d.ACT_CODE, d.SUP_DURATION,  d.BILL_RATE}).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PlanUnit planUnit = new PlanUnit();

                        planUnit.PU_ID = a.PU_ID;
                        planUnit.PU_DESC = a.PU_DESC;
                        planUnit.PU_INST_PR = a.PU_INST_PR.ToString();
                        planUnit.PU_MAT_PR = a.PU_MAT_PR.ToString();
                        planUnit.PU_UOM = a.PU_UOM;
                        planUnit.PU_DURATION = a.DURATION.ToString();
                        planUnit.PU_NETWORK_FLAG = a.NETWORK_FLAG;
                        planUnit.PU_ACT_CODE = a.ACT_CODE;
                        planUnit.PU_SUP_DURATION = a.SUP_DURATION.ToString();
                        planUnit.PU_BILL_RATE = a.BILL_RATE;
                        planUnit.CountPlanUnit = count;
                        osp.PlanUnitList.Add(planUnit);

                        //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
            }
            else if (searchKey != null && billrate == "Select" && SearchUOM == "Select")
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_PU_MAST
                                 where c.PU_ID.Contains(searchKey)
                                 select c).Count();
              
                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;
                    System.Diagnostics.Debug.WriteLine("Base 2 " + "  Search key : " + searchKey + " | search UOM : " + SearchUOM + " search bill : " + billrate);
                    var query = (from d in ctxData.WV_PU_MAST
                                 where d.PU_ID.Contains(searchKey)
                                 orderby d.PU_ID descending
                                 select new { d.PU_ID, d.PU_DESC, d.PU_INST_PR, d.PU_MAT_PR, d.PU_UOM, d.DURATION, d.NETWORK_FLAG, d.ACT_CODE, d.SUP_DURATION, d.BILL_RATE }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PlanUnit planUnit = new PlanUnit();

                        planUnit.PU_ID = a.PU_ID;
                        planUnit.PU_DESC = a.PU_DESC;
                        planUnit.PU_INST_PR = a.PU_INST_PR.ToString();
                        planUnit.PU_MAT_PR = a.PU_MAT_PR.ToString();
                        planUnit.PU_UOM = a.PU_UOM;
                        planUnit.PU_DURATION = a.DURATION.ToString();
                        planUnit.PU_NETWORK_FLAG = a.NETWORK_FLAG;
                        planUnit.PU_ACT_CODE = a.ACT_CODE;
                        planUnit.PU_SUP_DURATION = a.SUP_DURATION.ToString();
                        planUnit.PU_BILL_RATE = a.BILL_RATE;
                        osp.PlanUnitList.Add(planUnit);

                        //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
            }
            else if ((searchKey == "" || searchKey == null) && billrate != "Select" && SearchUOM == "Select")
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_PU_MAST
                                 where c.BILL_RATE == billrate
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine("Base 3 " + "  Search key : " + searchKey + " | search UOM : " + SearchUOM + " search bill : " + billrate);
                    osp.max = count;

                    var query = (from d in ctxData.WV_PU_MAST
                                 where d.BILL_RATE == billrate 
                                 orderby d.PU_ID descending
                                 select new { d.PU_ID, d.PU_DESC, d.PU_INST_PR, d.PU_MAT_PR, d.PU_UOM, d.DURATION, d.NETWORK_FLAG, d.ACT_CODE, d.SUP_DURATION, d.BILL_RATE }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PlanUnit planUnit = new PlanUnit();

                        planUnit.PU_ID = a.PU_ID;
                        planUnit.PU_DESC = a.PU_DESC;
                        planUnit.PU_INST_PR = a.PU_INST_PR.ToString();
                        planUnit.PU_MAT_PR = a.PU_MAT_PR.ToString();
                        planUnit.PU_UOM = a.PU_UOM;
                        planUnit.PU_DURATION = a.DURATION.ToString();
                        planUnit.PU_NETWORK_FLAG = a.NETWORK_FLAG;
                        planUnit.PU_ACT_CODE = a.ACT_CODE;
                        planUnit.PU_SUP_DURATION = a.SUP_DURATION.ToString();
                        planUnit.PU_BILL_RATE = a.BILL_RATE;
                        osp.PlanUnitList.Add(planUnit);

                        //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
            }
            else if ((searchKey == "" || searchKey == null) && billrate.Equals("Select") && SearchUOM != "Select")
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_PU_MAST
                                 where c.PU_UOM == SearchUOM
                                 select c).Count();
                 
                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;
                    System.Diagnostics.Debug.WriteLine("Base 4 " + "  Search key : " + searchKey + " | search UOM : " + SearchUOM + " search bill : " + billrate);
                    var query = (from d in ctxData.WV_PU_MAST
                                 where d.PU_UOM == SearchUOM
                                 orderby d.PU_ID descending
                                 select new { d.PU_ID, d.PU_DESC, d.PU_INST_PR, d.PU_MAT_PR, d.PU_UOM, d.DURATION, d.NETWORK_FLAG, d.ACT_CODE, d.SUP_DURATION, d.BILL_RATE }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PlanUnit planUnit = new PlanUnit();

                        planUnit.PU_ID = a.PU_ID;
                        planUnit.PU_DESC = a.PU_DESC;
                        planUnit.PU_INST_PR = a.PU_INST_PR.ToString();
                        planUnit.PU_MAT_PR = a.PU_MAT_PR.ToString();
                        planUnit.PU_UOM = a.PU_UOM;
                        planUnit.PU_DURATION = a.DURATION.ToString();
                        planUnit.PU_NETWORK_FLAG = a.NETWORK_FLAG;
                        planUnit.PU_ACT_CODE = a.ACT_CODE;
                        planUnit.PU_SUP_DURATION = a.SUP_DURATION.ToString();
                        planUnit.PU_BILL_RATE = a.BILL_RATE;
                        osp.PlanUnitList.Add(planUnit);

                        //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
            }
            else
            {
                using (Entities ctxData = new Entities())
                {
                    int count = (from c in ctxData.WV_PU_MAST
                                 where c.PU_ID.Contains(searchKey) && c.BILL_RATE == billrate && c.PU_UOM == SearchUOM 
                                 select c).Count();

                    System.Diagnostics.Debug.WriteLine("Base 5 " + "  Search key : " + searchKey + " | search UOM : " + SearchUOM + " search bill : " + billrate);
                    osp.max = count;

                    var query = (from d in ctxData.WV_PU_MAST
                                 where d.PU_ID.Contains(searchKey) && d.BILL_RATE == billrate && d.PU_UOM == SearchUOM 
                                 orderby d.PU_ID descending
                                 select new { d.PU_ID, d.PU_DESC, d.PU_INST_PR, d.PU_MAT_PR, d.PU_UOM, d.DURATION, d.NETWORK_FLAG, d.ACT_CODE, d.SUP_DURATION, d.BILL_RATE }).Skip(start).Take(size);
                    System.Diagnostics.Debug.WriteLine("Search Key :" + searchKey + "  Search bill  " + billrate + "  Search UOM  " + SearchUOM );
                    foreach (var a in query)
                    {
                        PlanUnit planUnit = new PlanUnit();

                        planUnit.PU_ID = a.PU_ID;
                        planUnit.PU_DESC = a.PU_DESC;
                        planUnit.PU_INST_PR = a.PU_INST_PR.ToString();
                        planUnit.PU_MAT_PR = a.PU_MAT_PR.ToString();
                        planUnit.PU_UOM = a.PU_UOM;
                        planUnit.PU_DURATION = a.DURATION.ToString();
                        planUnit.PU_NETWORK_FLAG = a.NETWORK_FLAG;
                        planUnit.PU_ACT_CODE = a.ACT_CODE;
                        planUnit.PU_SUP_DURATION = a.SUP_DURATION.ToString();
                        planUnit.PU_BILL_RATE = a.BILL_RATE;
                        osp.PlanUnitList.Add(planUnit);

                        //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
            }
            return osp;
        }

        public bool UpdatePlanUnit(PlanUnit PlanUnit, string PU_ID, string Bill_Rate)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            //System.Diagnostics.Debug.WriteLine("Plant Unit : PU UOM : " + PlanUnit.PU_UOM + "  PU ID : [" + plan ) ;

            sqlCmd = "UPDATE WV_PU_MAST SET PU_DESC = '" + PlanUnit.PU_DESC +
                "', PU_INST_PR = '" + PlanUnit.PU_INST_PR +
                "', PU_MAT_PR = '" + PlanUnit.PU_MAT_PR +
                "', PU_UOM = '" + PlanUnit.PU_UOM +
                "', DURATION = '" + PlanUnit.PU_DURATION +
                "', NETWORK_FLAG = '" + PlanUnit.PU_NETWORK_FLAG +
                "', ACT_CODE = '" + PlanUnit.PU_ACT_CODE +
                "', SUP_DURATION = '" + PlanUnit.PU_SUP_DURATION +
                "', BILL_RATE = '" + PlanUnit.PU_BILL_RATE  +
                "' WHERE PU_ID ='" + PU_ID + "' AND BILL_RATE ='" + Bill_Rate + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddPlanUnit(PlanUnit PlanUnitNewjob)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_PU_MAST (PU_ID, PU_DESC, PU_INST_PR, PU_MAT_PR, PU_UOM, DURATION, NETWORK_FLAG, ACT_CODE, SUP_DURATION, BILL_RATE ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[10];

                oraPrm[0] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = PlanUnitNewjob.PU_ID;
                oraPrm[1] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                oraPrm[1].Value = PlanUnitNewjob.PU_DESC;
                oraPrm[2] = new OracleParameter("v_PU_INST_PR", OracleDbType.Double);
                oraPrm[2].Value = PlanUnitNewjob.PU_INST_PR;
                oraPrm[3] = new OracleParameter("v_PU_MAT_PR", OracleDbType.Double);
                oraPrm[3].Value = PlanUnitNewjob.PU_MAT_PR;
                oraPrm[4] = new OracleParameter("v_PU_UOM", OracleDbType.Varchar2);
                oraPrm[4].Value = PlanUnitNewjob.PU_UOM;
                oraPrm[5] = new OracleParameter("v_DURATION", OracleDbType.Int32);
                oraPrm[5].Value = PlanUnitNewjob.PU_DURATION;
                oraPrm[6] = new OracleParameter("v_NETWORK_FLAG", OracleDbType.Varchar2);
                oraPrm[6].Value = PlanUnitNewjob.PU_NETWORK_FLAG;
                oraPrm[7] = new OracleParameter("v_ACT_CODE", OracleDbType.Varchar2);
                oraPrm[7].Value = PlanUnitNewjob.PU_ACT_CODE;
                oraPrm[8] = new OracleParameter("v_SUP_DURATION", OracleDbType.Int32);
                oraPrm[8].Value = PlanUnitNewjob.PU_SUP_DURATION;
                oraPrm[9] = new OracleParameter("v_BILL_RATE", OracleDbType.Varchar2);
                oraPrm[9].Value = PlanUnitNewjob.PU_BILL_RATE;

                string ok = "";

                ok = tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                // System.Diagnostics.Debug.WriteLine(success);
                if (ok == "ok")
                {
                    return success;
                }
                else
                {
                    return success = false;
                }
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        public bool Delete_PlanUnit(string CanCode, string Bill_Rate)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "DELETE FROM WV_PU_MAST WHERE PU_ID = '" + CanCode + "' AND BILL_RATE='" + Bill_Rate + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        //#endregion

        //----------------------------------------------PUMM

        //#region PUMM

        public class PUMM
        {
            public string PU_ID;
            public string PU_DESC;
            public string MAT_ID;
            public string MAT_NAME;
            public string MAT_QTY;
        }

        public class OSPPUMM
        {
            public int max;
            public List<PUMM> PUMMList = new List<PUMM>();
        }

        [WebMethod]
        public OSPPUMM GetOSPPUMM(int start, int size, string searchKey)
        {
            OSPPUMM osp = new OSPPUMM();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null)
                {
                    int count = (from c in ctxData.WV_PUMM_MAST
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_PUMM_MAST
                                 orderby d.PU_ID
                                 select new { d.PU_ID, d.PU_DESC, d.MAT_ID, d.MAT_NAME, d.MAT_QTY }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PUMM PUMM = new PUMM();
                        PUMM.PU_ID = a.PU_ID;
                        PUMM.PU_DESC = a.PU_DESC;
                        PUMM.MAT_ID = a.MAT_ID;
                        PUMM.MAT_NAME = a.MAT_NAME;
                        PUMM.MAT_QTY = a.MAT_QTY.ToString();

                        osp.PUMMList.Add(PUMM);

                      //  System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
                else
                {
                    int count = (from c in ctxData.WV_PUMM_MAST
                                 where c.PU_ID.Contains(searchKey) || c.MAT_ID.Contains(searchKey)
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_PUMM_MAST
                                 where d.PU_ID.Contains(searchKey) || d.MAT_ID.Contains(searchKey)
                                 orderby d.PU_ID
                                 select new { d.PU_ID, d.PU_DESC, d.MAT_ID, d.MAT_NAME, d.MAT_QTY }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PUMM PUMM = new PUMM();
                        PUMM.PU_ID = a.PU_ID;
                        PUMM.PU_DESC = a.PU_DESC;
                        PUMM.MAT_ID = a.MAT_ID;
                        PUMM.MAT_NAME = a.MAT_NAME;
                        PUMM.MAT_QTY = a.MAT_QTY.ToString();

                        osp.PUMMList.Add(PUMM);

                        //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);                    
                    }
                }
            }

            return osp;
        }

        public bool UpdatePUMM(PUMM PUMM, string PU_ID)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_PUMM_MAST SET PU_DESC = '" + PUMM.PU_DESC +
                "', MAT_ID = '" + PUMM.MAT_ID +
                "', MAT_NAME = '" + PUMM.MAT_NAME +
                "', MAT_QTY = '" + PUMM.MAT_QTY +
                "' WHERE PU_ID ='" + PU_ID + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddPUMM(PUMM PUMM)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_PUMM_MAST (PU_ID, PU_DESC, MAT_ID, MAT_NAME, MAT_QTY ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[5];

                oraPrm[0] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = PUMM.PU_ID;
                oraPrm[1] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                oraPrm[1].Value = PUMM.PU_DESC;
                oraPrm[2] = new OracleParameter("v_MAT_ID", OracleDbType.Varchar2);
                oraPrm[2].Value = PUMM.MAT_ID;
                oraPrm[3] = new OracleParameter("v_MAT_NAME", OracleDbType.Varchar2);
                oraPrm[3].Value = PUMM.MAT_NAME;
                oraPrm[4] = new OracleParameter("v_MAT_QTY", OracleDbType.Int32);
                oraPrm[4].Value = PUMM.MAT_QTY;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
               // System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        public bool Delete_PUMM(string PU_ID)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

           // System.Diagnostics.Debug.Write("#####");
            //System.Diagnostics.Debug.WriteLine(PU_ID);

            sqlCmd = "DELETE FROM WV_PUMM_MAST " +
                " WHERE PU_ID ='" + PU_ID + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        //#endregion

        //----------------------------------------------PURM

        #region PURM

        public class PURM
        {
            public string PU_ID;
            public string PU_DESC;
            public string INST_CODE;
            public string INST_NAME;
            public string CTRT_SUP_QTY;
            public string SUB_LAB_QTY;
            public string IMPL_LAB_QTY;
            public string DUR_SPVR;
            public string DUR_IMPL;
        }

        public class OSPPURM
        {
            public int max;
            public List<PURM> PURMList = new List<PURM>();
        }

        [WebMethod]
        public OSPPURM GetOSPPURM(int start, int size, string searchKey)
        {
            OSPPURM osp = new OSPPURM();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null)
                {
                    int count = (from c in ctxData.WV_PURM_MAST
                                 select c).Count();

                   // System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_PURM_MAST
                                 orderby d.PU_ID
                                 select new { d.PU_ID, d.PU_DESC, d.INST_CODE, d.INST_NAME, d.CTRT_SUP_QTY, d.SUB_LAB_QTY, d.IMPL_LAB_QTY, d.DUR_SPVR, d.DUR_IMPL }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PURM PURM = new PURM();
                        PURM.PU_ID = a.PU_ID;
                        PURM.PU_DESC = a.PU_DESC;
                        PURM.INST_CODE = a.INST_CODE;
                        PURM.INST_NAME = a.INST_NAME;
                        PURM.CTRT_SUP_QTY = a.CTRT_SUP_QTY.ToString();
                        PURM.SUB_LAB_QTY = a.SUB_LAB_QTY.ToString();
                        PURM.IMPL_LAB_QTY = a.IMPL_LAB_QTY.ToString();
                        PURM.DUR_SPVR = a.DUR_SPVR.ToString();
                        PURM.DUR_IMPL = a.DUR_IMPL.ToString();

                        osp.PURMList.Add(PURM);

                        //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
                else
                {
                    int count = (from c in ctxData.WV_PURM_MAST
                                 where c.PU_ID.Contains(searchKey)
                                 select c).Count();

                   // System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_PURM_MAST
                                 where d.PU_ID.Contains(searchKey)
                                 orderby d.PU_ID
                                 select new { d.PU_ID, d.PU_DESC, d.INST_CODE, d.INST_NAME, d.CTRT_SUP_QTY, d.SUB_LAB_QTY, d.IMPL_LAB_QTY, d.DUR_SPVR, d.DUR_IMPL }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PURM PURM = new PURM();
                        PURM.PU_ID = a.PU_ID;
                        PURM.PU_DESC = a.PU_DESC;
                        PURM.INST_CODE = a.INST_CODE;
                        PURM.INST_NAME = a.INST_NAME;
                        PURM.CTRT_SUP_QTY = a.CTRT_SUP_QTY.ToString();
                        PURM.SUB_LAB_QTY = a.SUB_LAB_QTY.ToString();
                        PURM.IMPL_LAB_QTY = a.IMPL_LAB_QTY.ToString();
                        PURM.DUR_SPVR = a.DUR_SPVR.ToString();
                        PURM.DUR_IMPL = a.DUR_IMPL.ToString();

                        osp.PURMList.Add(PURM);

                       // System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
            }

            return osp;
        }

        public bool UpdatePURM(PURM PURM, string PU_ID)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_PURM_MAST SET PU_DESC = '" + PURM.PU_DESC +
                "', INST_CODE = '" + PURM.INST_CODE +
                "', INST_NAME = '" + PURM.INST_NAME +
                "', CTRT_SUP_QTY = '" + PURM.CTRT_SUP_QTY +
                "', SUB_LAB_QTY = '" + PURM.SUB_LAB_QTY +
                "', IMPL_LAB_QTY = '" + PURM.IMPL_LAB_QTY +
                "', DUR_SPVR = '" + PURM.DUR_SPVR +
                "', DUR_IMPL = '" + PURM.DUR_IMPL +
                "' WHERE PU_ID ='" + PU_ID + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddPURM(PURM PURM)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_PURM_MAST (PU_ID, PU_DESC, INST_CODE, INST_NAME, CTRT_SUP_QTY, SUB_LAB_QTY, IMPL_LAB_QTY, DUR_SPVR, DUR_IMPL ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[9];

                oraPrm[0] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = PURM.PU_ID;
                oraPrm[1] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                oraPrm[1].Value = PURM.PU_DESC;
                oraPrm[2] = new OracleParameter("v_INST_CODE", OracleDbType.Varchar2);
                oraPrm[2].Value = PURM.INST_CODE;
                oraPrm[3] = new OracleParameter("v_INST_NAME", OracleDbType.Varchar2);
                oraPrm[3].Value = PURM.INST_NAME;
                oraPrm[4] = new OracleParameter("v_CTRT_SUP_QTY", OracleDbType.Int32);
                oraPrm[4].Value = PURM.CTRT_SUP_QTY;
                oraPrm[5] = new OracleParameter("v_SUB_LAB_QTY", OracleDbType.Int32);
                oraPrm[5].Value = PURM.SUB_LAB_QTY;
                oraPrm[6] = new OracleParameter("v_IMPL_LAB_QTY", OracleDbType.Int32);
                oraPrm[6].Value = PURM.IMPL_LAB_QTY;
                oraPrm[7] = new OracleParameter("v_DUR_SPVR", OracleDbType.Int32);
                oraPrm[7].Value = PURM.DUR_SPVR;
                oraPrm[8] = new OracleParameter("v_DUR_IMPL", OracleDbType.Int32);
                oraPrm[8].Value = PURM.DUR_IMPL;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                //System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        public bool Delete_PURM(string PU_ID)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

           // System.Diagnostics.Debug.Write("#####");
           // System.Diagnostics.Debug.WriteLine(PU_ID);

            sqlCmd = "DELETE FROM WV_PURM_MAST " +
                " WHERE PU_ID ='" + PU_ID + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        #endregion

        //----------------------------------------------PUFRM

        #region PUFRM

        public class PUFRM
        {
            public string PU_ID;
            public string PU_DESC;
            public string FEAT_TYPE;
            public string QTY_IND;
            public string MUL_FAC;
            public string ATT1;
            public string ATT2;
            public string ATT3;
            public string ATT4;
            public string ATT5;
            public string ATT6;
            public string ATT7;
            public string ATT8;
            public string ATT9;
            public string ATT10;
            public string ATT11;
            public string ATT12;
        }

        public class OSPPUFRM
        {
            public int max;
            public List<PUFRM> PUFRMList = new List<PUFRM>();
        }

        [WebMethod]
        public OSPPUFRM GetOSPPUFRM(int start, int size, string searchKey)
        {
            OSPPUFRM osp = new OSPPUFRM();

            using (Entities ctxData = new Entities())
            {
                if (searchKey == null)
                {
                    int count = (from c in ctxData.WV_PUFRM_MAST
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_PUFRM_MAST
                                 orderby d.PU_ID
                                 select new { d.PU_ID, d.PU_DESC, d.FEAT_TYPE, d.QTY_IND, d.MUL_FAC, d.ATT1, d.ATT2, d.ATT3, d.ATT4, d.ATT5, d.ATT6, d.ATT7, d.ATT8, d.ATT9, d.ATT10, d.ATT11, d.ATT12 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PUFRM PUFRM = new PUFRM();
                        PUFRM.PU_ID = a.PU_ID;
                        PUFRM.PU_DESC = a.PU_DESC;
                        PUFRM.FEAT_TYPE = a.FEAT_TYPE;
                        PUFRM.QTY_IND = a.QTY_IND;
                        PUFRM.MUL_FAC = a.MUL_FAC.ToString();
                        PUFRM.ATT1 = a.ATT1;
                        PUFRM.ATT2 = a.ATT2;
                        PUFRM.ATT3 = a.ATT3;
                        PUFRM.ATT4 = a.ATT4;
                        PUFRM.ATT5 = a.ATT5;
                        PUFRM.ATT6 = a.ATT6;
                        PUFRM.ATT7 = a.ATT7;
                        PUFRM.ATT8 = a.ATT8;
                        PUFRM.ATT9 = a.ATT9;
                        PUFRM.ATT10 = a.ATT10;
                        PUFRM.ATT11 = a.ATT11;
                        PUFRM.ATT12 = a.ATT12;

                        osp.PUFRMList.Add(PUFRM);

                        //System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
                else
                {
                    int count = (from c in ctxData.WV_PUFRM_MAST
                                 where c.PU_ID.Contains(searchKey) || c.ATT1.Contains(searchKey) || c.ATT2.Contains(searchKey) || c.ATT3.Contains(searchKey) || c.ATT4.Contains(searchKey) || c.ATT5.Contains(searchKey) || c.ATT6.Contains(searchKey) || c.ATT7.Contains(searchKey) || c.ATT8.Contains(searchKey) || c.ATT9.Contains(searchKey) || c.ATT10.Contains(searchKey) || c.ATT11.Contains(searchKey) || c.ATT12.Contains(searchKey)
                                 select c).Count();

                    //System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;

                    var query = (from d in ctxData.WV_PUFRM_MAST
                                 where d.PU_ID.Contains(searchKey) || d.ATT1.Contains(searchKey) || d.ATT2.Contains(searchKey) || d.ATT3.Contains(searchKey) || d.ATT4.Contains(searchKey) || d.ATT5.Contains(searchKey) || d.ATT6.Contains(searchKey) || d.ATT7.Contains(searchKey) || d.ATT8.Contains(searchKey) || d.ATT9.Contains(searchKey) || d.ATT10.Contains(searchKey) || d.ATT11.Contains(searchKey) || d.ATT12.Contains(searchKey)
                                 orderby d.PU_ID
                                 select new { d.PU_ID, d.PU_DESC, d.FEAT_TYPE, d.QTY_IND, d.MUL_FAC, d.ATT1, d.ATT2, d.ATT3, d.ATT4, d.ATT5, d.ATT6, d.ATT7, d.ATT8, d.ATT9, d.ATT10, d.ATT11, d.ATT12 }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        PUFRM PUFRM = new PUFRM();
                        PUFRM.PU_ID = a.PU_ID;
                        PUFRM.PU_DESC = a.PU_DESC;
                        PUFRM.FEAT_TYPE = a.FEAT_TYPE;
                        PUFRM.QTY_IND = a.QTY_IND;
                        PUFRM.MUL_FAC = a.MUL_FAC.ToString();
                        PUFRM.ATT1 = a.ATT1;
                        PUFRM.ATT2 = a.ATT2;
                        PUFRM.ATT3 = a.ATT3;
                        PUFRM.ATT4 = a.ATT4;
                        PUFRM.ATT5 = a.ATT5;
                        PUFRM.ATT6 = a.ATT6;
                        PUFRM.ATT7 = a.ATT7;
                        PUFRM.ATT8 = a.ATT8;
                        PUFRM.ATT9 = a.ATT9;
                        PUFRM.ATT10 = a.ATT10;
                        PUFRM.ATT11 = a.ATT11;
                        PUFRM.ATT12 = a.ATT12;

                        osp.PUFRMList.Add(PUFRM);

                       // System.Diagnostics.Debug.WriteLine(a.PU_ID + " : " + a.PU_DESC);
                    }
                }
            }

            return osp;
        }

        public bool UpdatePUFRM(PUFRM PUFRM, string PU_ID)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_PUFRM_MAST SET PU_DESC = '" + PUFRM.PU_DESC +
                "', FEAT_TYPE = '" + PUFRM.FEAT_TYPE +
                "', QTY_IND = '" + PUFRM.QTY_IND +
                "', MUL_FAC = '" + PUFRM.MUL_FAC +
                "', ATT1 = '" + PUFRM.ATT1 +
                "', ATT2 = '" + PUFRM.ATT2 +
                "', ATT3 = '" + PUFRM.ATT3 +
                "', ATT4 = '" + PUFRM.ATT4 +
                "', ATT5 = '" + PUFRM.ATT5 +
                "', ATT6 = '" + PUFRM.ATT6 +
                "', ATT7 = '" + PUFRM.ATT7 +
                "', ATT8 = '" + PUFRM.ATT8 +
                "', ATT9 = '" + PUFRM.ATT9 +
                "', ATT10 = '" + PUFRM.ATT10 +
                "', ATT11 = '" + PUFRM.ATT11 +
                "', ATT12 = '" + PUFRM.ATT12 +
                "' WHERE PU_ID ='" + PUFRM.PU_ID + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddPUFRM(PUFRM PUFRM)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_PUFRM_MAST (PU_ID, PU_DESC, FEAT_TYPE, QTY_IND, MUL_FAC, ATT1, ATT2, ATT3, ATT4, ATT5, ATT6, ATT7, ATT8, ATT9, ATT10, ATT11, ATT12 ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[17];

                oraPrm[0] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                oraPrm[0].Value = PUFRM.PU_ID;
                oraPrm[1] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                oraPrm[1].Value = PUFRM.PU_DESC;
                oraPrm[2] = new OracleParameter("v_FEAT_TYPE", OracleDbType.Varchar2);
                oraPrm[2].Value = PUFRM.FEAT_TYPE;
                oraPrm[3] = new OracleParameter("v_QTY_IND", OracleDbType.Varchar2);
                oraPrm[3].Value = PUFRM.QTY_IND;
                oraPrm[4] = new OracleParameter("v_MUL_FAC", OracleDbType.Int32);
                oraPrm[4].Value = PUFRM.MUL_FAC;
                oraPrm[5] = new OracleParameter("v_ATT1", OracleDbType.Varchar2);
                oraPrm[5].Value = PUFRM.ATT1;
                oraPrm[6] = new OracleParameter("v_ATT2", OracleDbType.Varchar2);
                oraPrm[6].Value = PUFRM.ATT2;
                oraPrm[7] = new OracleParameter("v_ATT3", OracleDbType.Varchar2);
                oraPrm[7].Value = PUFRM.ATT3;
                oraPrm[8] = new OracleParameter("v_ATT4", OracleDbType.Varchar2);
                oraPrm[8].Value = PUFRM.ATT4;
                oraPrm[9] = new OracleParameter("v_ATT5", OracleDbType.Varchar2);
                oraPrm[9].Value = PUFRM.ATT5;
                oraPrm[10] = new OracleParameter("v_ATT6", OracleDbType.Varchar2);
                oraPrm[10].Value = PUFRM.ATT6;
                oraPrm[11] = new OracleParameter("v_ATT7", OracleDbType.Varchar2);
                oraPrm[11].Value = PUFRM.ATT7;
                oraPrm[12] = new OracleParameter("v_ATT8", OracleDbType.Varchar2);
                oraPrm[12].Value = PUFRM.ATT8;
                oraPrm[13] = new OracleParameter("v_ATT9", OracleDbType.Varchar2);
                oraPrm[13].Value = PUFRM.ATT9;
                oraPrm[14] = new OracleParameter("v_ATT10", OracleDbType.Varchar2);
                oraPrm[14].Value = PUFRM.ATT10;
                oraPrm[15] = new OracleParameter("v_ATT11", OracleDbType.Varchar2);
                oraPrm[15].Value = PUFRM.ATT11;
                oraPrm[16] = new OracleParameter("v_ATT12", OracleDbType.Varchar2);
                oraPrm[16].Value = PUFRM.ATT12;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
               // System.Diagnostics.Debug.WriteLine(success);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        public bool Delete_PUFRM(string PU_ID)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

           // System.Diagnostics.Debug.Write("#####");
            //System.Diagnostics.Debug.WriteLine(PU_ID);

            sqlCmd = "DELETE FROM WV_PUFRM_MAST" +
                " WHERE PU_ID ='" + PU_ID + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        #endregion


        //----------------------------------------------BOQ_JKH

        #region BOQ_JKH

        public class BOQ_JKH
        {
            public string x_EXC_ABB;
            public string x_PU_DESC;
            public string x_YEAR_INSTALL;
            public string x_SCH_TYPE;
            public string x_SCH_NO;
            public string x_SCHEME_NAME;
            public string x_PU_ID;
            public string x_BQ_MAT_PRICE;
            public string x_BQ_INSTALL_PRICE;
            public string x_PU_QTY;
            public string x_OLD_MAT_PR;
            public string x_OLD_INSTALL_PR;
            public string x_CONSTRUCT_BY;
            public string x_RECVR_QTY;
            public string x_RATE_INDICATOR;
        }

        public class OSPBOQ_JKH
        {
            public int max;
            public List<BOQ_JKH> BOQ_JKHList = new List<BOQ_JKH>();
        }

        [WebMethod]
        public OSPBOQ_JKH GetOSPBOQ_JKH(int start, int size)
        {
            OSPBOQ_JKH osp = new OSPBOQ_JKH();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_BOQ_DATA
                             select c).Count();

                //System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;

                var query = (from d in ctxData.WV_BOQ_DATA
                             orderby d.EXC_ABB
                             select new { d.EXC_ABB, d.PU_DESC, d.YEAR_INSTALL, d.SCH_TYPE, d.SCH_NO, d.SCHEME_NAME, d.PU_ID, d.BQ_MAT_PRICE, d.BQ_INSTALL_PRICE, d.PU_QTY, d.OLD_MAT_PR, d.OLD_INSTALL_PR, d.CONSTRUCT_BY, d.RECVR_QTY, d.RATE_INDICATOR }).Skip(start).Take(size);

                foreach (var a in query)
                {
                    BOQ_JKH BOQ_JKH = new BOQ_JKH();

                    BOQ_JKH.x_EXC_ABB = a.EXC_ABB;
                    BOQ_JKH.x_PU_DESC = a.PU_DESC;
                    BOQ_JKH.x_YEAR_INSTALL = a.YEAR_INSTALL.ToString();
                    BOQ_JKH.x_SCH_TYPE = a.SCH_TYPE.ToString();
                    BOQ_JKH.x_SCH_NO = a.SCH_NO;
                    BOQ_JKH.x_SCHEME_NAME = a.SCHEME_NAME;
                    BOQ_JKH.x_PU_ID = a.PU_ID;
                    BOQ_JKH.x_BQ_MAT_PRICE = a.BQ_MAT_PRICE.ToString();
                    BOQ_JKH.x_BQ_INSTALL_PRICE = a.BQ_INSTALL_PRICE.ToString();
                    BOQ_JKH.x_PU_QTY = a.PU_QTY.ToString();
                    BOQ_JKH.x_OLD_MAT_PR = a.OLD_MAT_PR.ToString();
                    BOQ_JKH.x_OLD_INSTALL_PR = a.OLD_INSTALL_PR.ToString();
                    BOQ_JKH.x_CONSTRUCT_BY = a.CONSTRUCT_BY;
                    BOQ_JKH.x_RECVR_QTY = a.RECVR_QTY.ToString();
                    BOQ_JKH.x_RATE_INDICATOR = a.RATE_INDICATOR;
                    osp.BOQ_JKHList.Add(BOQ_JKH);

                    //System.Diagnostics.Debug.WriteLine(a.EXC_ABB + " : " + a.PU_DESC);
                }
            }

            return osp;
        }

        public bool UpdateBOQ_JKH(BOQ_JKH BOQ_JKH, string EXC_ABB)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE BOQ_DATA SET PU_DESC = '" + BOQ_JKH.x_PU_DESC +
                "', YEAR_INSTALL = '" + BOQ_JKH.x_YEAR_INSTALL +
                "', SCH_TYPE = '" + BOQ_JKH.x_SCH_TYPE +
                "', SCH_NO = '" + BOQ_JKH.x_SCH_NO +
                "', SCHEME_NAME = '" + BOQ_JKH.x_SCHEME_NAME +
                "', PU_ID = '" + BOQ_JKH.x_PU_ID +
                "', BQ_MAT_PRICE = '" + BOQ_JKH.x_BQ_MAT_PRICE +
                "', BQ_INSTALL_PRICE = '" + BOQ_JKH.x_BQ_INSTALL_PRICE +
                "', PU_QTY = '" + BOQ_JKH.x_PU_QTY +
                "', OLD_MAT_PR = '" + BOQ_JKH.x_OLD_MAT_PR +
                "', OLD_INSTALL_PR = '" + BOQ_JKH.x_OLD_INSTALL_PR +
                "', CONSTRUCT_BY = '" + BOQ_JKH.x_CONSTRUCT_BY +
                "', RECVR_QTY = '" + BOQ_JKH.x_RECVR_QTY +
                "', RATE_INDICATOR = '" + BOQ_JKH.x_RATE_INDICATOR +
                "' WHERE EXC_ABB ='" + EXC_ABB + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddBOQ_JKH(BOQ_JKH BOQ_JKH)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_EXC_ABB);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_PU_DESC);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_YEAR_INSTALL);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_SCH_TYPE);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_SCH_NO);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_SCHEME_NAME);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_PU_ID);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_BQ_MAT_PRICE);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_BQ_INSTALL_PRICE);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_PU_QTY);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_OLD_MAT_PR);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_OLD_INSTALL_PR);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_CONSTRUCT_BY);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_RECVR_QTY);
                System.Diagnostics.Debug.WriteLine(BOQ_JKH.x_RATE_INDICATOR);

                OracleParameter[] oraPrm = new OracleParameter[15];

                oraPrm[0] = new OracleParameter("v_EXC_ABB", OracleDbType.Varchar2);
                oraPrm[0].Value = BOQ_JKH.x_EXC_ABB;
                oraPrm[1] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
                oraPrm[1].Value = BOQ_JKH.x_PU_DESC;
                oraPrm[2] = new OracleParameter("v_YEAR_INSTALL", OracleDbType.Varchar2);
                oraPrm[2].Value = BOQ_JKH.x_YEAR_INSTALL;
                oraPrm[3] = new OracleParameter("v_SCH_TYPE", OracleDbType.Varchar2);
                oraPrm[3].Value = BOQ_JKH.x_SCH_TYPE;
                oraPrm[4] = new OracleParameter("v_SCH_NO", OracleDbType.Varchar2);
                oraPrm[4].Value = BOQ_JKH.x_SCH_NO;
                oraPrm[5] = new OracleParameter("v_SCHEME_NAME", OracleDbType.Varchar2);
                oraPrm[5].Value = BOQ_JKH.x_SCHEME_NAME;
                oraPrm[6] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
                oraPrm[6].Value = BOQ_JKH.x_PU_ID;
                oraPrm[7] = new OracleParameter("v_BQ_MAT_PRICE", OracleDbType.Varchar2);
                oraPrm[7].Value = BOQ_JKH.x_BQ_MAT_PRICE;
                oraPrm[8] = new OracleParameter("v_BQ_INSTALL_PRICE", OracleDbType.Varchar2);
                oraPrm[8].Value = BOQ_JKH.x_BQ_INSTALL_PRICE;
                oraPrm[9] = new OracleParameter("v_PU_QTY", OracleDbType.Varchar2);
                oraPrm[9].Value = BOQ_JKH.x_PU_QTY;
                oraPrm[10] = new OracleParameter("v_OLD_MAT_PR", OracleDbType.Varchar2);
                oraPrm[10].Value = BOQ_JKH.x_OLD_MAT_PR;
                oraPrm[11] = new OracleParameter("v_OLD_INSTALL_PR", OracleDbType.Varchar2);
                oraPrm[11].Value = BOQ_JKH.x_OLD_INSTALL_PR;
                oraPrm[12] = new OracleParameter("v_CONSTRUCT_BY", OracleDbType.Varchar2);
                oraPrm[12].Value = BOQ_JKH.x_CONSTRUCT_BY;
                oraPrm[13] = new OracleParameter("v_RECVR_QTY", OracleDbType.Varchar2);
                oraPrm[13].Value = BOQ_JKH.x_RECVR_QTY;
                oraPrm[14] = new OracleParameter("v_RATE_INDICATOR", OracleDbType.Varchar2);
                oraPrm[14].Value = BOQ_JKH.x_RATE_INDICATOR;

                tool.ExecuteStored(connString, "webview.CREATE_BOQ_JKH",
                    CommandType.StoredProcedure, oraPrm, false);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        public bool Delete_BOQ_JKH(string EXC_ABB)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            //System.Diagnostics.Debug.Write("#####");
            //System.Diagnostics.Debug.WriteLine(EXC_ABB);

            sqlCmd = "DELETE FROM BOQ_DATA " +
                " WHERE EXC_ABB ='" + EXC_ABB + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        #endregion
        //RKC2

        #region SendUser

        //////////// USER SEND ////////////

        public class UserSend
        {
            public decimal Id;
            public string Name;
            public string GroupId;
        }

        public class OSPUserSend
        {
            public int max;
            public List<UserSend> UserSendList = new List<UserSend>();
        }

        public List<UserSendModel.User> getUser(int start, int size)
        {
            OSPUserSend osp = new OSPUserSend();
            List<UserSendModel.User> list = new List<UserSendModel.User>();
            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_USER
                             select c).Count();

               // System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;

                var query = (from d in ctxData.WV_USER
                             orderby d.USER_ID
                             select new { d.USER_ID, d.USERNAME, d.GROUPID }).Skip(start).Take(size);


                foreach (var a in query)
                {
                    UserSendModel.User UserSend = new UserSendModel.User();
                    UserSend.Id = a.USER_ID;
                    UserSend.Name =a.USERNAME;
                    UserSend.GroupId = a.GROUPID;

                    list.Add(UserSend);

                   // System.Diagnostics.Debug.WriteLine(a.USER_ID + " : " + a.USERNAME);
                }
            }
            return list;
        }

        [WebMethod]
        public OSPUserSend GetOSPUserSend(int start, int size)
        {
            OSPUserSend osp = new OSPUserSend();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_USER
                             select c).Count();

               // System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;

                var query = (from d in ctxData.WV_USER
                             orderby d.USER_ID
                             select new { d.USER_ID, d.USERNAME, d.GROUPID }).Skip(start).Take(size);

                foreach (var a in query)
                {
                    UserSend UserSend = new UserSend();
                    UserSend.Id = a.USER_ID;
                    UserSend.Name = a.USERNAME;
                    UserSend.GroupId = a.GROUPID;

                    osp.UserSendList.Add(UserSend);

                    //System.Diagnostics.Debug.WriteLine(a.USER_ID + " : " + a.USERNAME);
                }
            }


            return osp;
        }

        /// ///////////////////////////////

        #endregion

        #region Handover

        public class HandoverUser
        {
            public decimal Id;
            public string Name;
            public string GroupId;
        }

        public class HandoverUsers
        {
            public int max;
            public List<HandoverUser> HandoverUserList = new List<HandoverUser>();
        }

        public List<HandoverModel.user> GetHandoverUser(int start, int size, string id, string grpApprovalId)
        {
            HandoverUsers hand = new HandoverUsers();
            List<HandoverModel.user> list = new List<HandoverModel.user>();
            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_USER
                             select c).Count();

                hand.max = count;
                
                if (size == 1001)
                {
                    var query = (from d in ctxData.WV_USER
                                    join fx in ctxData.WV_USER_APPROVE on d.USERNAME equals fx.APPROVAL_USER
                                    where d.GROUPID == grpApprovalId && fx.JOB_ID == id
                                    orderby d.USER_ID
                                    select new { d.USER_ID, d.USERNAME, d.GROUPID }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        HandoverModel.user HandoverUser = new HandoverModel.user();
                        HandoverUser.Id = a.USER_ID;
                        HandoverUser.Name = "Approval Sent - " + a.USERNAME;
                        HandoverUser.GroupId = a.GROUPID;

                        list.Add(HandoverUser);

                        //System.Diagnostics.Debug.WriteLine(a.USER_ID + " : " + a.USERNAME);
                    }   
                }
                else {
                    var query = (from d in ctxData.WV_USER
                                    where d.GROUPID == grpApprovalId
                                    orderby d.USER_ID
                                    select new { d.USER_ID, d.USERNAME, d.GROUPID }).Skip(start).Take(size);

                    foreach (var a in query)
                    {
                        HandoverModel.user HandoverUser = new HandoverModel.user();
                        HandoverUser.Id = a.USER_ID;
                        HandoverUser.Name = a.USERNAME;
                        HandoverUser.GroupId = a.GROUPID;

                        list.Add(HandoverUser);

                        //System.Diagnostics.Debug.WriteLine(a.USER_ID + " : " + a.USERNAME);
                    }
                }
                
            }
            return list;
        }

        //[WebMethod]
        //public List<HandoverModel.user> GetHandoverUsers(int start, int size)
        //{
        ////public HandoverUsers GetHandoverUsers(int start, int size)
        ////{
        //    HandoverUsers hand = new HandoverUsers();
        //    List<HandoverModel.user> list = new List<HandoverModel.user>();
        //    using (Entities ctxData = new Entities())
        //    {
        //        int count = (from c in ctxData.WV_USER
        //                     select c).Count();

        //        System.Diagnostics.Debug.WriteLine(count);
        //        hand.max = count;

        //        var query = (from d in ctxData.WV_USER
        //                     join fx in ctxData.WV_USER_APPROVE on d.USERNAME equals fx.APPROVAL_USER
        //                     where d.GROUPID == "10"
        //                     orderby d.USER_ID
        //                     select new { d.USER_ID, d.USERNAME, d.GROUPID }).Skip(start).Take(size);

        //        foreach (var a in query)
        //        {
        //            HandoverUser handoverUser = new HandoverUser();
        //            handoverUser.Id = a.USER_ID;
        //            handoverUser.Name = a.USERNAME;
        //            handoverUser.GroupId = a.GROUPID;

        //            hand.HandoverUserList.Add(handoverUser);

        //            System.Diagnostics.Debug.WriteLine(a.USER_ID + " : " + a.USERNAME);
        //        }
        //    }


        //    return list;
        //}

        #endregion

        //----------------------------------------------BOQ_MAIN

        #region BOQ_MAIN

        //public class BOQ_MAIN
        //{
        //    public string x_EXC_ABB;
        //    public string x_YEAR_INSTALL;
        //    public string x_SCH_TYPE;
        //    public string x_SCH_NO;
        //    public string x_SCHEME_NAME;
        //    public string x_PU_ID;
        //    public string x_BQ_MAT_PRICE;
        //    public string x_BQ_INSTALL_PRICE;
        //    public string x_PU_QTY;
        //    public string x_RATE_INDICATOR;
        //}

        //public class BOQ_MAIN_EXCEL
        //{
        //    public string x_TOTAL_PRICE;
        //    public string x_INSTALL_VALUE;
        //    public string x_MATERIAL_VALUE;
        //    public string x_TOTAL_VALUE;
        //    public string x_PU_DESC;
        //    public string x_PU_ID;
        //    public string x_BQ_MAT_PRICE;
        //    public string x_BQ_INSTALL_PRICE;
        //    public string x_PU_QTY;
        //    public string x_PU_UOM;
        //    public string x_RATE_INDICATOR;
        //    public string x_INSTALL_VALUE_TOTAL;
        //    public string x_MATERIAL_VALUE_TOTAL;
        //    public string x_TOTAL_VALUE_TOTAL;
        //    public string x_TOTAL_ROW;
        //}

        //public class OSPBOQ_MAIN
        //{
        //    public int max;
        //    public List<BOQ_MAIN> BOQ_MAINList = new List<BOQ_MAIN>();
        //}

        //public class OSPBOQ_MAIN_EXCEL
        //{
        //    public int max;
        //    public List<BOQ_MAIN_EXCEL> BOQ_MAIN_Excel = new List<BOQ_MAIN_EXCEL>();
        //}

        //[WebMethod]
        //public OSPBOQ_MAIN GetOSPBOQ_MAIN(int start, int size, string searchKey)
        //{
        //    OSPBOQ_MAIN osp = new OSPBOQ_MAIN();

        //    using (Entities ctxData = new Entities())
        //    {
        //        if (searchKey == null)
        //        {
        //            int count = (from c in ctxData.WV_BQ_DATA
        //                         select c).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count;

        //            var query = (from d in ctxData.WV_BQ_DATA
        //                         orderby d.SCHEME_NAME
        //                         select new { d.EXC_ABB, d.YEAR_INSTALL, d.SCH_TYPE, d.SCH_NO, d.SCHEME_NAME, d.PU_ID, d.BQ_MAT_PRICE, d.BQ_INSTALL_PRICE, d.PU_QTY, d.RATE_INDICATOR }).Skip(start).Take(size);

        //            foreach (var a in query)
        //            {
        //                BOQ_MAIN BOQ_MAIN = new BOQ_MAIN();

        //                BOQ_MAIN.x_EXC_ABB = a.EXC_ABB;
        //                BOQ_MAIN.x_YEAR_INSTALL = a.YEAR_INSTALL.ToString();
        //                BOQ_MAIN.x_SCH_TYPE = a.SCH_TYPE.ToString();
        //                BOQ_MAIN.x_SCH_NO = a.SCH_NO;
        //                BOQ_MAIN.x_SCHEME_NAME = a.SCHEME_NAME;
        //                BOQ_MAIN.x_PU_ID = a.PU_ID;
        //                BOQ_MAIN.x_BQ_MAT_PRICE = a.BQ_MAT_PRICE.ToString();
        //                BOQ_MAIN.x_BQ_INSTALL_PRICE = a.BQ_INSTALL_PRICE.ToString();
        //                BOQ_MAIN.x_PU_QTY = a.PU_QTY.ToString();
        //                BOQ_MAIN.x_RATE_INDICATOR = a.RATE_INDICATOR;
        //                osp.BOQ_MAINList.Add(BOQ_MAIN);

        //                System.Diagnostics.Debug.WriteLine(a.EXC_ABB);
        //            }
        //        }
        //        else
        //        {
        //            int count = (from c in ctxData.WV_BQ_DATA
        //                         where searchKey == c.SCHEME_NAME
        //                         select c).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count;

        //            var query = (from d in ctxData.WV_BQ_DATA
        //                         where searchKey == d.SCHEME_NAME
        //                         orderby d.SCHEME_NAME
        //                         select new { d.EXC_ABB, d.YEAR_INSTALL, d.SCH_TYPE, d.SCH_NO, d.SCHEME_NAME, d.PU_ID, d.BQ_MAT_PRICE, d.BQ_INSTALL_PRICE, d.PU_QTY, d.RATE_INDICATOR }).Skip(start).Take(size);

        //            foreach (var a in query)
        //            {
        //                BOQ_MAIN BOQ_MAIN = new BOQ_MAIN();

        //                BOQ_MAIN.x_EXC_ABB = a.EXC_ABB;
        //                BOQ_MAIN.x_YEAR_INSTALL = a.YEAR_INSTALL.ToString();
        //                BOQ_MAIN.x_SCH_TYPE = a.SCH_TYPE.ToString();
        //                BOQ_MAIN.x_SCH_NO = a.SCH_NO;
        //                BOQ_MAIN.x_SCHEME_NAME = a.SCHEME_NAME;
        //                BOQ_MAIN.x_PU_ID = a.PU_ID;
        //                BOQ_MAIN.x_BQ_MAT_PRICE = a.BQ_MAT_PRICE.ToString();
        //                BOQ_MAIN.x_BQ_INSTALL_PRICE = a.BQ_INSTALL_PRICE.ToString();
        //                BOQ_MAIN.x_PU_QTY = a.PU_QTY.ToString();
        //                BOQ_MAIN.x_RATE_INDICATOR = a.RATE_INDICATOR;
        //                osp.BOQ_MAINList.Add(BOQ_MAIN);

        //                System.Diagnostics.Debug.WriteLine(a.EXC_ABB);
        //            }
        //        }
        //    }

        //    return osp;
        //}

        //[WebMethod]
        //public OSPBOQ_MAIN_EXCEL GetOSPBOQ_MAIN_Excel(int start, int size, string searchKey)
        //{
        //    OSPBOQ_MAIN_EXCEL osp = new OSPBOQ_MAIN_EXCEL();
        //    decimal INS_VAL = 0;
        //    decimal MAT_VAL = 0;
        //    decimal TOT_VAL = 0;

        //    using (Entities ctxData = new Entities())
        //    {
        //        if (searchKey == null)
        //        {
        //            int count = (from c in ctxData.WV_BQ_DATA
        //                         select c).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count;

        //            var query = (from bq in ctxData.WV_BQ_DATA
        //                         from pu in ctxData.WV_BQ_PU_MAST
        //                         where bq.PU_ID == pu.PU_ID
        //                         orderby bq.SCHEME_NAME
        //                         select new
        //                         {
        //                             bq.EXC_ABB,
        //                             bq.YEAR_INSTALL,
        //                             bq.SCH_TYPE,
        //                             bq.SCH_NO,
        //                             bq.SCHEME_NAME,
        //                             bq_id = bq.PU_ID,
        //                             bq.BQ_MAT_PRICE,
        //                             bq.BQ_INSTALL_PRICE,
        //                             bq.PU_QTY,
        //                             bq.RATE_INDICATOR,
        //                             pu_id = pu.PU_ID,
        //                             pu.PU_DESC,
        //                             pu.PU_UOM
        //                         }).Skip(start).Take(size);



        //            int row_count = (from bq in ctxData.WV_BQ_DATA
        //                             from pu in ctxData.WV_BQ_PU_MAST
        //                             where bq.PU_ID == pu.PU_ID
        //                             select bq).Count();

        //            foreach (var a in query)
        //            {
        //                BOQ_MAIN_EXCEL BOQ_MAIN_EXCEL = new BOQ_MAIN_EXCEL();

        //                BOQ_MAIN_EXCEL.x_TOTAL_PRICE = (a.BQ_INSTALL_PRICE + a.BQ_MAT_PRICE).ToString();
        //                BOQ_MAIN_EXCEL.x_INSTALL_VALUE = (a.BQ_INSTALL_PRICE * a.PU_QTY).ToString();
        //                BOQ_MAIN_EXCEL.x_MATERIAL_VALUE = (a.BQ_MAT_PRICE * a.PU_QTY).ToString();
        //                BOQ_MAIN_EXCEL.x_TOTAL_VALUE = ((a.BQ_INSTALL_PRICE * a.PU_QTY) + (a.BQ_MAT_PRICE * a.PU_QTY)).ToString();
        //                BOQ_MAIN_EXCEL.x_PU_DESC = a.PU_DESC; // PLANT UNIT
        //                BOQ_MAIN_EXCEL.x_PU_ID = a.bq_id;
        //                BOQ_MAIN_EXCEL.x_PU_UOM = a.PU_UOM;
        //                BOQ_MAIN_EXCEL.x_BQ_MAT_PRICE = a.BQ_MAT_PRICE.ToString();
        //                BOQ_MAIN_EXCEL.x_BQ_INSTALL_PRICE = a.BQ_INSTALL_PRICE.ToString();
        //                BOQ_MAIN_EXCEL.x_PU_QTY = a.PU_QTY.ToString();
        //                BOQ_MAIN_EXCEL.x_RATE_INDICATOR = a.RATE_INDICATOR;

        //                INS_VAL = INS_VAL + (a.BQ_INSTALL_PRICE * a.PU_QTY);
        //                BOQ_MAIN_EXCEL.x_INSTALL_VALUE_TOTAL = INS_VAL.ToString();

        //                MAT_VAL = MAT_VAL + (a.BQ_MAT_PRICE * a.PU_QTY);
        //                BOQ_MAIN_EXCEL.x_MATERIAL_VALUE_TOTAL = MAT_VAL.ToString();

        //                TOT_VAL = TOT_VAL + ((a.BQ_INSTALL_PRICE * a.PU_QTY) + (a.BQ_MAT_PRICE * a.PU_QTY));
        //                BOQ_MAIN_EXCEL.x_TOTAL_VALUE_TOTAL = TOT_VAL.ToString();

        //                BOQ_MAIN_EXCEL.x_TOTAL_ROW = row_count.ToString();

        //                osp.BOQ_MAIN_Excel.Add(BOQ_MAIN_EXCEL);
        //                System.Diagnostics.Debug.WriteLine(a.pu_id);
        //            }
        //        }

        //    }

        //    return osp;
        //}

        //public bool UpdateBOQ_MAIN(BOQ_MAIN BOQ_MAIN, string SCHEME_NAME)
        //{
        //    Tools tool = new Tools();
        //    bool success = true;
        //    string sqlCmd = "";

        //    sqlCmd = "UPDATE WV_BQ_DATA SET YEAR_INSTALL = '" + BOQ_MAIN.x_YEAR_INSTALL +
        //        "', SCH_TYPE = '" + BOQ_MAIN.x_SCH_TYPE +
        //        "', SCH_NO = '" + BOQ_MAIN.x_SCH_NO +
        //        "', SCHEME_NAME = '" + BOQ_MAIN.x_SCHEME_NAME +
        //        "', PU_ID = '" + BOQ_MAIN.x_PU_ID +
        //        "', BQ_MAT_PRICE = '" + BOQ_MAIN.x_BQ_MAT_PRICE +
        //        "', BQ_INSTALL_PRICE = '" + BOQ_MAIN.x_BQ_INSTALL_PRICE +
        //        "', PU_QTY = '" + BOQ_MAIN.x_PU_QTY +
        //        "', RATE_INDICATOR = '" + BOQ_MAIN.x_RATE_INDICATOR +
        //        "' WHERE SCHEME_NAME ='" + SCHEME_NAME + "'";

        //    using (Entities ctxData = new Entities())
        //    {
        //        success = tool.ExecuteSql(ctxData, sqlCmd);
        //    }

        //    return success;

        //}

        //public bool Delete_BOQ_MAIN(string SCHEME_NAME)
        //{
        //    Tools tool = new Tools();
        //    bool success = true;
        //    string sqlCmd = "";

        //    System.Diagnostics.Debug.Write("#####");
        //    System.Diagnostics.Debug.WriteLine(SCHEME_NAME);

        //    sqlCmd = "DELETE FROM WV_BQ_DATA " +
        //        " WHERE SCHEME_NAME ='" + SCHEME_NAME + "'";

        //    using (Entities ctxData = new Entities())
        //    {
        //        success = tool.ExecuteSql(ctxData, sqlCmd);
        //    }

        //    return success;
        //}

        #endregion

        ////----------------------------------------------BOQ_GEN

        //#region BOQ_GEN

        //public class BOQ_GEN
        //{
        //    public string x_Sch_No;
        //    public string x_Scheme_Name;
        //    public string x_Sch_Type;
        //    public string x_Exc_Abb;
        //    public string x_Year_Install;
        //}

        //public class OSPBOQ_GEN
        //{
        //    public int max;
        //    public List<BOQ_GEN> BOQ_GENList = new List<BOQ_GEN>();
        //}


        //[WebMethod]
        //public OSPBOQ_GEN GetOSPBOQ_GEN(int start, int size, string searchKey)
        //{
        //    OSPBOQ_GEN osp = new OSPBOQ_GEN();

        //    using (Entities ctxData = new Entities())
        //    {
        //        if (searchKey == null)
        //        {
        //            int count = (from c in ctxData.G3E_JOB
        //                         select c).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count;

        //            var query = (from d in ctxData.G3E_JOB
        //                         orderby d.SCHEME_NAME
        //                         select new { d.SCH_NO, d.JOB_TYPE, d.EXC_ABB, d.SCHEME_NAME, d.YEAR_INSTALL }).Skip(start).Take(size);

        //            foreach (var a in query)
        //            {

        //                BOQ_GEN BOQ_GEN = new BOQ_GEN();
        //                BOQ_GEN.x_Sch_No = a.SCH_NO;
        //                BOQ_GEN.x_Sch_Type = a.JOB_TYPE;
        //                BOQ_GEN.x_Exc_Abb = a.EXC_ABB;
        //                BOQ_GEN.x_Scheme_Name = a.SCHEME_NAME;
        //                BOQ_GEN.x_Year_Install = a.YEAR_INSTALL.ToString();

        //                osp.BOQ_GENList.Add(BOQ_GEN);

        //                System.Diagnostics.Debug.WriteLine(a.SCHEME_NAME + " : " + a.SCHEME_NAME);
        //            }
        //        }
        //        else
        //        {
        //            int count = (from c in ctxData.G3E_JOB
        //                         where searchKey == c.SCHEME_NAME
        //                         select c).Count();

        //            System.Diagnostics.Debug.WriteLine(count);
        //            osp.max = count;

        //            var query = (from d in ctxData.G3E_JOB
        //                         where searchKey == d.SCHEME_NAME
        //                         orderby d.SCHEME_NAME
        //                         select new { d.SCH_NO, d.JOB_TYPE, d.EXC_ABB, d.SCHEME_NAME, d.YEAR_INSTALL }).Skip(start).Take(size);

        //            foreach (var a in query)
        //            {

        //                BOQ_GEN BOQ_GEN = new BOQ_GEN();
        //                BOQ_GEN.x_Sch_No = a.SCH_NO;
        //                BOQ_GEN.x_Sch_Type = a.JOB_TYPE;
        //                BOQ_GEN.x_Exc_Abb = a.EXC_ABB;
        //                BOQ_GEN.x_Scheme_Name = a.SCHEME_NAME;
        //                BOQ_GEN.x_Year_Install = a.YEAR_INSTALL.ToString();

        //                osp.BOQ_GENList.Add(BOQ_GEN);

        //                System.Diagnostics.Debug.WriteLine(a.SCHEME_NAME + " : " + a.SCHEME_NAME);
        //            }
        //        }
        //    }

        //    return osp;
        //}


        ////[WebMethod]
        ////public OSPBOQ_GEN GetOSPBOQ_GEN(int start, int size)
        ////{
        ////    OSPBOQ_GEN osp = new OSPBOQ_GEN();

        ////    using (Entities ctxData = new Entities())
        ////    {
        ////        int count = (from c in ctxData.G3E_JOB
        ////                     select c).Count();

        ////        System.Diagnostics.Debug.WriteLine(count);
        ////        osp.max = count;

        ////        var query = (from d in ctxData.G3E_JOB
        ////                     orderby d.SCH_NO
        ////                     select new { d.SCH_NO, d.SCHEME_NAME, d.JOB_TYPE, d.EXC_ABB, d.YEAR_INSTALL }).Skip(start).Take(size);

        ////        foreach (var a in query)
        ////        {
        ////            BOQ_GEN BOQ_GEN = new BOQ_GEN();

        ////            BOQ_GEN.x_Sch_No = a.SCH_NO.Trim();
        ////            BOQ_GEN.x_Scheme_Name = a.SCHEME_NAME;
        ////            BOQ_GEN.x_Sch_Type = a.JOB_TYPE.ToString();
        ////            BOQ_GEN.x_Exc_Abb = a.EXC_ABB;
        ////            BOQ_GEN.x_Year_Install = a.YEAR_INSTALL.ToString();
        ////            osp.BOQ_GENList.Add(BOQ_GEN);

        ////            System.Diagnostics.Debug.WriteLine(a.SCH_NO + " : " + a.SCHEME_NAME);
        ////        }
        ////    }

        ////    return osp;
        ////}

        ////public bool UpdateBOQ_GEN(BOQ_GEN BOQ_GEN, string SCH_NO)
        ////{
        ////    Tools tool = new Tools();
        ////    bool success = true;
        ////    string sqlCmd = "";

        ////    sqlCmd = "UPDATE BND_SCHEME SET SCHEME_NAME = '" + BOQ_GEN.x_Scheme_Name +
        ////        "', EXC_ABB = '" + BOQ_GEN.x_Exc_Abb +
        ////        "', YEAR_INSTALL = '" + BOQ_GEN.x_Year_Install +
        ////        "', JOB_TYPE = '" + BOQ_GEN.x_Sch_Type +
        ////        "' WHERE SCH_NO ='" + SCH_NO + "'";

        ////    using (Entities ctxData = new Entities())
        ////    {
        ////        success = tool.ExecuteSql(ctxData, sqlCmd);
        ////    }

        ////    return success;

        ////}

        //public bool AddBOQ_GEN(BOQ_GEN BOQ_GEN)
        //{
        //    try
        //    {
        //        bool success = true;
        //        Tools tool = new Tools();

        //        System.Diagnostics.Debug.WriteLine(BOQ_GEN.x_Sch_No);
        //        System.Diagnostics.Debug.WriteLine(BOQ_GEN.x_Scheme_Name);
        //        System.Diagnostics.Debug.WriteLine(BOQ_GEN.x_Sch_Type);
        //        System.Diagnostics.Debug.WriteLine(BOQ_GEN.x_Exc_Abb);
        //        System.Diagnostics.Debug.WriteLine(BOQ_GEN.x_Year_Install);

        //        OracleParameter[] oraPrm = new OracleParameter[5];

        //        oraPrm[0] = new OracleParameter("v_SCH_NO", OracleDbType.Varchar2);
        //        oraPrm[0].Value = BOQ_GEN.x_Sch_No;
        //        oraPrm[1] = new OracleParameter("v_SCHEME_NAME", OracleDbType.Varchar2);
        //        oraPrm[1].Value = BOQ_GEN.x_Scheme_Name;
        //        oraPrm[2] = new OracleParameter("v_SCH_TYPE", OracleDbType.Int32);
        //        oraPrm[2].Value = Convert.ToInt32(BOQ_GEN.x_Sch_Type);
        //        oraPrm[3] = new OracleParameter("v_EXC_ABB", OracleDbType.Varchar2);
        //        oraPrm[3].Value = BOQ_GEN.x_Exc_Abb;
        //        oraPrm[4] = new OracleParameter("v_YEAR_INSTALL", OracleDbType.Int32);
        //        oraPrm[4].Value = Convert.ToInt32(BOQ_GEN.x_Year_Install);


        //        tool.ExecuteStored("Data Source =nova; User Id =NEWGIS; Password =NEWGIS; ", "webview.WV_BOQGEN_SP",
        //            CommandType.StoredProcedure, oraPrm, false);
        //        return success;
        //    }
        //    catch (Exception Ex)
        //    {
        //        Console.WriteLine(Ex.Message);
        //        return false;
        //    }
        //}

        ////public bool Delete_BOQ_GEN(string SCH_NO)
        ////{
        ////    Tools tool = new Tools();
        ////    bool success = true;
        ////    string sqlCmd = "";

        ////    System.Diagnostics.Debug.Write("#####");
        ////    System.Diagnostics.Debug.WriteLine(SCH_NO);

        ////    sqlCmd = "DELETE FROM BND_SCHEME " +
        ////        " WHERE SCH_NO ='" + SCH_NO + "'";

        ////    using (Entities ctxData = new Entities())
        ////    {
        ////        success = tool.ExecuteSql(ctxData, sqlCmd);
        ////    }

        ////    return success;
        ////}

        //#endregion

        //----------------------------------------------BOQ_MAIN

        #region BOQ_MAIN

        public class BOQ_MAIN
        {
            public string x_EXC_ABB;
            public string x_YEAR_INSTALL;
            public string x_SCH_TYPE;
            public string x_SCH_NO;
            public string x_SCHEME_NAME;
            public string x_PU_ID;
            public string x_BQ_MAT_PRICE;
            public string x_BQ_INSTALL_PRICE;
            public string x_PU_QTY;
            public string x_RATE_INDICATOR;
            public string x_PU_DESC;
            public string x_ITEM_NO;
            public string x_ISP_OSP;
            public string x_PU_UOM;
            public string x_NET_PRICE;
        }

        public class BOQ_MAIN_EXCEL
        {
            public string x_TOTAL_PRICE;
            public string x_INSTALL_VALUE;
            public string x_MATERIAL_VALUE;
            public string x_CONT_VALUE;
            public string x_TOTAL_VALUE;
            public string x_PU_DESC;
            public string x_PU_ID;
            public string x_BQ_MAT_PRICE;
            public string x_BQ_CONT_PRICE;
            public string x_BQ_INSTALL_PRICE;
            public string x_PU_QTY;
            public string x_PU_UOM;
            public string x_ISP_OSP;
            public string x_RATE_INDICATOR;
            public string x_INSTALL_VALUE_TOTAL;
            public string x_MATERIAL_VALUE_TOTAL;
            public string x_CONT_VALUE_TOTAL;
            public string x_TOTAL_VALUE_TOTAL;
            public string x_TOTAL_ROW;
            public string x_ITEM_NO;
            public string x_NET_PRICE;
            public string x_CONTRACT_NO;
            public string x_CONTRACT_DESC;
        }

        public class OSPBOQ_MAIN
        {
            public int max;
            public List<BOQ_MAIN> BOQ_MAINList = new List<BOQ_MAIN>();
        }

        public class OSPBOQ_MAIN_EXCEL
        {
            public int max;
            public List<BOQ_MAIN_EXCEL> BOQ_MAIN_Excel = new List<BOQ_MAIN_EXCEL>();
        }

        [WebMethod]
        public OSPBOQ_MAIN GetOSPBOQint (int start, int size)
        {
            OSPBOQ_MAIN osp = new OSPBOQ_MAIN();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_BOQ_DATA select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;
            }
            return osp;
        }



        [WebMethod]
        public OSPBOQ_MAIN GetOSPBOQ_MAIN(int start, int size, string searchNo, string searchIDNo, string searchType, string searchIDType, string searchExc, string searchIDExc, string searchYear, string searchIDYear)
        {
            OSPBOQ_MAIN osp = new OSPBOQ_MAIN();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_BOQ_DATA select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;


                //string str = "";
                string sqlCmd = "";

                sqlCmd = "SELECT SCH_NO, SCH_TYPE, EXC_ABB, SCHEME_NAME, YEAR_INSTALL, PU_ID, BQ_MAT_PRICE, BQ_INSTALL_PRICE, PU_QTY, RATE_INDICATOR FROM WV_BQ_DATA WHERE 1=1 ";

                if (searchNo != null && searchNo != "Select")
                {
                    sqlCmd = sqlCmd + " AND SCH_NO = '" + searchNo + "' ";
                }
                if (searchType != null && searchType != "Select")
                {
                    sqlCmd = sqlCmd + " AND SCH_TYPE = '" + searchType + "' ";
                }
                if (searchExc != null && searchExc != "Select")
                {
                    sqlCmd = sqlCmd + " AND EXC_ABB = '" + searchExc + "' ";
                }
                if (searchYear != null && searchYear != "Select")
                {
                    sqlCmd = sqlCmd + " AND YEAR_INSTALL = '" + searchYear + "' ";
                }
                using (OracleConnection connection = new OracleConnection(connString))
                {
                    OracleCommand command = new OracleCommand(sqlCmd, connection);

                    try
                    {
                        connection.Open();
                        OracleDataReader reader = command.ExecuteReader();
                        while (reader.Read())
                        {
                            BOQ_MAIN BOQ_MAIN = new BOQ_MAIN();
                            BOQ_MAIN.x_SCH_NO = reader["SCH_NO"].ToString();
                            BOQ_MAIN.x_SCH_TYPE = reader["SCH_TYPE"].ToString();
                            BOQ_MAIN.x_EXC_ABB = reader["EXC_ABB"].ToString();
                            BOQ_MAIN.x_SCHEME_NAME = reader["SCHEME_NAME"].ToString();
                            BOQ_MAIN.x_YEAR_INSTALL = reader["YEAR_INSTALL"].ToString();
                            BOQ_MAIN.x_PU_ID = reader["PU_ID"].ToString();
                            BOQ_MAIN.x_BQ_MAT_PRICE = reader["BQ_MAT_PRICE"].ToString();
                            BOQ_MAIN.x_BQ_INSTALL_PRICE = reader["BQ_INSTALL_PRICE"].ToString();
                            BOQ_MAIN.x_PU_QTY = reader["PU_QTY"].ToString();
                            BOQ_MAIN.x_RATE_INDICATOR = reader["RATE_INDICATOR"].ToString();

                            osp.BOQ_MAINList.Add(BOQ_MAIN);
                            System.Diagnostics.Debug.WriteLine(reader["SCHEME_NAME"].ToString());
                        }
                        reader.Close();
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            return osp;
        }


        [WebMethod]
        public OSPBOQ_MAIN_EXCEL GetOSPBOQ_MAIN_Excel(int start, int size, string scheme)
        {
            OSPBOQ_MAIN_EXCEL osp = new OSPBOQ_MAIN_EXCEL();
            decimal INS_VAL = 0;
            decimal MAT_VAL = 0;
            decimal CONT_VAL = 0;
            decimal TOT_VAL = 0;

            using (Entities ctxData = new Entities())
            {
                    int count = (from bq in ctxData.WV_BOQ_DATA
                                 where bq.SCHEME_NAME == scheme
                                 select bq).Count();

                    System.Diagnostics.Debug.WriteLine(count);
                    osp.max = count;
                    var query = from bq in ctxData.WV_BOQ_DATA
                                where bq.SCHEME_NAME == scheme
                                orderby bq.ITEM_NO, bq.PU_ID,  bq.CONTRACT_NO
                                select new
                                {
                                    bq.EXC_ABB,
                                    bq.YEAR_INSTALL,
                                    bq.SCH_TYPE,
                                    bq.SCH_NO,
                                    bq.SCHEME_NAME,
                                    bq_id = bq.PU_ID,
                                    bq.BQ_MAT_PRICE,
                                    bq.BQ_INSTALL_PRICE,
                                    bq.PU_QTY,
                                    bq.RATE_INDICATOR,
                                    bq.PU_ID,
                                    bq.PU_DESC,
                                    bq.PU_UOM,
                                    bq.NET_PRICE,
                                    bq.ISP_OSP,
                                    bq.ITEM_NO,
                                    bq.CONTRACT_DESC,
                                    bq.CONTRACT_NO
                                };

                   
                    int row_count = (from bq in ctxData.WV_BOQ_DATA
                                     where bq.SCHEME_NAME == scheme
                                     select bq).Count();

                    foreach (var a in query)
                    {
                        BOQ_MAIN_EXCEL BOQ_MAIN_EXCEL = new BOQ_MAIN_EXCEL();

                        if (a.BQ_INSTALL_PRICE == null || a.BQ_INSTALL_PRICE == 0)
                        {
                            BOQ_MAIN_EXCEL.x_TOTAL_PRICE = "-";
                            BOQ_MAIN_EXCEL.x_INSTALL_VALUE = "-";
                            BOQ_MAIN_EXCEL.x_BQ_INSTALL_PRICE = "-";
                            BOQ_MAIN_EXCEL.x_MATERIAL_VALUE = "-";
                            BOQ_MAIN_EXCEL.x_BQ_MAT_PRICE = "-";
                        }
                        else
                        {
                            BOQ_MAIN_EXCEL.x_TOTAL_PRICE = String.Format("{0:0.00}", (a.BQ_INSTALL_PRICE + a.BQ_MAT_PRICE));
                            BOQ_MAIN_EXCEL.x_INSTALL_VALUE = String.Format("{0:0.00}", (a.BQ_INSTALL_PRICE * a.PU_QTY));
                            BOQ_MAIN_EXCEL.x_BQ_INSTALL_PRICE = String.Format("{0:0.00}", a.BQ_INSTALL_PRICE).ToString();
                            BOQ_MAIN_EXCEL.x_MATERIAL_VALUE = String.Format("{0:0.00}", (0.00));// String.Format("{0:0.00}", (a.BQ_MAT_PRICE * a.PU_QTY));
                            BOQ_MAIN_EXCEL.x_BQ_MAT_PRICE = String.Format("{0:0.00}", a.BQ_MAT_PRICE);
                            
                        }

                        if (a.CONTRACT_NO == null || a.CONTRACT_NO == "")
                        {
                            BOQ_MAIN_EXCEL.x_BQ_CONT_PRICE = "-";
                            BOQ_MAIN_EXCEL.x_CONT_VALUE = "-";
                        }
                        else
                        {
                            BOQ_MAIN_EXCEL.x_BQ_CONT_PRICE = a.NET_PRICE.ToString();
                            BOQ_MAIN_EXCEL.x_CONT_VALUE = String.Format("{0:0.00}", (a.NET_PRICE * a.PU_QTY));
                        }
                       
                        BOQ_MAIN_EXCEL.x_TOTAL_VALUE = String.Format("{0:0.00}", (Convert.ToDecimal(a.BQ_INSTALL_PRICE * a.PU_QTY)) + (Convert.ToDecimal(a.BQ_MAT_PRICE * a.PU_QTY)) + (Convert.ToDecimal(a.NET_PRICE) * a.PU_QTY));
                        BOQ_MAIN_EXCEL.x_PU_DESC = a.PU_DESC; // PLANT UNIT
                        BOQ_MAIN_EXCEL.x_CONTRACT_NO = a.CONTRACT_NO;
                        BOQ_MAIN_EXCEL.x_CONTRACT_DESC = a.CONTRACT_DESC;
                        BOQ_MAIN_EXCEL.x_PU_ID = a.PU_ID;
                        BOQ_MAIN_EXCEL.x_ISP_OSP = a.ISP_OSP;
                        BOQ_MAIN_EXCEL.x_PU_UOM = a.PU_UOM;
                        
                        
                        BOQ_MAIN_EXCEL.x_PU_QTY = a.PU_QTY.ToString();
                        if (a.RATE_INDICATOR != null)
                            BOQ_MAIN_EXCEL.x_RATE_INDICATOR = a.RATE_INDICATOR;
                        if(a.ITEM_NO != null)
                            BOQ_MAIN_EXCEL.x_ITEM_NO = a.ITEM_NO.ToString();
                        if (a.NET_PRICE != null)
                            BOQ_MAIN_EXCEL.x_NET_PRICE = String.Format("{0:0.00}", a.NET_PRICE);

                        INS_VAL = INS_VAL + (Convert.ToDecimal(a.BQ_INSTALL_PRICE) * Convert.ToDecimal(a.PU_QTY));
                        BOQ_MAIN_EXCEL.x_INSTALL_VALUE_TOTAL = INS_VAL.ToString();

                        MAT_VAL = MAT_VAL + (Convert.ToDecimal(a.BQ_MAT_PRICE) * Convert.ToDecimal(a.PU_QTY));
                        BOQ_MAIN_EXCEL.x_MATERIAL_VALUE_TOTAL = String.Format("{0:0.00}", MAT_VAL);

                        CONT_VAL = CONT_VAL + (Convert.ToDecimal(a.NET_PRICE) * Convert.ToDecimal(a.PU_QTY));
                        BOQ_MAIN_EXCEL.x_CONT_VALUE_TOTAL = String.Format("{0:0.00}", CONT_VAL);

                        TOT_VAL = TOT_VAL + ((Convert.ToDecimal(a.BQ_INSTALL_PRICE) * Convert.ToDecimal(a.PU_QTY)) + (Convert.ToDecimal(a.BQ_MAT_PRICE) * Convert.ToDecimal(a.PU_QTY)) + (Convert.ToDecimal(a.NET_PRICE) * Convert.ToDecimal(a.PU_QTY)));
                        System.Diagnostics.Debug.WriteLine("total : " +TOT_VAL);
                        BOQ_MAIN_EXCEL.x_TOTAL_VALUE_TOTAL = String.Format("{0:0.00}", TOT_VAL);

                        BOQ_MAIN_EXCEL.x_TOTAL_ROW = row_count.ToString();

                        osp.BOQ_MAIN_Excel.Add(BOQ_MAIN_EXCEL);
                        System.Diagnostics.Debug.WriteLine(a.PU_ID);
                    }

                    if (CheckBOQErrorPUID(scheme) && CheckBOQErrorMinMaterial(scheme))
                    {
                        BOQ_MAIN_EXCEL BOQ_MAIN_EXCEL = new BOQ_MAIN_EXCEL();
                        BOQ_MAIN_EXCEL.x_PU_DESC = "Unmatched Plant Unit and Min Material";
                        
                        osp.BOQ_MAIN_Excel.Add(BOQ_MAIN_EXCEL);
                    }
                    else if (CheckBOQErrorPUID(scheme))
                    {
                        BOQ_MAIN_EXCEL BOQ_MAIN_EXCEL = new BOQ_MAIN_EXCEL();
                        BOQ_MAIN_EXCEL.x_PU_DESC = "Unmatched Plant Unit";

                        osp.BOQ_MAIN_Excel.Add(BOQ_MAIN_EXCEL);
                    }
                    else if (CheckBOQErrorMinMaterial(scheme))
                    {
                        BOQ_MAIN_EXCEL BOQ_MAIN_EXCEL = new BOQ_MAIN_EXCEL();
                        BOQ_MAIN_EXCEL.x_PU_DESC = "Unmatched Min Material";

                        osp.BOQ_MAIN_Excel.Add(BOQ_MAIN_EXCEL);
                    }

                    if (osp.BOQ_MAIN_Excel.Count()%16 > 0)
                    {
                        for (int i = (osp.BOQ_MAIN_Excel.Count()%16); i < 16; i++)
                        {
                            BOQ_MAIN_EXCEL BOQ_MAIN_EXCEL = new BOQ_MAIN_EXCEL();
                            BOQ_MAIN_EXCEL.x_TOTAL_PRICE = " ";
                            BOQ_MAIN_EXCEL.x_INSTALL_VALUE = " ";
                            BOQ_MAIN_EXCEL.x_BQ_INSTALL_PRICE = " ";
                            BOQ_MAIN_EXCEL.x_MATERIAL_VALUE = " ";
                            BOQ_MAIN_EXCEL.x_BQ_MAT_PRICE = " ";
                            BOQ_MAIN_EXCEL.x_PU_UOM = " ";
                            BOQ_MAIN_EXCEL.x_BQ_CONT_PRICE = " ";
                            BOQ_MAIN_EXCEL.x_CONT_VALUE = " ";
                            BOQ_MAIN_EXCEL.x_TOTAL_VALUE = " ";
                            BOQ_MAIN_EXCEL.x_PU_DESC =" "; // PLANT UNIT
                            BOQ_MAIN_EXCEL.x_CONTRACT_NO = " ";
                            BOQ_MAIN_EXCEL.x_CONTRACT_DESC = " ";
                            BOQ_MAIN_EXCEL.x_PU_ID = " ";
                            BOQ_MAIN_EXCEL.x_ISP_OSP = " ";
                            BOQ_MAIN_EXCEL.x_PU_QTY = " ";
                            BOQ_MAIN_EXCEL.x_RATE_INDICATOR = " ";
                            BOQ_MAIN_EXCEL.x_ITEM_NO = " ";
                            BOQ_MAIN_EXCEL.x_NET_PRICE = " ";
                            BOQ_MAIN_EXCEL.x_INSTALL_VALUE_TOTAL = INS_VAL.ToString();
                            BOQ_MAIN_EXCEL.x_MATERIAL_VALUE_TOTAL = String.Format("{0:0.00}", MAT_VAL);
                            BOQ_MAIN_EXCEL.x_CONT_VALUE_TOTAL = String.Format("{0:0.00}", CONT_VAL);
                            BOQ_MAIN_EXCEL.x_TOTAL_VALUE_TOTAL = String.Format("{0:0.00}", TOT_VAL);

                            osp.BOQ_MAIN_Excel.Add(BOQ_MAIN_EXCEL);
                        }
                    }

            }

            return osp;
        }

        [WebMethod]
        public OSPBOQ_MAIN_EXCEL GetOSPBOQ_MAT_Excel(int start, int size, string scheme)
        {
            OSPBOQ_MAIN_EXCEL osp = new OSPBOQ_MAIN_EXCEL();
            decimal INS_VAL = 0;
            decimal MAT_VAL = 0;
            decimal CONT_VAL = 0;
            decimal TOT_VAL = 0;

            using (Entities ctxData = new Entities())
            {
                int count = (from bq in ctxData.WV_BOQ_DATA
                             where bq.SCHEME_NAME == scheme
                             select bq).Count();

                System.Diagnostics.Debug.WriteLine(count);
                osp.max = count;
                var query = from bq in ctxData.WV_MAT_DATA
                            where bq.SCHEME_NAME == scheme
                            orderby bq.MAT_ID
                            select new
                            {
                                bq.MAT_ID,
                                bq.MAT_NAME,
                                bq.MAT_UOM,
                                bq.MAT_CAT,
                                bq.MAT_PRICE,
                                bq_id = bq.MAT_ID,
                                bq.MAT_QTY
                            };


                int row_count = (from bq in ctxData.WV_MAT_DATA
                                 where bq.SCHEME_NAME == scheme
                                 select bq).Count();

                foreach (var a in query)
                {
                    BOQ_MAIN_EXCEL BOQ_MAIN_EXCEL = new BOQ_MAIN_EXCEL();

                    if (a.MAT_PRICE == null || a.MAT_PRICE == 0)
                    {
                        BOQ_MAIN_EXCEL.x_MATERIAL_VALUE = "-";
                        //BOQ_MAIN_EXCEL.x_BQ_MAT_PRICE = "-";
                    }
                    else
                    {
                        //BOQ_MAIN_EXCEL.x_MATERIAL_VALUE = String.Format("{0:0.00}", (a.MAT_PRICE * a.MAT_QTY));//---------------------------
                        BOQ_MAIN_EXCEL.x_MATERIAL_VALUE = String.Format("{0:0.00}", Convert.ToDecimal(a.MAT_PRICE));//------------------------
                    }
                    if (a.MAT_QTY == null || a.MAT_QTY == 0)
                    {
                        BOQ_MAIN_EXCEL.x_BQ_MAT_PRICE = "-";
                    }
                    else
                    {
                        BOQ_MAIN_EXCEL.x_BQ_MAT_PRICE = String.Format("{0:0.00}", a.MAT_QTY); //----------------------------------------------
                    }

                    //BOQ_MAIN_EXCEL.x_TOTAL_VALUE = String.Format("{0:0.00}", Convert.ToDecimal(a.MAT_PRICE * a.MAT_QTY)); // ---------------
                    BOQ_MAIN_EXCEL.x_TOTAL_VALUE = String.Format("{0:0.00}", Convert.ToDecimal(a.MAT_PRICE * a.MAT_QTY));
                    BOQ_MAIN_EXCEL.x_PU_DESC = a.MAT_NAME; // --------------------------------------------------------------------------------
                    BOQ_MAIN_EXCEL.x_PU_ID = a.MAT_ID; //-------------------------------------------------------------------------------------
                    BOQ_MAIN_EXCEL.x_ISP_OSP = a.MAT_CAT; //----------------------------------------------------------------------------------
                    BOQ_MAIN_EXCEL.x_PU_UOM = a.MAT_UOM; //-----------------------------------------------------------------------------------

                    TOT_VAL = TOT_VAL + (Convert.ToDecimal(a.MAT_PRICE) * Convert.ToDecimal(a.MAT_QTY));
                    System.Diagnostics.Debug.WriteLine("total : " + TOT_VAL);
                    BOQ_MAIN_EXCEL.x_TOTAL_VALUE_TOTAL = String.Format("{0:0.00}", TOT_VAL);

                    BOQ_MAIN_EXCEL.x_TOTAL_ROW = row_count.ToString();

                    osp.BOQ_MAIN_Excel.Add(BOQ_MAIN_EXCEL);
                }

                if (osp.BOQ_MAIN_Excel.Count() % 16 > 0)
                {
                    for (int i = (osp.BOQ_MAIN_Excel.Count() % 16); i < 16; i++)
                    {
                        BOQ_MAIN_EXCEL BOQ_MAIN_EXCEL = new BOQ_MAIN_EXCEL();
                        BOQ_MAIN_EXCEL.x_MATERIAL_VALUE = " "; 
                        BOQ_MAIN_EXCEL.x_BQ_MAT_PRICE = " "; 
                        BOQ_MAIN_EXCEL.x_TOTAL_VALUE = " ";
                        BOQ_MAIN_EXCEL.x_PU_DESC = " ";
                        BOQ_MAIN_EXCEL.x_PU_ID = " ";
                        BOQ_MAIN_EXCEL.x_ISP_OSP = " ";
                        BOQ_MAIN_EXCEL.x_PU_UOM = " ";
                        BOQ_MAIN_EXCEL.x_TOTAL_VALUE_TOTAL = String.Format("{0:0.00}", TOT_VAL); 

                        osp.BOQ_MAIN_Excel.Add(BOQ_MAIN_EXCEL);
                    }
                }

            }

            return osp;
        }

        [WebMethod]
        public string GetBOQ(string schemeName, string check)
        {
            
            System.Diagnostics.Debug.WriteLine("BOQ GET : 1");
            using (Entities ctxData = new Entities())
            {
                var query = from a in ctxData.WV_BOQ_DATA
                            where a.SCHEME_NAME == schemeName
                            orderby a.ITEM_NO, a.PU_ID
                            select new { a.CONTRACT_NO, a.PU_ID, a.CONTRACT_DESC, a.ISP_OSP, a.ITEM_NO,a.PU_QTY, a.PU_DESC, a.BQ_INSTALL_PRICE, a.BQ_MAT_PRICE, a.NET_PRICE, a.RATE_INDICATOR};//  a.PU_DESC, a.ITEM_NO,   a.ITEM_NO,
                System.Diagnostics.Debug.WriteLine("BOQ GET : 2");

                //System.Diagnostics.Debug.WriteLine(query.Count());
                if (query.Count() > 0)
                {
                    
                    string output = "";
                //    //var d = query.Single();
                    int counter = 0;



                    foreach (var lp in query)
                    {
                        System.Diagnostics.Debug.WriteLine("BOQ GET : 3");
                        //output += "b";
                        counter++;
                        System.Diagnostics.Debug.WriteLine(counter);
                        System.Diagnostics.Debug.WriteLine(lp.PU_ID);
                        string carry = "";
                        if (check == "JKH")
                        {
                            //string netFlag = "";
                            //output += "c :" + lp.PU_ID + "d :" + lp.RATE_INDICATOR;
                            string netFlag = (from q in ctxData.WV_PU_MAST
                                              where q.PU_ID.Trim() == lp.PU_ID.Trim() && q.BILL_RATE == lp.RATE_INDICATOR
                                              select q.NETWORK_FLAG).Single();
                           
                            //output += "d";
                            System.Diagnostics.Debug.WriteLine("netFlag : " + netFlag);
                            output += lp.PU_ID + "|" + lp.PU_DESC + "|" + lp.RATE_INDICATOR + "|" + lp.ISP_OSP + "|" + lp.PU_QTY + "|" + String.Format("{0:0.00}", lp.BQ_INSTALL_PRICE) +
                                "|" + String.Format("{0:0.00}", lp.BQ_MAT_PRICE) + "|" + String.Format("{0:0.00}", (Convert.ToDecimal(lp.PU_QTY) * Convert.ToDecimal(lp.BQ_INSTALL_PRICE)) + (Convert.ToDecimal(lp.PU_QTY) * Convert.ToDecimal(lp.BQ_MAT_PRICE))) + "|" + netFlag;
                        }
                        else if (check == "CONTRACT")
                        {
                            //string netFlag = (from q in ctxData.WV_CONTRACT_MAST
                            //                  where q.CONTRACT_NO.Trim() == lp.CONTRACT_NO.Trim() && q.ITEM_NO == lp.ITEM_NO
                            //                  select q.NETWORK_FLAG).Single();
                            // output += "a2";
                            string isposp = "FALSE";
                            if (lp.ISP_OSP == null)
                            {
                                isposp = "TRUE";
                            }
                            output += lp.CONTRACT_NO + "|" + lp.ITEM_NO.ToString() + "|" + lp.CONTRACT_DESC + "|" + lp.ISP_OSP + "|" + lp.PU_QTY + "|" +
                                String.Format("{0:0.00}", lp.NET_PRICE) + "|" + String.Format("{0:0.00}", (Convert.ToDecimal(lp.PU_QTY) * Convert.ToDecimal(lp.NET_PRICE))) + "|" + isposp;
                        }
                        output += "!";
                    }

                    return output;
                }
                else
                {
                    return "no";
                }
            }
        }

        [WebMethod]
        public string GetMaterial(string schemeName)
        {
            using (Entities ctxData = new Entities())
            {
                var query = from a in ctxData.WV_MAT_DATA
                            where a.SCHEME_NAME == schemeName
                            orderby a.MAT_ID
                            select new {a.MAT_ID,a.MAT_NAME,a.MAT_PRICE,a.MAT_QTY };

                if (query.Count() > 0)
                {

                    string output = "";
                    //var d = query.Single();
                    int counter = 0;

                    foreach (var lp in query)
                    {
                        //output += "b";
                        counter++;


                        output += lp.MAT_ID + "|" + lp.MAT_NAME + "|" + String.Format("{0:0.00}", lp.MAT_PRICE) + "|" + String.Format("{0:0.00}", lp.MAT_QTY);
                        
                        output += "!";
                    }

                    return output;
                }
                else
                {
                    return "no";
                }
            }
        }

        public bool UpdateBOQ_MAIN(BOQ_MAIN BOQ_MAIN, string SCHEME_NAME)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_BQ_DATA SET YEAR_INSTALL = '" + BOQ_MAIN.x_YEAR_INSTALL +
                "', SCH_TYPE = '" + BOQ_MAIN.x_SCH_TYPE +
                "', SCH_NO = '" + BOQ_MAIN.x_SCH_NO +
                "', SCHEME_NAME = '" + BOQ_MAIN.x_SCHEME_NAME +
                "', PU_ID = '" + BOQ_MAIN.x_PU_ID +
                "', BQ_MAT_PRICE = '" + BOQ_MAIN.x_BQ_MAT_PRICE +
                "', BQ_INSTALL_PRICE = '" + BOQ_MAIN.x_BQ_INSTALL_PRICE +
                "', PU_QTY = '" + BOQ_MAIN.x_PU_QTY +
                "', RATE_INDICATOR = '" + BOQ_MAIN.x_RATE_INDICATOR +
                "' WHERE SCHEME_NAME ='" + SCHEME_NAME + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool Delete_BOQ_MAIN(string SCHEME_NAME)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            System.Diagnostics.Debug.Write("#####");
            System.Diagnostics.Debug.WriteLine(SCHEME_NAME);

            sqlCmd = "DELETE FROM WV_BQ_DATA " +
                " WHERE SCHEME_NAME ='" + SCHEME_NAME + "'";

            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;
        }

        

        #endregion

        //----------------------------------------------BOQ_GEN

        #region BOQ_GEN

        public class BOQ_GEN
        {
            public string x_G3E_ID;
            public string x_Sch_No;
            public string x_PROJ_NO;
            public string x_G3E_DESCRIPTION;
            public string x_Scheme_Name;
            public string x_Sch_Type;
            public string x_Exc_Abb;
            public string x_Year_Install;
            public string x_G3E_OWNER;
            public string x_GEMS_TABLE;
        }

        public class OSPBOQ_GEN
        {
            public int max;
            public List<BOQ_GEN> BOQ_GENList = new List<BOQ_GEN>();
        }

        [WebMethod]
        public bool CheckBOQErrorPUID(string schemeName)
        {
            using (Entities ctxData = new Entities())
            {
                int count = (from bq in ctxData.WV_BOQ_ERROR_PU
                                 where bq.SCHEME_NAME == schemeName
                                 select bq.PU_ID).Count();

                if (count > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }

        [WebMethod]
        public bool CheckBOQErrorContractNo(string schemeName)
        {
            using (Entities ctxData = new Entities())
            {
                int count = (from bq in ctxData.WV_BOQ_ERROR_CO
                             where bq.SCHEME_NAME == schemeName
                             select bq.CONTRACT_NO).Count();

                if (count > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }

        [WebMethod]
        public bool CheckBOQErrorMinMaterial(string schemeName)
        {
            using (Entities ctxData = new Entities())
            {
                int count = (from bq in ctxData.WV_BOQ_ERROR_MM
                             where bq.SCHEME_NAME == schemeName
                             select bq.MIN_MATERIAL).Count();

                if (count > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }

        [WebMethod]
        public string CheckGEMS(string schemeName)
        {
            string check = "";
            using (Entities ctxData = new Entities())
            {
                var CariqueryOSP = (from d in ctxData.G3E_JOB
                                    where d.SCHEME_NAME == schemeName
                                    select d).Count();
                if (CariqueryOSP != 0)
                {
                    var query = from a in ctxData.G3E_JOB
                                where a.SCHEME_NAME == schemeName
                                select new { a.GEMS_TABLE };
                    foreach (var lp in query)
                    {
                        if (lp.GEMS_TABLE == "TRUE")
                            check = "true";
                        else
                            check = "false";
                    }
                }
                else
                {
                    var queryISP = from a in ctxData.WV_ISP_JOB
                                   where a.SCHEME_NAME == schemeName
                                   select new { a.GEMS_TABLE };
                    foreach (var lp in queryISP)
                    {
                        if (lp.GEMS_TABLE == "TRUE")
                            check = "true";
                        else
                            check = "false";
                    }
                }
            }
            return check;
        }

        [WebMethod]
        public string GetBOQError(string schemeName, string check)
        {
            int max = 0;
            string output = "";
            using (Entities ctxData = new Entities())
            {
                int noQ1 = (from a in ctxData.WV_BOQ_ERROR_MM
                              where a.SCHEME_NAME == schemeName
                              select a).Count();
                if (noQ1 > max)
                {
                    max = noQ1;
                }
                int noQ2 = (from a in ctxData.WV_BOQ_ERROR_PU
                            where a.SCHEME_NAME == schemeName
                            select a).Count();
                if (noQ2 > max)
                {
                    max = noQ2;
                }
                int noQ3 = (from a in ctxData.WV_BOQ_ERROR_CO
                            where a.SCHEME_NAME == schemeName
                            select a).Count();
                if (noQ3 > max)
                {
                    max = noQ3;
                }

                int noQ4 = (from a in ctxData.WV_BOQ_ERROR_RAKEOFF
                            where a.SCHEME_NAME == schemeName
                            select a).Count();
                if (noQ4 > max)
                {
                    max = noQ4;
                }

                if (max > 0)
                {
                    var queryMM = from a in ctxData.WV_BOQ_ERROR_MM
                                  where a.SCHEME_NAME == schemeName
                                  select new { a.DESCRIPTION, a.MIN_MATERIAL, a.G3E_FID };

                    int counter = 0;
                    foreach (var lp in queryMM)
                    {

                        counter++;
                        System.Diagnostics.Debug.WriteLine(counter);

                        output += lp.DESCRIPTION + "-" + lp.G3E_FID + "-" + lp.MIN_MATERIAL + "-null" + "-null";
                        output += "!";
                    }


                    var queryPU = from a in ctxData.WV_BOQ_ERROR_PU
                                  where a.SCHEME_NAME == schemeName
                                  select new { a.DESCRIPTION, a.G3E_FID, a.MIN_MATERIAL, a.PU_ID, a.BILL_RATE };

                    foreach (var lp in queryPU)
                    {
                        counter++;
                        System.Diagnostics.Debug.WriteLine(counter);

                        output += lp.DESCRIPTION + "-" + lp.G3E_FID + "-" + lp.MIN_MATERIAL + "-" + lp.PU_ID + "/" + lp.BILL_RATE + "-null";
                        output += "!";
                    }

                    var queryCO = from a in ctxData.WV_BOQ_ERROR_CO
                                  where a.SCHEME_NAME == schemeName
                                  select new { a.DESCRIPTION, a.G3E_FID, a.MIN_MATERIAL, a.CONTRACT_NO, a.ITEM_NO };

                    foreach (var lp in queryCO)
                    {
                        counter++;
                        System.Diagnostics.Debug.WriteLine(counter);

                        output += lp.DESCRIPTION + "-" + lp.G3E_FID + "-" + lp.MIN_MATERIAL + "-null-" + lp.CONTRACT_NO + "/" + lp.ITEM_NO ;
                        output += "!";
                    }

                    var queryRO = from a in ctxData.WV_BOQ_ERROR_RAKEOFF
                                  where a.SCHEME_NAME == schemeName
                                  select new { a.DESCRIPTION, a.G3E_FID, a.MIN_MATERIAL };

                    foreach (var lp in queryRO)
                    {
                        counter++;
                        System.Diagnostics.Debug.WriteLine(counter);

                        output += lp.DESCRIPTION + "-" + lp.G3E_FID + "-" + lp.MIN_MATERIAL + "-null" + "-null";
                        output += "!";
                    }

                   // var queryMM = from a in ctxData.WV_BOQ_ERROR_MM
                   //               where a.SCHEME_NAME == schemeName
                   //               select new { a.MIN_MATERIAL, a.G3E_FID };

                   // int counter = 0;
                   // foreach (var lp in queryMM)
                   // {

                   //     counter++;
                   //     System.Diagnostics.Debug.WriteLine(counter);

                   //     output += lp.MIN_MATERIAL + " - " + lp.G3E_FID;
                   //     output += "+";
                   // }
                   // for (int i = counter; i < max; i++)
                   // {
                   //     output += "x +";
                   // }

                   // if (check == "JKH")
                   // {
                   //     var queryPU = from a in ctxData.WV_BOQ_ERROR_PU
                   //                   where a.SCHEME_NAME == schemeName
                   //                   select new { a.PU_ID, a.BILL_RATE };

                   //     output += "!";
                   //     //var d = query.Single();
                   //     counter = 0;
                   //     foreach (var lp in queryPU)
                   //     {
                   //         counter++;
                   //         System.Diagnostics.Debug.WriteLine(counter);

                   //         output += lp.PU_ID + " - " + lp.BILL_RATE;

                   //         output += "|";
                   //     }
                   //     for (int i = counter; i < max; i++)
                   //     {
                   //         output += "x |";
                   //     }
                        
                   //}
                   // if (check == "CONTRACT")
                   // {
                   //     var queryCO = from a in ctxData.WV_BOQ_ERROR_CO
                   //                   where a.SCHEME_NAME == schemeName
                   //                   select new { a.CONTRACT_NO, a.ITEM_NO };
                   //     output += "!";
                   //     //var d = query.Single();
                   //     counter = 0;
                   //     foreach (var lp in queryCO)
                   //     {
                   //         counter++;
                   //         System.Diagnostics.Debug.WriteLine(counter);

                   //         output += lp.CONTRACT_NO + " - " + lp.ITEM_NO;

                   //         output += "|";
                   //     }
                   //     for (int i = counter; i < max; i++)
                   //     {
                   //         output += "x |";
                   //     }
                   // }
                    return output;
                }
                else
                {
                    return "no";
                }
               
            }
        }

        [WebMethod]
        public OSPBOQ_GEN GetOSPBOQ_GEN(string user,string check, int start, int size, string searchName, string searchIDName, string searchOwner, string searchIDOwner, string searchNo, string searchIDNo, string searchType, string searchIDType, string searchExc, string searchIDExc, string searchYear, string searchIDYear)
        {
            OSPBOQ_GEN osp = new OSPBOQ_GEN();

            //using (Entities ctxData = new Entities())
            //{
            //    int count = (from c in ctxData.G3E_JOB select c).Count();

            //    System.Diagnostics.Debug.WriteLine(count);
            osp.max = 100;


            string sqlCmd = "";
            string sqlCmd2 = "";
            if (check == "JKH")
                sqlCmd = "SELECT SCH_NO, JOB_TYPE, PROJECT_NO, G3E_DESCRIPTION, EXC_ABB, SCHEME_NAME, YEAR_INSTALL, G3E_OWNER, GEMS_TABLE FROM G3E_JOB WHERE (JOB_TYPE = 'Civil' OR JOB_TYPE = 'E/Side' OR JOB_TYPE = 'D/Side' OR JOB_TYPE = 'Fiber E/Side' OR JOB_TYPE = 'HSBB E/Side' OR JOB_TYPE = 'HSBB D/Side' OR JOB_TYPE = 'Fiber Trunk' OR JOB_TYPE = 'Fiber Junction' OR JOB_TYPE = 'Others') AND upper(G3E_OWNER) = '" + user.ToUpper() + "' AND SCHEME_NAME IS NOT NULL and 1=1 ";
            else
            {
                sqlCmd = "SELECT SCH_NO, JOB_TYPE, PROJECT_NO, G3E_DESCRIPTION, EXC_ABB, SCHEME_NAME, YEAR_INSTALL, G3E_OWNER, GEMS_TABLE FROM G3E_JOB WHERE (JOB_TYPE = 'Copper (Equip)' OR JOB_TYPE = 'Fiber (Equip)' OR JOB_TYPE = 'HSBB (Equip)' OR JOB_TYPE = 'ISP' OR JOB_TYPE = 'METROE' OR JOB_TYPE = 'IPCORE')AND upper(G3E_OWNER) = '" + user.ToUpper() + "' AND SCHEME_NAME IS NOT NULL and 1=1 ";
                sqlCmd2 = "SELECT SCH_NO, JOB_TYPE, PROJECT_NO, G3E_DESCRIPTION, EXC_ABB, SCHEME_NAME, YEAR_INSTALL, G3E_OWNER, GEMS_TABLE FROM WV_ISP_JOB WHERE (JOB_TYPE = 'ISP' OR JOB_TYPE = 'METROE' OR JOB_TYPE = 'IPCORE') AND upper(G3E_OWNER) = '" + user.ToUpper() + "' AND SCHEME_NAME IS NOT NULL ";
            }
            if (searchName != null && searchName != "Select")
            {
                sqlCmd = sqlCmd + " AND SCHEME_NAME like '" + searchName + "' ";
                sqlCmd2 = sqlCmd2 + " AND SCHEME_NAME like '" + searchName + "' ";
            }
            if (searchNo != null && searchNo != "Select")
            {
                sqlCmd = sqlCmd + " AND SCH_NO like '" + searchNo + "' ";
                sqlCmd2 = sqlCmd2 + " AND SCH_NO like '" + searchNo + "' ";
            }
            if (searchType != null && searchType != "Select")
            {
                sqlCmd = sqlCmd + " AND JOB_TYPE like '" + searchType + "' ";
                sqlCmd2 = sqlCmd2 + " AND JOB_TYPE like '" + searchType + "' ";
            }
            if (searchExc != null && searchExc != "Select")
            {
                sqlCmd = sqlCmd + " AND EXC_ABB like '" + searchExc + "' ";
                sqlCmd2 = sqlCmd2 + " AND EXC_ABB like '" + searchExc + "' ";
            }
            if (searchYear != null && searchYear != "Select")
            {
                sqlCmd = sqlCmd + " AND YEAR_INSTALL like '" + searchYear + "' ";
                sqlCmd2 = sqlCmd2 + " AND YEAR_INSTALL like '" + searchYear + "' ";
            }
            if (searchOwner != null && searchOwner != "Select")
            {
                sqlCmd = sqlCmd + " AND G3E_OWNER like '" + searchOwner + "' ";
                sqlCmd2 = sqlCmd2 + " AND G3E_OWNER like '" + searchOwner + "' ";
            }
            using (OracleConnection connection = new OracleConnection(connString))
            {
                OracleCommand command = new OracleCommand(sqlCmd, connection);

                try
                {
                    connection.Open();
                    OracleDataReader reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        BOQ_GEN BOQ_GEN = new BOQ_GEN();
                        BOQ_GEN.x_Sch_No = reader["SCH_NO"].ToString();
                        BOQ_GEN.x_Sch_Type = reader["JOB_TYPE"].ToString();
                        BOQ_GEN.x_Exc_Abb = reader["EXC_ABB"].ToString();
                        BOQ_GEN.x_Scheme_Name = reader["SCHEME_NAME"].ToString();
                        BOQ_GEN.x_Year_Install = reader["YEAR_INSTALL"].ToString();
                        BOQ_GEN.x_G3E_OWNER = reader["G3E_OWNER"].ToString();
                        BOQ_GEN.x_G3E_DESCRIPTION = reader["G3E_DESCRIPTION"].ToString();
                        BOQ_GEN.x_PROJ_NO = reader["PROJECT_NO"].ToString();
                        BOQ_GEN.x_GEMS_TABLE = reader["GEMS_TABLE"].ToString();

                        osp.BOQ_GENList.Add(BOQ_GEN);
                        System.Diagnostics.Debug.WriteLine(reader["SCHEME_NAME"].ToString());
                    }
                    reader.Close();
                }
                catch (Exception ex)
                {
                }
            }
            if (check != "JKH")
            {
                using (OracleConnection connection = new OracleConnection(connString))
                {
                    OracleCommand command = new OracleCommand(sqlCmd2, connection);

                    try
                    {
                        connection.Open();
                        OracleDataReader reader = command.ExecuteReader();
                        while (reader.Read())
                        {
                            BOQ_GEN BOQ_GEN = new BOQ_GEN();
                            BOQ_GEN.x_Sch_No = reader["SCH_NO"].ToString();
                            BOQ_GEN.x_Sch_Type = reader["JOB_TYPE"].ToString();
                            BOQ_GEN.x_Exc_Abb = reader["EXC_ABB"].ToString();
                            BOQ_GEN.x_Scheme_Name = reader["SCHEME_NAME"].ToString();
                            BOQ_GEN.x_Year_Install = reader["YEAR_INSTALL"].ToString();
                            BOQ_GEN.x_G3E_OWNER = reader["G3E_OWNER"].ToString();
                            BOQ_GEN.x_G3E_DESCRIPTION = reader["G3E_DESCRIPTION"].ToString();
                            BOQ_GEN.x_PROJ_NO = reader["PROJECT_NO"].ToString();
                            BOQ_GEN.x_GEMS_TABLE = reader["GEMS_TABLE"].ToString();

                            osp.BOQ_GENList.Add(BOQ_GEN);
                            System.Diagnostics.Debug.WriteLine(reader["SCHEME_NAME"].ToString());
                        }
                        reader.Close();
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            //  }
            return osp;
        }

        public bool AddBOQ_GEN(BOQ_GEN BOQ_GEN)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                System.Diagnostics.Debug.WriteLine(BOQ_GEN.x_Sch_No);
                System.Diagnostics.Debug.WriteLine(BOQ_GEN.x_Scheme_Name);
                System.Diagnostics.Debug.WriteLine(BOQ_GEN.x_Sch_Type);
                System.Diagnostics.Debug.WriteLine(BOQ_GEN.x_Exc_Abb);
                System.Diagnostics.Debug.WriteLine(BOQ_GEN.x_Year_Install);

                OracleParameter[] oraPrm = new OracleParameter[5];

                oraPrm[0] = new OracleParameter("v_SCH_NO", OracleDbType.Varchar2);
                oraPrm[0].Value = BOQ_GEN.x_Sch_No;
                oraPrm[1] = new OracleParameter("v_SCHEME_NAME", OracleDbType.Varchar2);
                oraPrm[1].Value = BOQ_GEN.x_Scheme_Name;
                oraPrm[2] = new OracleParameter("v_SCH_TYPE", OracleDbType.Int32);
                oraPrm[2].Value = Convert.ToInt32(BOQ_GEN.x_Sch_Type);
                oraPrm[3] = new OracleParameter("v_EXC_ABB", OracleDbType.Varchar2);
                oraPrm[3].Value = BOQ_GEN.x_Exc_Abb;
                oraPrm[4] = new OracleParameter("v_YEAR_INSTALL", OracleDbType.Int32);
                oraPrm[4].Value = Convert.ToInt32(BOQ_GEN.x_Year_Install);


                tool.ExecuteStored("Data Source =nova; User Id =NEWGIS; Password =NEPS; ", "webview.WV_BOQGEN_SP",
                    CommandType.StoredProcedure, oraPrm, false);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        #endregion

        //----------------------------------------------NETELEM

        #region GC_NETELEM

        public class NETELEM
        {
            public string NET_SCHEME_NAME;
            public string NET_MIN_MATERIAL;
            public string NET_QTY;
            public string NET_PU_ID;
            public string NET_BILL_RATE;
            public string NET_PU_DESC;
            public string NET_PU_UOM;
            public string NET_PU_INST_PR;
            public string NET_PU_MAT_PR;
            public string ISP_OSP;
            public string NET_CONTRACT_NO;
            public string NET_ITEM_NO;
            public string NET_CONTRACT_DESC;
            public string NET_PRICE;
            public string CHECK_PU_CONTRACT;
        }

        public class OSP_NETELEM
        {
            public int max;
            public List<NETELEM> NETELEMList = new List<NETELEM>();
        }

        public class ISP_NETELEM
        {
            public int max;
            public List<NETELEM> NETELEMList = new List<NETELEM>();
        }

        public bool BOQ_GENERATE(string schemeName, string checkISP)
        {
            //string sqlCmd = "";
            bool success = false;
            string result;
            Tools tool = new Tools();
            System.Diagnostics.Debug.WriteLine("status : " + checkISP);
            try
            {
                OracleParameter[] oraPrm = new OracleParameter[2];

                oraPrm[0] = new OracleParameter("schemeName", OracleDbType.Varchar2);
                oraPrm[0].Value = schemeName;
                oraPrm[1] = new OracleParameter("checkISP", OracleDbType.Varchar2);
                oraPrm[1].Value = checkISP;

                result = tool.ExecuteStored(connString, "BOQ_GENERATE", CommandType.StoredProcedure, oraPrm, false);
                if (result != "fail")
                    success = true;

                System.Diagnostics.Debug.WriteLine("status : " + result);
                //sqlCmd = "EXECUTE BOQ_GENERATE('" + schemeName + "');";
                //System.Diagnostics.Debug.WriteLine("SQLCMD : " + sqlCmd);
                //using (Entities ctxData = new Entities())
                //{
                //    success = tool.ExecuteSql(ctxData, sqlCmd);
                //}
                //System.Diagnostics.Debug.WriteLine("status : " + success);

            }
            catch
            {
            }
            return success;
        }
        public bool BOQ_POPULATE_ISP(string schemeName, string connDB)
        {
            
            BOQNrmEngine engine = new BOQNrmEngine();


            string[] arr = connDB.Split('|');
            string IP = arr[0];
            string SID = arr[1];
            string Password = arr[2];
            //using (OleDbConnection conn = UtilityDb.GetConnection("NEPSTRN", "NEPS", "NEPSTRN"))
            //{
            //    System.Diagnostics.Debug.WriteLine("based");
            //string scheme_name = "PCG-6-279-2004";

            //"10.41.63.176/NEPSPROD", "neps", "nepsprod"
            using (OracleConnection conn = UtilityDb2.GetConnection(IP, SID, Password))
            {
                string errorCode = "";
                return engine.GenerateBOQItems(schemeName, conn, ref errorCode);
            }
            
            //return engine.GenerateBOQItems(schemeName, conn, ref errorCode);
           
            //    //if (!engine.GenerateBOQItems(schemeName, conn, ref errorCode))
            //    //{
            //    //    System.Diagnostics.Debug.WriteLine("kluo based");
            //    //    return false;
            //    //    // errorCode contains something in the event of an error.. 
            //    //}
            //    //else
            //    //{
            //    //    System.Diagnostics.Debug.WriteLine("kluo based");
            //    //    return true;
            //    //}
            //}
            //return "nrm1";
        }

        public bool BOQ_GENERATE_CONTRACT(string schemeName, string checkISP)
        {
            //string sqlCmd = "";
            bool success = false;
            string result;
            Tools tool = new Tools();
            try
            {
                OracleParameter[] oraPrm = new OracleParameter[2];

                oraPrm[0] = new OracleParameter("schemeName", OracleDbType.Varchar2);
                oraPrm[0].Value = schemeName;
                oraPrm[1] = new OracleParameter("checkISP", OracleDbType.Varchar2);
                oraPrm[1].Value = checkISP;

                result = tool.ExecuteStored(connString, "BOQ_GENERATE_CONTRACT", CommandType.StoredProcedure, oraPrm, false);
                if (result != "fail")
                    success = true;

                System.Diagnostics.Debug.WriteLine("status : " + result);
                //sqlCmd = "EXECUTE BOQ_GENERATE('" + schemeName + "');";
                //System.Diagnostics.Debug.WriteLine("SQLCMD : " + sqlCmd);
                //using (Entities ctxData = new Entities())
                //{
                //    success = tool.ExecuteSql(ctxData, sqlCmd);
                //}
                //System.Diagnostics.Debug.WriteLine("status : " + success);
            }
            catch
            {
            }
            return success;
        }

        public bool BOQ_GENERATE_CONTRACT_ISP(string schemeName)
        {
            //string sqlCmd = "";
            bool success = false;
            string result;
            Tools tool = new Tools();
            try
            {
                OracleParameter[] oraPrm = new OracleParameter[1];

                oraPrm[0] = new OracleParameter("schemeName", OracleDbType.Varchar2);
                oraPrm[0].Value = schemeName;

                result = tool.ExecuteStored(connString, "BOQ_GENERATE_CONTRACT_ISP", CommandType.StoredProcedure, oraPrm, false);
                if (result != "fail")
                    success = true;

                System.Diagnostics.Debug.WriteLine("status : " + result);
                //sqlCmd = "EXECUTE BOQ_GENERATE('" + schemeName + "');";
                //System.Diagnostics.Debug.WriteLine("SQLCMD : " + sqlCmd);
                //using (Entities ctxData = new Entities())
                //{
                //    success = tool.ExecuteSql(ctxData, sqlCmd);
                //}
                //System.Diagnostics.Debug.WriteLine("status : " + success);
            }
            catch
            {
            }
            return success;
        }

        public bool BOQ_GEMS(string schemeName, string checkJKH_CONTRACT, string owneruser)
        {
            //string sqlCmd = "";
            bool success = false;
            string result;
            Tools tool = new Tools();
            try
            {
                
                OracleParameter[] oraPrm = new OracleParameter[3];

                oraPrm[0] = new OracleParameter("schemeName", OracleDbType.Varchar2);
                oraPrm[0].Value = schemeName;
                oraPrm[1] = new OracleParameter("checkJKH_CONTRACT", OracleDbType.Varchar2);
                oraPrm[1].Value = checkJKH_CONTRACT;
                oraPrm[2] = new OracleParameter("ownerUser", OracleDbType.Varchar2);
                oraPrm[2].Value = owneruser;

                result = tool.ExecuteStored(connString, "BOQ_GEM", CommandType.StoredProcedure, oraPrm, false);
                if (result != "fail")
                    success = true;

                System.Diagnostics.Debug.WriteLine("status : " + result);
            }
            catch
            {
            }
            return success;
        }

        #endregion

        #region Estimate

        public class Estimate
        {
            public string SCHEME_NAME;
            public string LAB_BURUH;
            public string LAB_BIASA;
            public string LAB_KANAN;
            public string LAB_PEMBANTU;
            public string LAB_EST_TOTAL;
            public string INC_CTRT_SUP_HOURS;
            public string INC_CTRT_OT_SUP_HOURS;
            public string INC_CTRT_VALUE;
            public string INC_CTRT_OT_VALUE;
            public string INC_EXEC_MILEAGE;
            public string INC_NON_EXEC_MILEAGE;
            public string INC_TOTAL_HOURS;
            public string INC_TOTAL_VALUE;
            public string INC_TOTAL_MILEAGE;
            public string MAIN_PU_ID;
            public string MAIN_PU_DESC;
            public string MAIN_PU_MAT_PR;
            public string MAIN_PU_INST_PR;
            public string MAIN_BILL_RATE;
            public string MAIN_PU_QTY;
            public string MAIN_OLD_MAT_PR;
            public string MAIN_OLD_INSTALL_PR;
            public string MAIN_CONSTRUCT_BY;
            public string MAIN_RECVR_QTY;
            public string MAIN_CONTRACT_NO;
            public string MAIN_ITEM_NO;
            public string MAIN_CONTRACT_DESC;
            public string MAIN_NET_PRICE;
            public string MAIN_PU_UOM;
            public string BP_JAM_BURUH;
            public string BP_JAM_NILAI;
            public string BP_OT_BURUH;
            public string BP_OT_NILAI;
            public string BP_JKH_BAHAN;
            public string BP_JKH_PEL;
            public string BP_TM_BAHAN;
            public string BP_TM_PEL;
            public string BP_TOTAL_BURUH;
            public string BP_TOTAL_NILAI;
            public string BP_TOTAL_BAHAN;
            public string BP_TOTAL_PELBAGAI;
            public string BP_TOTAL_JKH;
            public string BP_TOTAL_TM;
            public string BP_TOTAL_KOS;
            public string BP_TOTAL_TOTAL;
            public string BP_START_DATE;
            public string BP_END_DATE;
            public string SUM_LBR_OT;
            public string SUM_LBR_SALARY;
            public string SUM_MATERIAL;
            public string SUM_JKH;
            public string SUM_TNT_MILEAGE;
            public string SUM_MILLING;
            public string SUM_MISC;
            public string SUM_CONTRACT;
            public string SUM_TOTAL;
        }

        public class Estimate_Lab
        {
            public int max;
            public List<Estimate> LabList = new List<Estimate>();
        }

        public class Estimate_Inc
        {
            public int max;
            public List<Estimate> IncList = new List<Estimate>();
        }

        public class Estimate_Main
        {
            public int max;
            public List<Estimate> MainList = new List<Estimate>();
        }

        public class Estimate_BPlanEstimate
        {
            public int max;
            public List<Estimate> BPlanEstimate = new List<Estimate>();
        }

        public class SUMM_ProjCost
        {
            public int max;
            public List<Estimate> ProjCost = new List<Estimate>();
        }

        public bool Delete_BOQ_PUID(string schemeName, string puid, string billrate)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            string inst_pr = "";
            string mat_pr = "";
            string qty = "";
            using (Entities ctxData = new Entities())
            {
                var query = from a in ctxData.WV_BOQ_DATA
                            where a.SCHEME_NAME == schemeName && a.PU_ID == puid && a.RATE_INDICATOR == billrate
                            select new { a.BQ_INSTALL_PRICE, a.BQ_MAT_PRICE, a.PU_QTY };
                foreach (var a in query)
                {
                    inst_pr = a.BQ_INSTALL_PRICE.ToString();
                    mat_pr = a.BQ_MAT_PRICE.ToString();
                    qty = a.PU_QTY.ToString();
                }
            }
           
            sqlCmd = "DELETE FROM WV_BOQ_DATA WHERE SCHEME_NAME = '" + schemeName + "' AND PU_ID = " + puid + " AND RATE_INDICATOR = '" + billrate + "'";
            System.Diagnostics.Debug.WriteLine(sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }
            System.Diagnostics.Debug.WriteLine(success);

            System.Diagnostics.Debug.WriteLine("---test add ---");
            decimal TOT_VAL;
            using (Entities ctxdata = new Entities())
            {
                var total = (from p in ctxdata.WV_BOQ_SUMMARY
                             where p.SCHEME_NAME == schemeName
                             select p.T_JKH).Single();
                TOT_VAL = Convert.ToDecimal(total) - ((Convert.ToDecimal(qty) * Convert.ToDecimal(inst_pr)) + (Convert.ToDecimal(qty) * Convert.ToDecimal(mat_pr)));

                string sqlCmdUpdate = "UPDATE WV_BOQ_SUMMARY SET T_JKH = '" + TOT_VAL +
                    "' WHERE SCHEME_NAME ='" + schemeName + "'";

                System.Diagnostics.Debug.WriteLine(sqlCmdUpdate);
                using (Entities ctxData = new Entities())
                {
                    success = tool.ExecuteSql(ctxData, sqlCmdUpdate);
                }
            }
            return success;
        }


        public bool Delete_BOQ_Contract(string schemeName, string contractNo, string itemNo)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            string netPrice = "";
            string qty = "";
            int itemNo_con = Convert.ToInt32(itemNo);
            using (Entities ctxData = new Entities())
            {
                var query = from a in ctxData.WV_BOQ_DATA
                            where a.SCHEME_NAME == schemeName && a.CONTRACT_NO == contractNo && a.ITEM_NO == itemNo_con
                            select new { a.NET_PRICE, a.PU_QTY };
                foreach (var a in query)
                {
                    netPrice = a.NET_PRICE.ToString();
                    qty = a.PU_QTY.ToString();
                }
            }

            sqlCmd = "DELETE FROM WV_BOQ_DATA WHERE SCHEME_NAME = '" + schemeName + "' AND CONTRACT_NO = '" + contractNo + "' AND ITEM_NO = '" + itemNo + "'";
            System.Diagnostics.Debug.WriteLine(sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }
            System.Diagnostics.Debug.WriteLine(success);

            System.Diagnostics.Debug.WriteLine("---test add ---");
            decimal TOT_VAL;
            using (Entities ctxdata = new Entities())
            {
                var total = (from p in ctxdata.WV_BOQ_SUMMARY
                             where p.SCHEME_NAME == schemeName
                             select p.CONTRACT).Single();
                TOT_VAL = Convert.ToDecimal(total) - (Convert.ToDecimal(qty) * Convert.ToDecimal(netPrice));

                string sqlCmdUpdate = "UPDATE WV_BOQ_SUMMARY SET CONTRACT = '" + TOT_VAL +
                    "' WHERE SCHEME_NAME ='" + schemeName + "'";

                System.Diagnostics.Debug.WriteLine(sqlCmdUpdate);
                using (Entities ctxData = new Entities())
                {
                    success = tool.ExecuteSql(ctxData, sqlCmdUpdate);
                }
            }
            return success;
        }



        [WebMethod]
        public SUMM_ProjCost Get_ProjCost(string schemeName)
        {
            SUMM_ProjCost estimate = new SUMM_ProjCost();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_BOQ_SUMMARY
                             where c.SCHEME_NAME == schemeName
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                estimate.max = count;
                if (count > 0)
                {
                    var query = (from d in ctxData.WV_BOQ_SUMMARY
                                 where d.SCHEME_NAME == schemeName
                                 select new { d.LBR_OT, d.LBR_SALARY, d.MILLING, d.MISC, d.TNT_MILEAGE, d.T_JKH, d.MATERIAL, d.CONTRACT });

                    foreach (var a in query)
                    {
                        Estimate projCost = new Estimate();
                        int temp = 0;
                        projCost.SCHEME_NAME = schemeName;

                        if (a.LBR_OT.ToString() == "" || a.LBR_OT == null)
                            projCost.SUM_LBR_OT = String.Format("{0:0.00}", temp);
                        else
                            projCost.SUM_LBR_OT = String.Format("{0:0.00}", a.LBR_OT);

                        if (a.LBR_SALARY.ToString() == "" || a.LBR_SALARY == null)
                            projCost.SUM_LBR_SALARY = String.Format("{0:0.00}", temp);
                        else
                            projCost.SUM_LBR_SALARY = String.Format("{0:0.00}", a.LBR_SALARY);

                        if (a.MILLING.ToString() == "" || a.MILLING == null)
                            projCost.SUM_MILLING = String.Format("{0:0.00}", temp);
                        else
                            projCost.SUM_MILLING = String.Format("{0:0.00}", a.MILLING);

                        if (a.MISC.ToString() == "" || a.MISC == null)
                            projCost.SUM_MISC = String.Format("{0:0.00}", temp);
                        else
                            projCost.SUM_MISC = String.Format("{0:0.00}", a.MISC);

                        if (a.TNT_MILEAGE.ToString() == "" || a.TNT_MILEAGE == null)
                            projCost.SUM_TNT_MILEAGE = String.Format("{0:0.00}", temp);
                        else
                            projCost.SUM_TNT_MILEAGE = String.Format("{0:0.00}", a.TNT_MILEAGE);

                        if (a.T_JKH.ToString() == "" || a.T_JKH == null)
                            projCost.SUM_JKH = String.Format("{0:0.00}", temp);
                        else
                            projCost.SUM_JKH = String.Format("{0:0.00}", a.T_JKH);

                        if (a.MATERIAL.ToString() == "" || a.MATERIAL == null)
                            projCost.SUM_MATERIAL = String.Format("{0:0.00}", temp);
                        else
                            projCost.SUM_MATERIAL = String.Format("{0:0.00}", a.MATERIAL);


                        if (a.CONTRACT.ToString() == "" || a.CONTRACT == null)
                            projCost.SUM_CONTRACT = String.Format("{0:0.00}", temp);
                        else
                            projCost.SUM_CONTRACT = String.Format("{0:0.00}", a.CONTRACT);

                        double totalProjCost = Convert.ToDouble(projCost.SUM_CONTRACT) + Convert.ToDouble(projCost.SUM_JKH) + Convert.ToDouble(projCost.SUM_MATERIAL) + Convert.ToDouble(projCost.SUM_LBR_OT) + Convert.ToDouble(projCost.SUM_LBR_SALARY) + Convert.ToDouble(projCost.SUM_MILLING) + Convert.ToDouble(projCost.SUM_MISC) + Convert.ToDouble(projCost.SUM_TNT_MILEAGE);
                        projCost.SUM_TOTAL = String.Format("{0:0.00}", totalProjCost);
                        System.Diagnostics.Debug.WriteLine("JUMLAH : " + projCost.SUM_CONTRACT);
                        estimate.ProjCost.Add(projCost);
                    }
                }
                else
                {
                    Estimate projCost = new Estimate();
                    int temp = 0;
                    projCost.SCHEME_NAME = schemeName;
                    projCost.SUM_LBR_OT = String.Format("{0:0.00}", temp);
                    projCost.SUM_LBR_SALARY = String.Format("{0:0.00}", temp);
                    projCost.SUM_MILLING = String.Format("{0:0.00}", temp);
                    projCost.SUM_MISC = String.Format("{0:0.00}", temp);
                    projCost.SUM_TNT_MILEAGE = String.Format("{0:0.00}", temp);
                    projCost.SUM_JKH = String.Format("{0:0.00}", temp);
                    projCost.SUM_CONTRACT = String.Format("{0:0.00}", temp);
                    projCost.SUM_MATERIAL = String.Format("{0:0.00}", temp);
                    double totalProjCost = Convert.ToDouble(projCost.SUM_CONTRACT) + Convert.ToDouble(projCost.SUM_JKH) + Convert.ToDouble(projCost.SUM_MATERIAL) + Convert.ToDouble(projCost.SUM_LBR_OT) + Convert.ToDouble(projCost.SUM_LBR_SALARY) + Convert.ToDouble(projCost.SUM_MILLING) + Convert.ToDouble(projCost.SUM_MISC) + Convert.ToDouble(projCost.SUM_TNT_MILEAGE);
                    projCost.SUM_TOTAL = String.Format("{0:0.00}", totalProjCost);
                    estimate.ProjCost.Add(projCost);
                }

            }
            return estimate;
        }

        [WebMethod]
        public Estimate_Lab GetEstimate_Lab(string schemeName)
        {
            Estimate_Lab estimate = new Estimate_Lab();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_ESTM_LAB_USAGE
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                estimate.max = count;

                var query = (from d in ctxData.WV_ESTM_LAB_USAGE
                             where d.SCHEME_NAME == schemeName
                             select new { d.BURUH, d.BIASA, d.KANAN, d.PEMBANTU });

                foreach (var a in query)
                {
                    Estimate Estimate_Lab = new Estimate();

                    Estimate_Lab.SCHEME_NAME = schemeName;
                    Estimate_Lab.LAB_BIASA = String.Format("{0:0.00}", a.BIASA);
                    Estimate_Lab.LAB_BURUH = String.Format("{0:0.00}", a.BURUH);
                    Estimate_Lab.LAB_KANAN = String.Format("{0:0.00}", a.KANAN);
                    Estimate_Lab.LAB_PEMBANTU = String.Format("{0:0.00}", a.PEMBANTU);
                    Estimate_Lab.LAB_EST_TOTAL = String.Format("{0:0.00}", a.BIASA + a.BURUH + a.KANAN + a.PEMBANTU);
                    estimate.LabList.Add(Estimate_Lab);

                    System.Diagnostics.Debug.WriteLine(Decimal.Parse(a.BURUH.ToString()).ToString() + " : " + Decimal.Parse(a.KANAN.ToString()).ToString("c"));
                }

            }
            if (estimate.LabList.Count != 0)
            {
                Tools tool = new Tools();
                string sqlCmd = "";

                sqlCmd = "UPDATE WV_ESTM_INC_COST SET CTRT_SUP_HOURS = '" + estimate.LabList[0].LAB_EST_TOTAL +
                    "' WHERE SCHEME_NAME ='" + schemeName + "'";

                using (Entities ctxData = new Entities())
                {
                    tool.ExecuteSql(ctxData, sqlCmd);
                }
            }

            return estimate;
        }

        [WebMethod]
        public Estimate_Inc GetEstimate_Inc(string schemeName)
        {
            Estimate_Inc estimate = new Estimate_Inc();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_ESTM_INC_COST
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                estimate.max = count;

                var query = (from d in ctxData.WV_ESTM_INC_COST
                             where d.SCHEME_NAME == schemeName
                             select new { d.CTRT_SUP_HOURS, d.CTRT_OT_SUP_HOURS, d.CTRT_VALUE, d.CTRT_OT_VALUE, d.EXEC_MILEAGE, d.NON_EXEC_MILEAGE });

                foreach (var a in query)
                {
                    Estimate Estimate_Inc = new Estimate();

                    Estimate_Inc.SCHEME_NAME = schemeName;
                    Estimate_Inc.INC_CTRT_SUP_HOURS = String.Format("{0:0.00}", a.CTRT_SUP_HOURS);
                    Estimate_Inc.INC_CTRT_OT_SUP_HOURS = String.Format("{0:0.00}", a.CTRT_OT_SUP_HOURS);
                    Estimate_Inc.INC_CTRT_VALUE = String.Format("{0:0.00}", a.CTRT_VALUE);
                    Estimate_Inc.INC_CTRT_OT_VALUE = String.Format("{0:0.00}", a.CTRT_OT_VALUE);
                    Estimate_Inc.INC_EXEC_MILEAGE = String.Format("{0:0.00}", a.EXEC_MILEAGE);
                    Estimate_Inc.INC_NON_EXEC_MILEAGE = String.Format("{0:0.00}", a.NON_EXEC_MILEAGE);
                    Estimate_Inc.INC_TOTAL_HOURS = String.Format("{0:0.00}", a.CTRT_SUP_HOURS + a.CTRT_OT_SUP_HOURS);
                    Estimate_Inc.INC_TOTAL_VALUE = String.Format("{0:0.00}", a.CTRT_VALUE + a.CTRT_OT_VALUE);
                    Estimate_Inc.INC_TOTAL_MILEAGE = String.Format("{0:0.00}", a.EXEC_MILEAGE + a.NON_EXEC_MILEAGE);

                    estimate.IncList.Add(Estimate_Inc);

                    // System.Diagnostics.Debug.WriteLine(Decimal.Parse(a.BURUH.ToString()).ToString() + " : " + Decimal.Parse(a.KANAN.ToString()).ToString("c"));
                }

            }
            return estimate;
        }

        [WebMethod]
        public Estimate_Main GetEstimate_Main(string id)
        {
            string[] arr = id.Split('/');
            string puid = arr[0];
            string billrate = arr[1];
            System.Diagnostics.Debug.WriteLine("#1 : " + puid + " #2 : " + billrate);
            Estimate_Main estimate = new Estimate_Main();

            if (billrate == "DAY")
                billrate = "D";
            else if (billrate == "NIGHT")
                billrate = "N";
            else if (billrate == "WEEKEND")
                billrate = "W";
            else if (billrate == "HOLIDAY")
                billrate = "P";

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_PU_MAST
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                estimate.max = count;

                var query = (from d in ctxData.WV_PU_MAST
                             where d.PU_ID == puid && d.BILL_RATE == billrate
                             select new { d.PU_DESC, d.PU_MAT_PR, d.PU_INST_PR });

                foreach (var a in query)
                {
                    Estimate Estimate_Main = new Estimate();

                    Estimate_Main.MAIN_PU_ID = puid;
                    Estimate_Main.MAIN_BILL_RATE = billrate;
                    Estimate_Main.MAIN_PU_DESC = a.PU_DESC;
                    Estimate_Main.MAIN_PU_MAT_PR = a.PU_MAT_PR.ToString();
                    Estimate_Main.MAIN_PU_INST_PR = a.PU_INST_PR.ToString();

                    estimate.MainList.Add(Estimate_Main);

                    // System.Diagnostics.Debug.WriteLine(Decimal.Parse(a.BURUH.ToString()).ToString() + " : " + Decimal.Parse(a.KANAN.ToString()).ToString("c"));
                }

            }
            return estimate;
        }



        [WebMethod]
        public Estimate_Main GetEstimate_Main_BOQ(string id, string schemeName)
        {
            string[] arr = id.Split('/');
            string puid = arr[0];
            string billrate = arr[1];
            System.Diagnostics.Debug.WriteLine("#1 : " + puid + " #2 : " + billrate);
            Estimate_Main estimate = new Estimate_Main();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_BOQ_DATA
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                estimate.max = count;

                var query = (from d in ctxData.WV_BOQ_DATA
                             where d.PU_ID == puid && d.RATE_INDICATOR == billrate && d.SCHEME_NAME == schemeName
                             select new { d.PU_DESC, d.BQ_MAT_PRICE, d.BQ_INSTALL_PRICE, d.PU_QTY, d.OLD_MAT_PR});

                foreach (var a in query)
                {
                    Estimate Estimate_Main = new Estimate();
                    Estimate_Main.MAIN_PU_ID = puid;
                    Estimate_Main.MAIN_BILL_RATE = billrate;
                    Estimate_Main.MAIN_PU_DESC = a.PU_DESC;
                    Estimate_Main.MAIN_PU_MAT_PR = a.BQ_MAT_PRICE.ToString();
                    Estimate_Main.MAIN_PU_INST_PR = a.BQ_INSTALL_PRICE.ToString();
                    Estimate_Main.MAIN_PU_QTY = a.PU_QTY.ToString();
                    Estimate_Main.MAIN_OLD_MAT_PR = a.OLD_MAT_PR.ToString();
                   

                    estimate.MainList.Add(Estimate_Main);

                    // System.Diagnostics.Debug.WriteLine(Decimal.Parse(a.BURUH.ToString()).ToString() + " : " + Decimal.Parse(a.KANAN.ToString()).ToString("c"));
                }

            }
            return estimate;
        }

        [WebMethod]
        public Estimate_Main GetEstimate_Main_Contract(string id, string schemeName)
        {
            string[] arr = id.Split('/');
            string contractNo = arr[0];
            string ItemNo = arr[1];
            System.Diagnostics.Debug.WriteLine("#1 : " + contractNo + " #2 : " + ItemNo);
            Estimate_Main estimate = new Estimate_Main();
            int itemNo_con = Convert.ToInt32(ItemNo);
            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_CONTRACT_MAST
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                estimate.max = count;

                var query = (from d in ctxData.WV_CONTRACT_MAST
                             where d.CONTRACT_NO == contractNo && d.ITEM_NO == itemNo_con
                             select new { d.SHORT_TEXT, d.NET_PRICE, d.ORDER_UNIT });
                
                int Countqty = (from a in ctxData.WV_BOQ_DATA
                                where a.CONTRACT_NO == contractNo && a.ITEM_NO == itemNo_con && a.SCHEME_NAME == schemeName
                           select a.PU_QTY).Count();
                string qty = "";
                if (Countqty == 1)
                {
                    qty = (from a in ctxData.WV_BOQ_DATA
                           where a.CONTRACT_NO == contractNo && a.ITEM_NO == itemNo_con && a.SCHEME_NAME == schemeName
                           select a.PU_QTY).Single().ToString();
                }

                foreach (var a in query)
                {
                    Estimate Estimate_Main = new Estimate();

                    Estimate_Main.MAIN_CONTRACT_NO = contractNo;
                    Estimate_Main.MAIN_ITEM_NO = ItemNo;
                    Estimate_Main.MAIN_CONTRACT_DESC = a.SHORT_TEXT;
                    Estimate_Main.MAIN_NET_PRICE = a.NET_PRICE.ToString();
                    Estimate_Main.MAIN_PU_UOM = a.ORDER_UNIT;
                    Estimate_Main.MAIN_PU_QTY = qty;
                    estimate.MainList.Add(Estimate_Main);

                    // System.Diagnostics.Debug.WriteLine(Decimal.Parse(a.BURUH.ToString()).ToString() + " : " + Decimal.Parse(a.KANAN.ToString()).ToString("c"));
                }



            }
            return estimate;
        }

        [WebMethod]
        public Estimate_BPlanEstimate GetBussinessPlan_Estimate(string schemeName)
        {

            Estimate_BPlanEstimate estimate = new Estimate_BPlanEstimate();

            using (Entities ctxData = new Entities())
            {
                int count = (from c in ctxData.WV_ESTM_DATA
                             select c).Count();

                System.Diagnostics.Debug.WriteLine(count);
                estimate.max = count;

                var query = (from d in ctxData.WV_ESTM_DATA
                             where d.SCHEME_NAME == schemeName
                             select new { d.JAM_BURUH, d.JAM_NILAI, d.JKH_BAHAN, d.JKH_PEL, d.OT_BURUH, d.OT_NILAI, d.TM_BAHAN, d.TM_PEL });

                var queryJob = (from d in ctxData.G3E_JOB
                                where d.SCHEME_NAME == schemeName
                                select new { d.PLAN_START_DATE, d.PLAN_END_DATE });
                foreach (var a in query)
                {
                    Estimate Estimate_BP = new Estimate();

                    foreach (var b in queryJob)
                    {
                        Estimate_BP.BP_START_DATE = b.PLAN_START_DATE.ToString();
                        Estimate_BP.BP_END_DATE = b.PLAN_END_DATE.ToString();
                    }

                    Estimate_BP.BP_JAM_BURUH = String.Format("{0:0.00}", a.JAM_BURUH);
                    Estimate_BP.BP_JAM_NILAI = String.Format("{0:0.00}", a.JAM_NILAI);
                    Estimate_BP.BP_JKH_BAHAN = String.Format("{0:0.00}", a.JKH_BAHAN);
                    Estimate_BP.BP_JKH_PEL = String.Format("{0:0.00}", a.JKH_PEL);
                    Estimate_BP.BP_OT_BURUH = String.Format("{0:0.00}", a.OT_BURUH);
                    Estimate_BP.BP_OT_NILAI = String.Format("{0:0.00}", a.OT_NILAI);
                    Estimate_BP.BP_TM_BAHAN = String.Format("{0:0.00}", a.TM_BAHAN);
                    Estimate_BP.BP_TM_PEL = String.Format("{0:0.00}", a.TM_PEL);
                    Estimate_BP.BP_TOTAL_BURUH = String.Format("{0:0.00}", a.JAM_BURUH + a.OT_BURUH);
                    Estimate_BP.BP_TOTAL_NILAI = String.Format("{0:0.00}", a.JAM_NILAI + a.OT_NILAI);
                    Estimate_BP.BP_TOTAL_BAHAN = String.Format("{0:0.00}", a.JKH_BAHAN + a.TM_BAHAN);
                    Estimate_BP.BP_TOTAL_PELBAGAI = String.Format("{0:0.00}", a.JKH_PEL + a.TM_PEL);
                    Estimate_BP.BP_TOTAL_JKH = String.Format("{0:0.00}", a.JKH_BAHAN + a.JKH_PEL);
                    Estimate_BP.BP_TOTAL_TM = String.Format("{0:0.00}", a.TM_BAHAN + a.TM_PEL);
                    Estimate_BP.BP_TOTAL_KOS = String.Format("{0:0.00}", (a.JKH_BAHAN + a.JKH_PEL) + (a.TM_BAHAN + a.TM_PEL));
                    Estimate_BP.BP_TOTAL_TOTAL = String.Format("{0:0.00}", (a.JAM_NILAI + a.OT_NILAI) + (a.JKH_BAHAN + a.JKH_PEL) + (a.TM_BAHAN + a.TM_PEL));

                    estimate.BPlanEstimate.Add(Estimate_BP);

                    // System.Diagnostics.Debug.WriteLine(Decimal.Parse(a.BURUH.ToString()).ToString() + " : " + Decimal.Parse(a.KANAN.ToString()).ToString("c"));
                }



            }
            return estimate;
        }

        public bool UpdateDataSUM(Estimate newSUM, string schemeName)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
             int queryCount;

            using (Entities ctxData = new Entities())
            {
                queryCount = (from a in ctxData.WV_BOQ_SUMMARY
                             where a.SCHEME_NAME == schemeName
                             select a).Count();
            }

            if (queryCount > 0)
            {
                sqlCmd = "UPDATE WV_BOQ_SUMMARY SET LBR_OT = '" + newSUM.SUM_LBR_OT +
                    "', LBR_SALARY = '" + newSUM.SUM_LBR_SALARY +
                    "', TNT_MILEAGE = '" + newSUM.SUM_TNT_MILEAGE +
                    "', MILLING = '" + newSUM.SUM_MILLING +
                    "', MISC = '" + newSUM.SUM_MISC +
                    "' WHERE SCHEME_NAME ='" + schemeName + "'";

                System.Diagnostics.Debug.WriteLine(sqlCmd);
                using (Entities ctxData = new Entities())
                {
                    success = tool.ExecuteSql(ctxData, sqlCmd);
                }

               
            }
            else
            {
                success = true;

                string sqlStr = "insert into WV_BOQ_SUMMARY (SCHEME_NAME, LBR_OT, LBR_SALARY, TNT_MILEAGE, MILLING, MISC ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[6];
                oraPrm[0] = new OracleParameter("v_SCHEME_NAME", OracleDbType.Varchar2);
                oraPrm[0].Value = schemeName;
                oraPrm[1] = new OracleParameter("v_LBR_OT", OracleDbType.Varchar2);
                oraPrm[1].Value = newSUM.SUM_LBR_OT;
                oraPrm[2] = new OracleParameter("v_LBR_SALARY", OracleDbType.Varchar2);
                oraPrm[2].Value = newSUM.SUM_LBR_SALARY;
                oraPrm[3] = new OracleParameter("v_TNT_MILEAGE", OracleDbType.Varchar2);
                oraPrm[3].Value = newSUM.SUM_TNT_MILEAGE;
                oraPrm[4] = new OracleParameter("v_MILLING", OracleDbType.Varchar2);
                oraPrm[4].Value = newSUM.SUM_MILLING;
                oraPrm[5] = new OracleParameter("v_MISC", OracleDbType.Varchar2);
                oraPrm[5].Value = newSUM.SUM_MISC;
                

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                // System.Diagnostics.Debug.WriteLine("val.. "+newEstMain.MAIN_PU_INST_PR);
               
            }

            return success;

        }

        public bool AddDataMaintenance(Estimate updateMain, string schemeName, string puid, string billrate)
        {
            Tools tool = new Tools();
            bool success = true;
            string UOM = "";

            if (billrate == "DAY")
                billrate = "D";
            else if (billrate == "NIGHT")
                billrate = "N";
            else if (billrate == "WEEKEND")
                billrate = "W";
            else if (billrate == "HOLIDAY")
                billrate = "P";

            using (Entities ctxData = new Entities())
            {
                UOM = (from a in ctxData.WV_PU_MAST
                       where a.PU_ID == puid && a.BILL_RATE == billrate
                       select a.PU_UOM).Single();
            }

            string sqlStr = "insert into WV_BOQ_DATA (SCHEME_NAME, PU_ID, PU_DESC, RATE_INDICATOR, PU_QTY, OLD_MAT_PR, BQ_MAT_PRICE, BQ_INSTALL_PRICE, PU_UOM  ";
            sqlStr += ") values ";

            OracleParameter[] oraPrm = new OracleParameter[9];
            oraPrm[0] = new OracleParameter("v_SCHEME_NAME", OracleDbType.Varchar2);
            oraPrm[0].Value = schemeName;
            oraPrm[1] = new OracleParameter("v_PU_ID", OracleDbType.Varchar2);
            oraPrm[1].Value = puid;
            oraPrm[2] = new OracleParameter("v_PU_DESC", OracleDbType.Varchar2);
            oraPrm[2].Value = updateMain.MAIN_PU_DESC;
            oraPrm[3] = new OracleParameter("v_RATE_INDICATOR", OracleDbType.Varchar2);
            oraPrm[3].Value = billrate;
            oraPrm[4] = new OracleParameter("v_PU_QTY", OracleDbType.Varchar2);
            oraPrm[4].Value = updateMain.MAIN_PU_QTY;
            oraPrm[5] = new OracleParameter("v_OLD_MAT_PR", OracleDbType.Varchar2);
            oraPrm[5].Value = updateMain.MAIN_OLD_MAT_PR;
            oraPrm[6] = new OracleParameter("v_BQ_MAT_PRICE", OracleDbType.Varchar2);
            oraPrm[6].Value = updateMain.MAIN_PU_MAT_PR;
            oraPrm[7] = new OracleParameter("v_BQ_INSTALL_PRICE", OracleDbType.Varchar2);
            oraPrm[7].Value = updateMain.MAIN_PU_INST_PR;
            oraPrm[8] = new OracleParameter("v_PU_UOM", OracleDbType.Varchar2);
            oraPrm[8].Value = UOM;


            tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
            System.Diagnostics.Debug.WriteLine("---test add ---");
            decimal TOT_VAL;
            using (Entities ctxdata = new Entities())
            {
                int countdata = (from p in ctxdata.WV_BOQ_SUMMARY
                                 where p.SCHEME_NAME == schemeName
                                 select p).Count();
                System.Diagnostics.Debug.WriteLine("countdata :" + countdata);
                if (countdata == 0)
                {
                    TOT_VAL = (Convert.ToDecimal(updateMain.MAIN_PU_QTY) * Convert.ToDecimal(updateMain.MAIN_PU_INST_PR)) + (Convert.ToDecimal(updateMain.MAIN_PU_QTY) * Convert.ToDecimal(updateMain.MAIN_PU_MAT_PR));
                    System.Diagnostics.Debug.WriteLine("TOT_VAL " + TOT_VAL);
                    string sqlStrTot = "insert into WV_BOQ_SUMMARY (SCHEME_NAME, T_JKH ";
                    sqlStrTot += ") values ";

                    OracleParameter[] oraPrmTot = new OracleParameter[2];
                    oraPrmTot[0] = new OracleParameter("v_SCHEME_NAME", OracleDbType.Varchar2);
                    oraPrmTot[0].Value = schemeName;
                    oraPrmTot[1] = new OracleParameter("v_T_JKH", OracleDbType.Varchar2);
                    oraPrmTot[1].Value = TOT_VAL;

                    tool.ExecuteStored(connString, sqlStrTot, CommandType.StoredProcedure, oraPrmTot, false);
                }
                else
                {

                    var total = (from p in ctxdata.WV_BOQ_SUMMARY
                                 where p.SCHEME_NAME == schemeName
                                 select p.T_JKH).Single();
                    TOT_VAL = Convert.ToDecimal(total) + (Convert.ToDecimal(updateMain.MAIN_PU_QTY) * Convert.ToDecimal(updateMain.MAIN_PU_INST_PR)) + (Convert.ToDecimal(updateMain.MAIN_PU_QTY) * Convert.ToDecimal(updateMain.MAIN_PU_MAT_PR));

                    string sqlCmdUpdate = "UPDATE WV_BOQ_SUMMARY SET T_JKH = '" + TOT_VAL +
                        "' WHERE SCHEME_NAME ='" + schemeName + "'";

                    System.Diagnostics.Debug.WriteLine(sqlCmdUpdate);
                    using (Entities ctxData = new Entities())
                    {
                        success = tool.ExecuteSql(ctxData, sqlCmdUpdate);
                    }
                }
            }
           
            return success;
        }

        public bool UpdateDataMaintenance(Estimate updateMain, string schemeName, string puid, string billrate)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            
            decimal TOT_VAL = 0;
            using (Entities ctxdata = new Entities())
            {
                var inst_pr = (from p in ctxdata.WV_PU_MAST
                               where p.PU_ID == puid && p.BILL_RATE == billrate
                               select p.PU_INST_PR).Single();

                var mat_pr = (from p in ctxdata.WV_PU_MAST
                               where p.PU_ID == puid && p.BILL_RATE == billrate
                               select p.PU_MAT_PR).Single();

                var total = (from p in ctxdata.WV_BOQ_SUMMARY
                             where p.SCHEME_NAME == schemeName
                             select p.T_JKH).Single();

                var qty = (from p in ctxdata.WV_BOQ_DATA
                           where p.SCHEME_NAME == schemeName && p.PU_ID == puid && p.RATE_INDICATOR == billrate
                           select p.PU_QTY).Single();

                TOT_VAL = Convert.ToDecimal(total) - ((Convert.ToDecimal(qty) * Convert.ToDecimal(inst_pr)) + (Convert.ToDecimal(qty) * Convert.ToDecimal(mat_pr))) + ((Convert.ToDecimal(updateMain.MAIN_PU_QTY) * Convert.ToDecimal(inst_pr)) + (Convert.ToDecimal(updateMain.MAIN_PU_QTY) * Convert.ToDecimal(mat_pr)));

                string sqlCmdUpdate = "UPDATE WV_BOQ_SUMMARY SET T_JKH = '" + TOT_VAL +
                    "' WHERE SCHEME_NAME ='" + schemeName + "'";

                System.Diagnostics.Debug.WriteLine(sqlCmdUpdate);
                using (Entities ctxData = new Entities())
                {
                    success = tool.ExecuteSql(ctxData, sqlCmdUpdate);
                }

                sqlCmd = "UPDATE WV_BOQ_DATA SET PU_DESC = '" + updateMain.MAIN_PU_DESC +
                "', PU_QTY = '" + updateMain.MAIN_PU_QTY +
                "', OLD_MAT_PR = '" + updateMain.MAIN_OLD_MAT_PR +
                "' WHERE SCHEME_NAME ='" + schemeName + "' AND PU_ID ='" + puid + "' AND RATE_INDICATOR = '" + billrate + "'";

                System.Diagnostics.Debug.WriteLine(sqlCmd);
                using (Entities ctxData = new Entities())
                {
                    success = tool.ExecuteSql(ctxData, sqlCmd);
                }
            }
            return success;
        }


        public bool AddDataMaintenanceContract(string schemeName, string contractNo, string itemNo, string qty)
        {
            Tools tool = new Tools();
            bool success = true;
            string contractDesc = "";
            string netPrice = "";
            string uom = "";
            int CountQuery = 0;
            if (itemNo == "Multiple")
            {
                itemNo = "-1";
            }
            int itemNo_con = Convert.ToInt32(itemNo);

            using (Entities ctxData = new Entities())
            {
                CountQuery = (from a in ctxData.WV_CONTRACT_MAST
                              where a.CONTRACT_NO == contractNo && a.ITEM_NO == itemNo_con
                            select a).Count();
            }

            if (CountQuery != 0)
            {
                using (Entities ctxData = new Entities())
                {
                    var query = from a in ctxData.WV_CONTRACT_MAST
                                where a.CONTRACT_NO == contractNo && a.ITEM_NO == itemNo_con
                                select new { a.SHORT_TEXT, a.NET_PRICE, a.ORDER_UNIT };
                    foreach (var a in query)
                    {
                        contractDesc = a.SHORT_TEXT;
                        netPrice = a.NET_PRICE.ToString();
                        uom = a.ORDER_UNIT;
                    }
                }

                string sqlStr = "insert into WV_BOQ_DATA (SCHEME_NAME, CONTRACT_NO, ITEM_NO, CONTRACT_DESC, PU_QTY, NET_PRICE, PU_UOM  ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[7];
                oraPrm[0] = new OracleParameter("v_SCHEME_NAME", OracleDbType.Varchar2);
                oraPrm[0].Value = schemeName;
                oraPrm[1] = new OracleParameter("v_CONTRACT_NO", OracleDbType.Varchar2);
                oraPrm[1].Value = contractNo;
                oraPrm[2] = new OracleParameter("v_ITEM_NO", OracleDbType.Varchar2);
                oraPrm[2].Value = itemNo;
                oraPrm[3] = new OracleParameter("v_CONTRACT_DESC", OracleDbType.Varchar2);
                oraPrm[3].Value = contractDesc;
                oraPrm[4] = new OracleParameter("v_PU_QTY", OracleDbType.Varchar2);
                oraPrm[4].Value = qty;
                oraPrm[5] = new OracleParameter("v_NET_PRICE", OracleDbType.Varchar2);
                oraPrm[5].Value = netPrice;
                oraPrm[6] = new OracleParameter("v_PU_UOM", OracleDbType.Varchar2);
                oraPrm[6].Value = uom;


                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                System.Diagnostics.Debug.WriteLine("---test add ---");
                decimal TOT_VAL;
                using (Entities ctxdata = new Entities())
                {
                    int countdata = (from p in ctxdata.WV_BOQ_SUMMARY
                                     where p.SCHEME_NAME == schemeName
                                     select p).Count();
                    System.Diagnostics.Debug.WriteLine("countdata :" + countdata);
                    if (countdata == 0)
                    {
                        TOT_VAL = (Convert.ToDecimal(qty) * Convert.ToDecimal(netPrice));
                        System.Diagnostics.Debug.WriteLine("TOT_VAL " + TOT_VAL);
                        string sqlStrTot = "insert into WV_BOQ_SUMMARY (SCHEME_NAME, CONTRACT ";
                        sqlStrTot += ") values ";

                        OracleParameter[] oraPrmTot = new OracleParameter[2];
                        oraPrmTot[0] = new OracleParameter("v_SCHEME_NAME", OracleDbType.Varchar2);
                        oraPrmTot[0].Value = schemeName;
                        oraPrmTot[1] = new OracleParameter("v_CONTRACT", OracleDbType.Varchar2);
                        oraPrmTot[1].Value = TOT_VAL;

                        tool.ExecuteStored(connString, sqlStrTot, CommandType.StoredProcedure, oraPrmTot, false);
                    }
                    else
                    {

                        var total = (from p in ctxdata.WV_BOQ_SUMMARY
                                     where p.SCHEME_NAME == schemeName
                                     select p.CONTRACT).Single();
                        TOT_VAL = Convert.ToDecimal(total) + (Convert.ToDecimal(qty) * Convert.ToDecimal(netPrice));

                        string sqlCmdUpdate = "UPDATE WV_BOQ_SUMMARY SET CONTRACT = '" + TOT_VAL +
                            "' WHERE SCHEME_NAME ='" + schemeName + "'";

                        System.Diagnostics.Debug.WriteLine(sqlCmdUpdate);
                        using (Entities ctxData = new Entities())
                        {
                            success = tool.ExecuteSql(ctxData, sqlCmdUpdate);
                        }
                    }
                }
            }
            return success;
        }

        public bool CheckItemContractBOQ(string schemeName, string itemNo)
        {
            Tools tool = new Tools();
            bool success = true;
            int CountQuery = 0;
            int itemNo_con = Convert.ToInt32(itemNo);
            using (Entities ctxData = new Entities())
            {
                CountQuery = (from a in ctxData.WV_BOQ_DATA
                              where a.SCHEME_NAME == schemeName && a.ITEM_NO == itemNo_con
                              select a).Count();
            }

            if (CountQuery != 0)
            {
                success = false;
            }
            return success;
        }

        public bool UpdateDataMaintenanceContract(string schemeName, string contractNo, string itemNo, string qty)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";
            sqlCmd = "UPDATE WV_BOQ_DATA SET PU_QTY = '" + qty +
                "' WHERE SCHEME_NAME ='" + schemeName + "' AND CONTRACT_NO ='" + contractNo + "' AND ITEM_NO = '" + itemNo + "'";

            System.Diagnostics.Debug.WriteLine(sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
                var total = (from p in ctxData.WV_BOQ_DATA
                             where p.SCHEME_NAME == schemeName
                             select p);//new {p => p.PU_QTY * p.NET_PRICE });

                var sumTotal = total.Sum(p => (p.PU_QTY * p.NET_PRICE));
                System.Diagnostics.Debug.WriteLine("SUM TOTAL SUMMARY: "+ sumTotal);

                string sqlCmd2 = "UPDATE WV_BOQ_SUMMARY SET CONTRACT = '" + sumTotal + "' WHERE SCHEME_NAME ='" + schemeName + "'";

                tool.ExecuteSql(ctxData, sqlCmd2);

            }
            return success;
        }

        public bool UpdateDataLWH(Estimate newLWH, string schemeName)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_ESTM_LAB_USAGE SET BURUH = '" + newLWH.LAB_BURUH +
                "', BIASA = '" + newLWH.LAB_BIASA +
                "', KANAN = '" + newLWH.LAB_KANAN +
                "', PEMBANTU = '" + newLWH.LAB_PEMBANTU +
                "' WHERE SCHEME_NAME ='" + schemeName + "'";

            System.Diagnostics.Debug.WriteLine(sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool UpdateDataINC(Estimate newINC, string schemeName)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_ESTM_INC_COST SET CTRT_VALUE = '" + newINC.INC_CTRT_VALUE +
                "', CTRT_OT_SUP_HOURS = '" + newINC.INC_CTRT_OT_SUP_HOURS +
                "', CTRT_OT_VALUE = '" + newINC.INC_CTRT_OT_VALUE +
                "', EXEC_MILEAGE = '" + newINC.INC_EXEC_MILEAGE +
                "', NON_EXEC_MILEAGE = '" + newINC.INC_NON_EXEC_MILEAGE +
                "' WHERE SCHEME_NAME ='" + schemeName + "'";

            System.Diagnostics.Debug.WriteLine(sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool UpdateDataBPlanEstimate(Estimate newBPlanEstimate, string schemeName)
        {
            Tools tool = new Tools();
            bool success = true;
            string sqlCmd = "";

            sqlCmd = "UPDATE WV_ESTM_DATA SET JAM_BURUH = '" + newBPlanEstimate.BP_JAM_BURUH +
                "', JAM_NILAI = '" + newBPlanEstimate.BP_JAM_NILAI +
                "', OT_BURUH = '" + newBPlanEstimate.BP_OT_BURUH +
                "', OT_NILAI = '" + newBPlanEstimate.BP_OT_NILAI +
                "', TM_PEL = '" + newBPlanEstimate.BP_TM_PEL +
                "' WHERE SCHEME_NAME ='" + schemeName + "'";

            System.Diagnostics.Debug.WriteLine(sqlCmd);
            using (Entities ctxData = new Entities())
            {
                success = tool.ExecuteSql(ctxData, sqlCmd);
            }

            return success;

        }

        public bool AddEstimate_Main(Estimate newEstMain)
        {
            try
            {
                bool success = true;
                Tools tool = new Tools();

                string sqlStr = "insert into WV_MAIN_DATA (SCHEME_NAME, PU_ID, PU_DESC, PU_MAT_PR, PU_INST_PR, PU_QTY, OLD_MAT_PR, OLD_INSTALL_PR, CONSTRUCT_BY, RECVR_QTY, BILL_RATE ";
                sqlStr += ") values ";

                OracleParameter[] oraPrm = new OracleParameter[11];
                oraPrm[0] = new OracleParameter("v_SCHEME_NAME", OracleDbType.Varchar2);
                oraPrm[0].Value = newEstMain.SCHEME_NAME;
                oraPrm[1] = new OracleParameter("v_MAIN_PU_ID", OracleDbType.Varchar2);
                oraPrm[1].Value = newEstMain.MAIN_PU_ID;
                oraPrm[2] = new OracleParameter("v_MAIN_PU_DESC", OracleDbType.Varchar2);
                oraPrm[2].Value = newEstMain.MAIN_PU_DESC;
                oraPrm[3] = new OracleParameter("v_MAIN_PU_MAT_PR", OracleDbType.Varchar2);
                oraPrm[3].Value = newEstMain.MAIN_PU_MAT_PR;
                oraPrm[4] = new OracleParameter("v_MAIN_PU_INST_PR", OracleDbType.Varchar2);
                oraPrm[4].Value = newEstMain.MAIN_PU_INST_PR;
                oraPrm[5] = new OracleParameter("v_MAIN_PU_QTY", OracleDbType.Varchar2);
                oraPrm[5].Value = newEstMain.MAIN_PU_QTY;
                oraPrm[6] = new OracleParameter("v_MAIN_OLD_MAT_PR", OracleDbType.Varchar2);
                oraPrm[6].Value = newEstMain.MAIN_OLD_MAT_PR;
                oraPrm[7] = new OracleParameter("v_MAIN_OLD_INSTALL_PR", OracleDbType.Varchar2);
                oraPrm[7].Value = newEstMain.MAIN_OLD_INSTALL_PR;
                oraPrm[8] = new OracleParameter("v_MAIN_CONSTRUCT_BY", OracleDbType.Varchar2);
                oraPrm[8].Value = newEstMain.MAIN_CONSTRUCT_BY;
                oraPrm[9] = new OracleParameter("v_MAIN_RECVR_QTY", OracleDbType.Varchar2);
                oraPrm[9].Value = newEstMain.MAIN_RECVR_QTY;
                oraPrm[10] = new OracleParameter("v_MAIN_BILL_RATE", OracleDbType.Varchar2);
                oraPrm[10].Value = newEstMain.MAIN_BILL_RATE;

                tool.ExecuteStored(connString, sqlStr, CommandType.StoredProcedure, oraPrm, false);
                // System.Diagnostics.Debug.WriteLine("val.. "+newEstMain.MAIN_PU_INST_PR);
                return success;
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                return false;
            }
        }

        [WebMethod]
        public string GetEstimate_MainList(string schemeName)
        {
            using (Entities ctxData = new Entities())
            {
                var query = from a in ctxData.WV_MAIN_DATA
                            where a.SCHEME_NAME == schemeName
                            select new { a.PU_ID, a.PU_DESC, a.PU_INST_PR, a.PU_MAT_PR, a.PU_QTY, a.OLD_INSTALL_PR, a.OLD_MAT_PR, a.CONSTRUCT_BY, a.RECVR_QTY, a.BILL_RATE };

                if (query.Count() > 0)
                {
                    string output = "";
                    //var d = query.Single();
                    int counter = 0;
                    foreach (var lp in query)
                    {
                        counter++;
                        System.Diagnostics.Debug.WriteLine(counter);

                        string carry = "";
                        output += lp.PU_ID + "|" + lp.PU_DESC + "|" + lp.PU_MAT_PR + "|" + lp.PU_INST_PR + "|" + lp.PU_QTY + "|" + lp.OLD_MAT_PR + "|" + lp.OLD_INSTALL_PR + "|" + lp.CONSTRUCT_BY +
                            "|" + lp.RECVR_QTY + "|" + lp.BILL_RATE;

                        output += "!";
                    }

                    return output;
                }
                else
                {
                    return "no";
                }
            }
        }


        #endregion


        public bool True { get; set; }
    }
}
